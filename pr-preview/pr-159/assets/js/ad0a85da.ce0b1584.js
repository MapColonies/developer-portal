"use strict";(self.webpackChunk_map_colonies_developer_portal=self.webpackChunk_map_colonies_developer_portal||[]).push([[8969],{34655:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=n(74848),t=n(28453);const s={id:"dem-terrain-provider",slug:"info",title:"Terrain Provider",description:"Service to provider DTM surface provider for cesium",tags:["dem","API","elevation","dtm","height","coordinate"]},a="Quantized Mesh Provider (Cesium.js Terrain Provider)",o={id:"MapColonies/DEM/Services/CesiumTerrainProvider/dem-terrain-provider",title:"Terrain Provider",description:"Service to provider DTM surface provider for cesium",source:"@site/docs/MapColonies/DEM/Services/CesiumTerrainProvider/README.md",sourceDirName:"MapColonies/DEM/Services/CesiumTerrainProvider",slug:"/MapColonies/DEM/Services/CesiumTerrainProvider/info",permalink:"/developer-portal/pr-preview/pr-159/docs/MapColonies/DEM/Services/CesiumTerrainProvider/info",draft:!1,unlisted:!1,editUrl:"https://github.com/MapColonies/developer-portal/tree/main/packages/create-docusaurus/templates/shared/docs/MapColonies/DEM/Services/CesiumTerrainProvider/README.md",tags:[{inline:!0,label:"dem",permalink:"/developer-portal/pr-preview/pr-159/docs/tags/dem"},{inline:!0,label:"API",permalink:"/developer-portal/pr-preview/pr-159/docs/tags/api"},{inline:!0,label:"elevation",permalink:"/developer-portal/pr-preview/pr-159/docs/tags/elevation"},{inline:!0,label:"dtm",permalink:"/developer-portal/pr-preview/pr-159/docs/tags/dtm"},{inline:!0,label:"height",permalink:"/developer-portal/pr-preview/pr-159/docs/tags/height"},{inline:!0,label:"coordinate",permalink:"/developer-portal/pr-preview/pr-159/docs/tags/coordinate"}],version:"current",frontMatter:{id:"dem-terrain-provider",slug:"info",title:"Terrain Provider",description:"Service to provider DTM surface provider for cesium",tags:["dem","API","elevation","dtm","height","coordinate"]},sidebar:"docSidebar",previous:{title:"Services",permalink:"/developer-portal/pr-preview/pr-159/docs/category/services-3"},next:{title:"Catalog \ud83d\uddc3\ufe0f",permalink:"/developer-portal/pr-preview/pr-159/docs/MapColonies/DEM/Services/catalog/dem-catalog"}},d={},l=[{value:"Understanding Quantized Mesh",id:"understanding-quantized-mesh",level:2},{value:"Anatomy of a Quantized Mesh Tile",id:"anatomy-of-a-quantized-mesh-tile",level:2},{value:"Integrating a Quantized Mesh Provider with Cesium.js",id:"integrating-a-quantized-mesh-provider-with-cesiumjs",level:2},{value:"Step-by-Step Configuration",id:"step-by-step-configuration",level:2},{value:"Cesium Viewer Initialization",id:"cesium-viewer-initialization",level:3},{value:"CesiumTerrainProvider Instantiation",id:"cesiumterrainprovider-instantiation",level:3},{value:"Assigning the Terrain Provider",id:"assigning-the-terrain-provider",level:3},{value:"Comprehensive Integration Example",id:"comprehensive-integration-example",level:2},{value:"Final Result",id:"final-result",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"quantized-mesh-provider-cesiumjs-terrain-provider",children:"Quantized Mesh Provider (Cesium.js Terrain Provider)"})}),"\n",(0,r.jsx)(i.h2,{id:"understanding-quantized-mesh",children:"Understanding Quantized Mesh"}),"\n",(0,r.jsx)(i.p,{children:"Quantized Mesh constitutes a highly efficient binary format, meticulously engineered for the purpose of streaming three-dimensional terrain elevation and normal data across networked environments. This specification, developed under the auspices of the Cesium team, directly addresses the inherent complexities associated with the transmission of voluminous terrain datasets through the implementation of a sophisticated quantization schema. This methodology demonstrably reduces data payload while rigorously preserving the fidelity of visual representation. In contradistinction to conventional terrain formats predicated upon heightmap methodologies, Quantized Mesh directly encodes triangular mesh data. This foundational architectural decision confers a plurality of salient advantages:"}),"\n",(0,r.jsx)("p",{align:"center",children:(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{alt:"Terrain TIN",src:n(11345).A+"",width:"625",height:"456"})})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:"Data Efficiency: Quantization effects a reduction in the precision of vertex coordinates (X, Y, Z) and associated normals to a predetermined number of bits, typically within the range of 12 or 16-bit unsigned integers. The consequence of this process is a substantial diminution in file sizes, thereby facilitating accelerated download times and a concomitant reduction in network bandwidth consumption."}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:["Progressive ",(0,r.jsx)(i.code,{children:"Level-of-Detail (LOD)"})," Streaming: The format inherently supports a progressive loading paradigm. This capability empowers client-side applications to dynamically solicit and render terrain tiles of progressively higher resolution as the user's viewpoint converges upon a specific geographical area, thereby optimizing rendering performance and enhancing the interactive user experience."]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:"Integrated Normals: Quantized Mesh tiles possess the optional capacity to incorporate pre-computed vertex normals. The inclusion of these normals is deemed critical for the enablement of accurate per-vertex lighting and shading, an indispensable prerequisite for the rendering of visually verisimilar three-dimensional terrain."}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:"Water Masking Capability: The specification encompasses provisions for water masks. These masks precisely delineate aquatic bodies within a given terrain tile, thereby facilitating the accurate rendering of water surfaces and their interactive relationship with the contiguous terrestrial environment."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"anatomy-of-a-quantized-mesh-tile",children:"Anatomy of a Quantized Mesh Tile"}),"\n",(0,r.jsx)(i.p,{children:"A Quantized Mesh tile is structurally defined as a binary data block, meticulously organized into several discrete sections to facilitate efficient parsing and subsequent rendering operations:"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:"Header: This initial segment contains essential metadata pertaining to the specific tile. Crucial information encompassed herein includes the tile's bounding box, delineated in geodetic coordinates (comprising longitude, latitude, and height range), the minimum and maximum terrain heights present within the tile, and the aggregate count of vertices."}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:"Vertex Data: This foundational section stores the quantized positions (X, Y, Z coordinates) of all vertices, expressed relative to the tile's localized coordinate system. These positions are typically subjected to quantization to a 16-bit unsigned integer range, which subsequently undergoes de-quantization on the client-side."}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:"Triangle Data (Indices): This section defines the topological connectivity of the vertices, thereby forming the triangular facets of the terrain mesh. This data typically employs variable-length encoding, such as zig-zag encoding, to further augment compression efficacy."}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:"Edge Indices: This critical section specifies the indices of those vertices situated along the tile's four peripheral edges. These edge indices are of paramount importance for ensuring the seamless stitching and continuous integration between adjacent terrain tiles, thereby precluding the occurrence of visual discontinuities or gaps."}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:"Normal Data (Optional): Should the terrain dataset incorporate per-vertex normals, this section accommodates their quantized representations. These normals are employed by the rendering engine for the execution of precise lighting calculations, thereby contributing significantly to the visual verisimilitude of the terrain."}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:"Water Mask (Optional): This section, if present, contains a binary mask serving to identify areas encompassed by water within the confines of the tile. This mask is subsequently utilized by Cesium.js for the application of appropriate water rendering effects."}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:"Metadata (Optional): This flexible section permits the inclusion of additional, arbitrary metadata specific to the terrain provider or the dataset itself."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"The process of quantization involves the mapping of original floating-point geographic coordinates and heights to a compact range of integer values. These integer values are then transmitted with efficiency. Upon receipt, the client-side rendering engine executes the inverse operation, de-quantizing these integers back into floating-point numbers, which are then suitable for three-dimensional rendering."}),"\n",(0,r.jsx)(i.h2,{id:"integrating-a-quantized-mesh-provider-with-cesiumjs",children:"Integrating a Quantized Mesh Provider with Cesium.js"}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"Cesium.js"})," provides robust, inherent support for the consumption of Quantized Mesh data through its ",(0,r.jsx)(i.code,{children:"Cesium.CesiumTerrainProvider"})," class. This class intelligently manages the entire lifecycle of terrain data, encompassing the request for tiles, the parsing of binary data, and the efficient rendering within the three-dimensional globe environment."]}),"\n",(0,r.jsxs)(i.p,{children:["For the successful configuration of a ",(0,r.jsx)(i.code,{children:"CesiumTerrainProvider"}),", the primary requisite is the ",(0,r.jsx)(i.code,{children:"Uniform Resource Locator (URL)"})," of a server endpoint that strictly adheres to the Cesium Terrain Server specification for the provision of Quantized Mesh tiles."]}),"\n",(0,r.jsx)(i.h2,{id:"step-by-step-configuration",children:"Step-by-Step Configuration"}),"\n",(0,r.jsxs)(i.p,{children:["Dependency Inclusion (Cesium.js): It is imperative that the ",(0,r.jsx)(i.code,{children:"Cesium.js"})," library and its associated ",(0,r.jsx)(i.code,{children:"CSS"})," are correctly incorporated into the ",(0,r.jsx)(i.code,{children:"HTML"})," document. This objective may be achieved through the referencing of the Cesium ",(0,r.jsx)(i.code,{children:"Content Delivery Network (CDN)"})," or by means of local hosting of the library."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">\n    <title>Cesium Quantized Mesh Integration</title>\n    \x3c!-- Include Cesium.js library --\x3e\n    <script src="https://cesium.com/downloads/cesiumjs/releases/1.118/Build/Cesium/Cesium.js"><\/script>\n    \x3c!-- Include Cesium widget styles --\x3e\n    <link href="https://cesium.com/downloads/cesiumjs/releases/1.118/Build/Cesium/Widgets/widgets.css" rel="stylesheet">\n    <style>\n        /* Ensure the Cesium container occupies the full viewport */\n        html, body, #cesiumContainer {\n            width: 100%;\n            height: 100%;\n            margin: 0;\n            padding: 0;\n            overflow: hidden;\n        }\n    </style>\n</head>\n<body>\n    <div id="cesiumContainer"></div>\n    <script>\n        // The Cesium application logic shall be initialized within this script block.\n    <\/script>\n</body>\n</html>\n'})}),"\n",(0,r.jsx)(i.h3,{id:"cesium-viewer-initialization",children:"Cesium Viewer Initialization"}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"Cesium.Viewer"})," class is to be instantiated. This class functions as the primary entry point for the display of the interactive three-dimensional globe and for the management of its various constituent components."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:"// The Cesium Viewer is to be initialized with the designated container element.\nconst viewer = new Cesium.Viewer('cesiumContainer');\n"})}),"\n",(0,r.jsx)(i.h3,{id:"cesiumterrainprovider-instantiation",children:"CesiumTerrainProvider Instantiation"}),"\n",(0,r.jsxs)(i.p,{children:["Create an instance of ",(0,r.jsx)(i.code,{children:"Cesium.CesiumTerrainProvider"}),", providing the base ",(0,r.jsx)(i.code,{children:"URL"})," of the Quantized Mesh terrain server. Optional parameters may be supplied for the request of supplementary data, such as vertex normals and water masks."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:"// A new CesiumTerrainProvider instance.\nconst terrainProvider = new Cesium.CesiumTerrainProvider({\n    url: 'https://your.custom.terrain.server/path/to/tiles/', // CRITICAL: This URL must be replaced with the actual URL of the custom Quantized Mesh terrain server.\n    requestVertexNormals: false,          // Optional: The fetching of vertex normals is to be enabled for enhanced lighting.\n    requestWaterMask: false               // Optional: The fetching of water masks is to be enabled for accurate water rendering.\n});\n"})}),"\n",(0,r.jsxs)(i.admonition,{type:"info",children:[(0,r.jsx)(i.p,{children:(0,r.jsx)(i.em,{children:"Critical Considerations Pertaining to the url Parameter"})}),(0,r.jsxs)(i.p,{children:["The url parameter must unequivocally designate the root directory of the terrain tile service. The ",(0,r.jsx)(i.code,{children:"CesiumTerrainProvider"})," internally constructs the complete path to individual tiles (e.g. level/x/y.terrain) based upon this foundational URL.\nGet the URL for the terrain server from the catalog, details ",(0,r.jsx)(i.a,{href:"/developer-portal/pr-preview/pr-159/docs/MapColonies/DEM/Guides/dem-getting-started#query-csw-catalog-step-1",children:"here"})]})]}),"\n",(0,r.jsx)(i.h3,{id:"assigning-the-terrain-provider",children:"Assigning the Terrain Provider"}),"\n",(0,r.jsxs)(i.p,{children:["Assign the newly created terrainProvider instance to the ",(0,r.jsx)(i.code,{children:"terrainProvider"})," property of the ",(0,r.jsx)(i.code,{children:"viewer.scene"})," object. This action directs ",(0,r.jsx)(i.code,{children:"Cesium.js"})," to utilize the specified Quantized Mesh data source for the rendering of the globe's terrain."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-js",children:"// Assign the custom terrain provider to the viewer's scene.\nviewer.terrainProvider = terrainProvider;\n"})}),"\n",(0,r.jsx)(i.h2,{id:"comprehensive-integration-example",children:"Comprehensive Integration Example"}),"\n",(0,r.jsxs)(i.p,{children:["The following HTML example provides a complete and executable demonstration of the integration of a Quantized Mesh terrain provider within a ",(0,r.jsx)(i.code,{children:"Cesium.js"})," application:"]}),"\n",(0,r.jsx)(i.admonition,{type:"warning",children:(0,r.jsxs)(i.p,{children:[(0,r.jsxs)(i.strong,{children:["Authentication must be integrated in order to communicate with the terrain provider service, see the principles ",(0,r.jsx)(i.a,{href:"/docs/MapColonies/authentication",children:"here"}),"."]}),(0,r.jsx)("br",{}),"\nRefer down in the example down blow for cesium query / header mapcolonies' token configuration"]})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-html",children:"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no\">\n    <title>Cesium Quantized Mesh Integration Example</title>\n    <script src=\"https://cesium.com/downloads/cesiumjs/releases/1.118/Build/Cesium/Cesium.js\"><\/script>\n    <link href=\"https://cesium.com/downloads/cesiumjs/releases/1.118/Build/Cesium/Widgets/widgets.css\" rel=\"stylesheet\">\n    <style>\n        html, body, #cesiumContainer {\n            width: 100%;\n            height: 100%;\n            margin: 0;\n            padding: 0;\n            overflow: hidden;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"cesiumContainer\"></div>\n    <script>\n        // The Cesium Viewer is to be initialized.\n        const viewer = new Cesium.Viewer('cesiumContainer', {\n            // Optional: The default imagery layer picker may be disabled if manual imagery management is intended.\n            baseLayerPicker: false,\n            // Optional: An initial flat ellipsoid terrain provider may be utilized to mitigate\n            // visual flickering should the custom terrain load asynchronously.\n            terrainProvider: new Cesium.EllipsoidTerrainProvider()\n        });\n\n        // Create the CesiumTerrainProvider instance, referencing the custom Quantized Mesh server.\n        // CRITICAL: The placeholder 'https://your.custom.terrain.server/path/to/tiles/' must be substituted with the actual URL from MapColonies 3D / DEM Catalog!\n        const terrainProvider = new Cesium.CesiumTerrainProvider({\n            url: 'https://your.custom.terrain.server/path/to/tiles/',\n            // url:new Cesium.Resource({\n            //      url: '<TERRAIN_SERVER_URL>',                       \n            //      headers: { 'x-api-key': MAPCOLONIES_TOKEN },       // choose either header or query\n            //      queryParameters: { 'token': MAPCOLONIES_TOKEN },   // choose either header or query\n            //}),\n            requestVertexNormals: true,          // Vertex normals are to be requested for enhanced lighting and shading.\n            requestWaterMask: true               // Water masks are to be requested for accurate water rendering effects.\n        });\n\n        // Assign the custom terrain provider to the viewer's scene.\n        viewer.terrainProvider = terrainProvider;\n\n        // Optional: The camera may be programmatically directed to a specific geographic location\n        // to immediately showcase the loaded terrain.\n        viewer.camera.flyTo({\n            destination: Cesium.Cartesian3.fromDegrees(-100.0, 40.0, 100000.0), // Longitude, Latitude, Altitude (in meters)\n            orientation: {\n                heading: Cesium.Math.toRadians(0.0),    // Orientation towards North\n                pitch: Cesium.Math.toRadians(-30.0),    // Downward pitch of 30 degrees\n                roll: Cesium.Math.toRadians(0.0)        // Absence of roll\n            },\n            duration: 3 // Duration of the flight in seconds\n        });\n\n        // Add robust error handling for terrain loading.\n        // The errorEvent is dispatched if issues arise during the fetching or parsing of terrain tiles.\n        terrainProvider.errorEvent.addEventListener(function(error) {\n            console.error('An error was encountered during terrain loading:', error);\n            // In a production environment, consider using a more user-friendly message\n            // or attempting to utilize a fallback terrain provider.\n        });\n\n        // Optional: A listener may be added for the event signifying the readiness of the terrain provider.\n        // This is beneficial for executing actions only subsequent to the commencement of terrain data loading.\n        terrainProvider.readyPromise.then(function() {\n            console.log('CesiumTerrainProvider is ready and terrain loading has started.');\n        }).otherwise(function(error) {\n            console.error('CesiumTerrainProvider initialization failed', error);\n        });\n    <\/script>\n</body>\n</html>\n"})}),"\n",(0,r.jsx)(i.h3,{id:"final-result",children:"Final Result"}),"\n",(0,r.jsx)(i.p,{children:"If everything is working as expected you should see your map elevated by the terrain provider."}),"\n",(0,r.jsx)("p",{align:"center",children:(0,r.jsx)(i.p,{children:(0,r.jsx)(i.img,{alt:"elevated_terrain",src:n(32873).A+"",width:"1024",height:"501"})})}),"\n",(0,r.jsx)(i.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(i.p,{children:["Quantized Mesh is established as a highly efficacious and efficient format for the streaming of three-dimensional terrain data, serving as a foundational element for high-performance geospatial applications. Through the meticulous utilization of the ",(0,r.jsx)(i.code,{children:"Cesium.CesiumTerrainProvider"})," class, developers are afforded the capability to seamlessly integrate and visualize extensive terrain datasets originating from their proprietary custom terrain servers within their ",(0,r.jsx)(i.code,{children:"Cesium.js"})," applications. This integration facilitates the creation of rich, interactive, and visually compelling three-dimensional globes featuring realistic terrain rendering, thereby significantly augmenting the user's geospatial exploration experience."]})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},32873:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/images/elevated_terrain-da2644334462f449d7c1d2f41e0a68e2.webp"},11345:(e,i,n)=>{n.d(i,{A:()=>r});const r=n.p+"assets/images/terrain_tin-f3f607f5f2da08ad5d183e21c7560ff2.png"},28453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>o});var r=n(96540);const t={},s=r.createContext(t);function a(e){const i=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:i},e.children)}}}]);