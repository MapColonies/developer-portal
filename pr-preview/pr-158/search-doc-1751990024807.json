{"searchDocs":[{"title":"2022-Q3 🎉","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/blog/2022-q3","content":"","keywords":"","version":null},{"title":"📄 TL;DR​","type":1,"pageTitle":"2022-Q3 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2022-q3#-tldr","content":" Production-ready release, ready for integration and going live. Mainly focused on tile streaming services and catalog services.  ","version":null,"tagName":"h2"},{"title":"🚀 Features​","type":1,"pageTitle":"2022-Q3 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2022-q3#-features","content":" ","version":null,"tagName":"h2"},{"title":"Raster​","type":1,"pageTitle":"2022-Q3 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2022-q3#raster","content":"   Overview​  Optimal, complete, easy, efficient, and robust solution for raster product consumption is now available. Just start by querying the catalog for the desired product and set your map component up in no time.  Catalog Service​  You are now able to search, and filter all the available raster products in your cloud environment via CSW protocol. Refer to the profile of the raster records here  Tile Serving Service (“Map Server”)​  You are now able to consume raster tiles via the tile serving service in the WMTS protocol. Check here for a step-by-step tutorial.  Known Bugs 🐞​  GetCapabilities shows the wrong extent of the layer.  There is up to 5 minutes delay between a layer presented in the catalog to be available for consumption via the tile server.  ","version":null,"tagName":"h3"},{"title":"3D​","type":1,"pageTitle":"2022-Q3 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2022-q3#3d","content":"   Overview​  Optimal, complete, easy, efficient, and robust solution for raster product consumption is now available. Just start by querying the catalog for the desired product and set your map component up in no time.  Catalog Service​  You are now able to search, and filter all the available 3D photorealistic models in your cloud environment via CSW protocol. Refer to the profile of the 3D records here  Tile Serving Service​  You are now able to consume 3D tiles (b3dm) via the tile serving service in a tile layer (“XYZ”) protocol. Check here for a step-by-step tutorial.  ","version":null,"tagName":"h3"},{"title":"Vector​","type":1,"pageTitle":"2022-Q3 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2022-q3#vector","content":" In this version, we present a new service and rasterized vector products.    Replication Service​  This new service allows you to replicate vector layers to your environment including keeping track of changes along the timeline, as of the day of the release the buildings layer is now available for consumption. refer to here.  Digital Map Rasterized Vector Products​  In this version, we introduce several rasterized vector products.  Base map - a simple non-transparent basic overlay for your maps. the map continuously updates with the latest changes. Control Map - the famous universal control language map.  ","version":null,"tagName":"h3"},{"title":"Catalog App​","type":1,"pageTitle":"2022-Q3 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2022-q3#catalog-app","content":" Overview​  The catalog app is now live, and the web application allows you to view, search and filter 3D, Raster, and Vector products.          Products Management​  For admin users, the products management view is now available. You are able to edit the metadata of products.  Known Bugs 🐞​  Job Management:  The refresh button makes the job’s progress disappear.Job progress won’t update with new data when the dialog is open.  MISC:  Backend errors aren't prompted properly to the client.Special characters support in metadata external ID field.When opening the file browser in the ingestion form, it messes up the app’s styles. (Refreshing the app helps).When searching an area on the map for products, update any field from the product’s metadata and then select edit again, the selected metadata will be the old one. ","version":null,"tagName":"h3"},{"title":"2023-Q1 🎉","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/blog/2023-q1","content":"","keywords":"","version":null},{"title":"📄 TL;DR​","type":1,"pageTitle":"2023-Q1 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2023-q1#-tldr","content":" Introducing a new service in raster. New exciting features in the catalog app! Overall improvements and bug fixes.  ","version":null,"tagName":"h2"},{"title":"🚀 Features​","type":1,"pageTitle":"2023-Q1 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2023-q1#-features","content":" ","version":null,"tagName":"h2"},{"title":"Raster​","type":1,"pageTitle":"2023-Q1 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2023-q1#raster","content":" Overview​  Overall Raster tiles serving, ingestion and export.  ","version":null,"tagName":"h3"},{"title":"General​","type":1,"pageTitle":"2023-Q1 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2023-q1#general","content":" All services moved to David's Fortress Site.  Catalog Service​  Catalog Profile Update​  Additions:  mc:links - will also include a link for KVP version of WMTS.  Tile Serving (“Map Server”)​  General features​  Caching and monitoring improvements.  Serving 3D Tiles via http2  Export Service (activated via Catalog App in manager mode)​  Via the catalog app, catalog managers can now export a multi-resolution GPKG for offline usage.  Known Bugs 🐞​  GetCapabilities shows the wrong extent of the layer. There is up to 5 minutes delay between a layer presented in the catalog to be available for consumption via the tile server.  ","version":null,"tagName":"h3"},{"title":"3D​","type":1,"pageTitle":"2023-Q1 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2023-q1#3d","content":"   Overall improvements in serving 3D tiles.Serving 3D Tiles via http2  ","version":null,"tagName":"h3"},{"title":"Vector​","type":1,"pageTitle":"2023-Q1 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2023-q1#vector","content":"   Query Service​  Overall improvements in Query Service performance.  ","version":null,"tagName":"h3"},{"title":"Catalog App​","type":1,"pageTitle":"2023-Q1 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2023-q1#catalog-app","content":" General improvements of the UI \\ UX Added support for data export services KVP Capabilities added in layer metadata Added Multi-domain export principles. Currently supported raster’s multi-resolution export While defining multi-resolution/parts export, available following options for part definition By drawing rectangle By drawing polygon By entering a coordinates of exported rectangle By uploading SHAPE/GeoJson file By selecting predefined AOI Each export part will have estimated sizeExported artifact will have total estimated size as wellAvailable disk space info Tiles for covered layers are not requested (performance oriented and configurable) Job manager shows links to exported artifacts  Products Management​  Ingestion:  Improved logsPrevention of ingesting non EPSG4326 data  Known Bugs 🐞​  Some jobs gets timeout (large GPKGs) ","version":null,"tagName":"h3"},{"title":"2022-Q4 🎉","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/blog/2022-q4","content":"","keywords":"","version":null},{"title":"📄 TL;DR​","type":1,"pageTitle":"2022-Q4 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2022-q4#-tldr","content":" Introducing new services in raster, vector. New exciting features in the catalog app! Overall improvements and bug fixes.  ","version":null,"tagName":"h2"},{"title":"🚀 Features​","type":1,"pageTitle":"2022-Q4 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2022-q4#-features","content":" ","version":null,"tagName":"h2"},{"title":"Raster​","type":1,"pageTitle":"2022-Q4 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2022-q4#raster","content":" Overview​  In addition to complete solution for raster product’s consumption. A few major features where introduced in the new version.  Catalog Service​  Catalog Profile Update​  Additions:  transparency - indicates whether a raster layer has transparency  Removals:  WMTS_LAYER field removed from record's Links  New available layers:​    “Best“ layer was updated to latest data in JPEG format“Digital Map“ update“OSM“ layer - a civilian OSM map, for more info click here  Tile Serving (“Map Server”)​  General features​  Caching and monitoring improvements.  Ingestion Service (activated via Catalog App in manager mode)​  A full ingestion solution was added for new products for new materials with various raw data formats (j2k, tiff, GPKG).A partial solution for “updating” existing catalog layers data (currently GPKG only).  Export Service​  Solution for creating raster “offline“ products is now available. (Via API for users with a valid export token) The API supports a webhook when the job finished.  Known Bugs 🐞​  GetCapabilities shows the wrong extent of the layer. There is up to 5 minutes delay between a layer presented in the catalog to be available for consumption via the tile server.  ","version":null,"tagName":"h3"},{"title":"3D​","type":1,"pageTitle":"2022-Q4 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2022-q4#3d","content":"   Overall improvements in serving 3D tiles.  Overview​  Optimal, complete, easy, efficient, and robust solution for raster product consumption is now available. Just start by querying the catalog for the desired product and set your map component up in no time.  Catalog Service​  You are now able to search, and filter all the available 3D photorealistic models in your cloud environment via CSW protocol. Refer to the profile of the 3D records here  Tile Serving Service​  You are now able to consume 3D tiles (b3dm) via the tile serving service in a tile layer (“XYZ”) protocol. Check here for a step-by-step tutorial.  ","version":null,"tagName":"h3"},{"title":"Vector​","type":1,"pageTitle":"2022-Q4 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2022-q4#vector","content":"   Query Service​  This new service provides facilities for searching and retrieving feature data from vector layers. buildings layer is now available to query. Vector query service uses the WFS protocol which is a READ-ONLY Web Feature Service. We provide three actions to query the layers:  GetCapabilities - returns full capabilities provided by the service. DescribeFeatureType - description of a feature type. GetFeature - the request returns a collection of geographic feature instances filtered according to criteria set by the requesting client.  refer to Query Service.  OpenStreetMap Carto (OSM)​  In this version, can be consumed OpenStreetMap Carto like our other Rasterized Vector products (as a part of Digital Map).  OpenStreetMap Carto (OSM Carto for short) is an open-source stylesheet for rendering OpenStreetMap data to raster tiles.  As this stylesheet is open-source, we had to make a few minor changes compared to the original one:  We changed the stylesheet projection from Web Mercator to WGS84. We modified the database insertion script to prefer names in Hebrew and English when possible. We imported data from the Natural Earth dataset in places where we didn't import OSM data.  refer to OpenStreetMap Carto.  Nominatim​  Nominatim (from the Latin, 'by name') is a tool to search OpenStreetMap data by name and address (geocoding) and to generate synthetic addresses of OSM points (reverse geocoding).  In addition to the API, we brought Nominatim UI. Nominatim UI offers a small website for trying Nominatim and inspecting the database content.  refer to Nominatim.    ","version":null,"tagName":"h3"},{"title":"Catalog App​","type":1,"pageTitle":"2022-Q4 🎉","url":"/developer-portal/pr-preview/pr-158/blog/2022-q4#catalog-app","content":" General improvements of the UI \\ UX Components redesignNew fonts and iconsBetter error reportingFly-to 3D model changes automatically map-view to 3D mode Added Vector’s query service in order to visualize an entity and show the details    New tools suite site is now available via the appThe app checks for the availability of graphics hardware acceleration (for more info visit here)    Web tools​  The terrain verification tool is exposed as part of the MapColonies WEB tools suite    Products Management​  Discrete values are now selected from a dropdown instead of free text input.You can now stop / resume jobs from the UI.You can now update a rater layer via the UIJob management screen shows jobs from defined date till NOW    Fixed Bugs 🐞✔️​  Job Management:  The refresh button makes the job’s progress disappear.Job progress won’t update with new data when the dialog is open.  MISC:​  Backend errors aren't prompted properly to the client.Special characters support in metadata external ID field.When opening the file browser in the ingestion form, it messes up the app’s styles. (Refreshing the app helps).When searching an area on the map for products, update any field from the product’s metadata and then select edit again, the selected metadata will be the old one.  Known Bugs 🐞 ❌​  3D footprints are not clamped to terrain. ","version":null,"tagName":"h3"},{"title":"Map viewers","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-overview","content":"","keywords":"","version":"Next"},{"title":"What is a map viewer / component?​","type":1,"pageTitle":"Map viewers","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-overview#what-is-a-map-viewer--component","content":" A map viewer is a visual component to help us display geographic data such as raster, vector, 3D and DEM. It does all of the heavy-lifting in fetching, calculating and displaying the data correctly.  There are many features that a map viewer could implement, please read more about the different libraries and features here.  ","version":"Next","tagName":"h2"},{"title":"Choosing a map viewer​","type":1,"pageTitle":"Map viewers","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-overview#choosing-a-map-viewer","content":" There are so many map viewers out there, how do you choose the best one for your needs? Here we attempt to help you make this decision.  Disclaimer: Everything written in this knowledge base is based on our research of selected well known map viewers. We do not attempt to recommend one as the best, but give you all the information we believe you need in order to make a better decision based on your use case. Some of the viewers may be incompatible with some of our data or services and will require additional adjustments in order to consume them (for some it may not be possible at all).  So lets get started!  ","version":"Next","tagName":"h2"},{"title":"Most commonly used map viewers​","type":1,"pageTitle":"Map viewers","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-overview#most-commonly-used-map-viewers","content":" ","version":"Next","tagName":"h2"},{"title":"Cesium 🆓​","type":1,"pageTitle":"Map viewers","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-overview#cesium-","content":" A complete platform for 3D geospatial data – handling everything from optimization to visualization to analytics. CesiumJS is an open source JavaScript library for world-class 3D mapping.  Read more here and try out the playground.  ","version":"Next","tagName":"h3"},{"title":"Leaflet 🆓​","type":1,"pageTitle":"Map viewers","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-overview#leaflet-","content":" Designed with simplicity, performance and usability in mind. It works efficiently across all major desktop and mobile platforms, can be extended with lots of plugins, has a beautiful, easy to use and well-documented API and a simple, readable source code that is a joy to contribute to.  Leaflet is the leading open-source JavaScript library for mobile-friendly interactive maps. Weighing just about 42 KB of JS, it has all the mapping features most developers ever need.  Read more here, see some examples and try out the playground.  ","version":"Next","tagName":"h3"},{"title":"OpenLayers 🆓​","type":1,"pageTitle":"Map viewers","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-overview#openlayers-","content":" An open-source JavaScript library for displaying map data in web browsers as slippy maps. It provides an API for building rich web-based geographic applications similar to Google Maps and Bing Maps.  Read more here, see some examples and try out the playground.  ","version":"Next","tagName":"h3"},{"title":"ArcGIS JS SDK 💰​","type":1,"pageTitle":"Map viewers","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-overview#arcgis-js-sdk-","content":" ArcGIS is a family of client, server and online geographic information system (GIS) software developed and maintained by Esri.  Use ArcGIS Maps SDK for JavaScript to build compelling web apps that unlock your data’s potential with interactive user experiences and stunning 2D and 3D visualizations.  Read more here, see some examples and try out the playground.  ","version":"Next","tagName":"h3"},{"title":"iTowns 🆓​","type":1,"pageTitle":"Map viewers","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-overview#itowns-","content":" ITowns is a javascript framework for 3D geographic data visualisation. It can display a wide range of data such as ortho-images, Digital Elevation Models (DEM) or 3D models.  ITowns is based on Three.js, which is a javascript library that implements WebGL to render sophisticated 3D Geometry on a webpage.  Read more here and see some examples.  ","version":"Next","tagName":"h3"},{"title":"Mapbox GL JS 🆓 + 💰​","type":1,"pageTitle":"Map viewers","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-overview#mapbox-gl-js---","content":" A client-side JavaScript library for building web maps and web applications with Mapbox's modern mapping technology. You can use Mapbox GL JS to display Mapbox maps in a web browser or client, add user interactivity, and customize the map experience in your application.  Read more here, see some examples and try out the playground.  ","version":"Next","tagName":"h3"},{"title":"deck.gl 🆓​","type":1,"pageTitle":"Map viewers","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-overview#deckgl-","content":" A GPU-powered framework for visual exploratory data analysis of large datasets.  deck.gl APIs are designed to reflect the reactive programming paradigm. Whether using Vanilla JS or the React interface, it can handle efficient WebGL2/WebGPU rendering under heavy data load.  While deck.gl works standalone without a base map, it plays nicely with your favorite base map libraries such as Google Maps, Mapbox, ArcGIS, MapLibre, and more. Where the base map library permits, deck.gl may interleave with 3D map layers to create seamless visualizations.  Read more here and see some examples.  ","version":"Next","tagName":"h3"},{"title":"Maplibre-gl-js 🆓​","type":1,"pageTitle":"Map viewers","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-overview#maplibre-gl-js-","content":" A TypeScript library that uses WebGL to render interactive maps from vector tiles in a browser. The customization of the map comply with the MapLibre Style Spec. It is part of the MapLibre ecosystem, with a counterpart for Android, iOS and other platforms called MapLibre Native.  Read more here and see some examples. ","version":"Next","tagName":"h3"},{"title":"3D","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/3d-overview","content":"","keywords":"","version":"Next"},{"title":"Terms​","type":1,"pageTitle":"3D","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/3d-overview#terms","content":" OSGB​  OSGB is a file format that is native to OpenSceneGraph, which is an open-source 3D graphics Application Programming Interface (API). OpenSceneGraph is used by developers for a wide range of applications including visual simulation, virtual reality, and computer games. OSGB stands for OpenSceneGraph Binary file. The file stores the binary representation of a 3D vector model with all its textures contained within a single standalone file.  3D Tile​  3D Tiles is designed for streaming and rendering massive 3D geospatial content such as Photogrammetry, 3D Buildings, Point Clouds, etc. It defines a hierarchical data structure and a set of tile formats which deliver renderable content. 3D Tiles does not define explicit rules for visualization of the content; a client may visualize 3D Tiles data however it sees fit.  .b3dm (file extension)​  b3dm (&quot;Batched 3D Model&quot;) file is part of the 3D Tiles specification and uses glTF as its payload to deliver 3d geometry. ","version":"Next","tagName":"h3"},{"title":"Map viewers comparison","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-comparison","content":"","keywords":"","version":"Next"},{"title":"Projections and Coordinate Systems​","type":1,"pageTitle":"Map viewers comparison","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-comparison#projections-and-coordinate-systems","content":" danger The only supported Coordinate System in our project is WGS84 (EPSG:4326) with a tiling scheme of 2x1.  info If you don't know what a Coordinate System or projection is, you can find the defenition here, or on wikipedia 🌐.  Viewer\tEPGS:4326\tEPSG:3857\tSupported projections\tCan reproject\tNotesCesium\t✅\t✅\tProjections\t✅ Leaflet\t✅\t✅\tProjections\t❌ OpenLayers\t✅\t✅\tProjections\t✅\tSupports all EPSG ArcGIS JS SDK\t✅\t✅\tProjections\t✅\tSupports all EPSG iTowns\t✅\t❌\tProjections Mapbox v1\t❌\t✅\tProjections Mapbox v2\t➖ Not tested yet\t✅\tProjections\t❌ deck.gl\t❌\t✅\tProjections Maplibre-gl-js\t❌\t✅   ","version":"Next","tagName":"h2"},{"title":"Raster​","type":1,"pageTitle":"Map viewers comparison","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-comparison#raster","content":" ","version":"Next","tagName":"h2"},{"title":"Supported data types and protocols​","type":1,"pageTitle":"Map viewers comparison","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-comparison#supported-data-types-and-protocols","content":" Viewer\tWMS\tCan read WMS capabilities\tWMTS\tCan read WMTS capabilities\tTile Layer\tGeoTiff\tCOGCesium\t✅\t❌\t✅\t❌\t✅ Leaflet\t✅\t❌\t✅\t➖ Possible with package or TileLayer Hack\t✅ OpenLayers\t✅\t✅\t✅\t✅\t✅\t✅\t✅ ArcGIS JS SDK\t✅ ✅\t✅\t✅ iTowns\t✅ ✅\t❌\t✅ Mapbox v1\t✅ Mapbox v2\t✅ deck.gl\t✅ ➖ With package or TileLayer Hack Maplibre-gl-js\t✅ ➖ Through templating   ","version":"Next","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Map viewers comparison","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-comparison#features","content":" Viewer\tBounds\tImage Bands\tAlpha\tGPU\tFeaturesCesium\t✅\t❌\t✅\t✅ Leaflet\t❌\t❌\t✅\t✅ OpenLayers\t✅\t✅ ✅\tPreload tiles ArcGIS JS SDK\t✅\t❌\t✅\t✅ iTowns ❌ ✅\tImmersive view (Street view) Mapbox v1 ✅ Mapbox v2 ✅ deck.gl ✅ Maplibre-gl-js\t✅\t❌\t✅\t✅\t  info Image bands means that the map viewer let's us control the RGB scales of the displayed layers.  ","version":"Next","tagName":"h3"},{"title":"3D​","type":1,"pageTitle":"Map viewers comparison","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-comparison#3d","content":" Viewer\t3D Tiles\tI3S\tPoint cloud\tFeaturesCesium\t✅\t✅\t✅\t- Control sun and atmosphere - Custom lightings Leaflet\t❌\t❌\t❌ OpenLayers\t❌\t❌\t❌ ArcGIS JS SDK\t❌\t✅\t✅\tCustom lightings iTowns\t✅\t❌\t✅\tSun simulation Mapbox v1\t❌\t❌\t❌ Mapbox v2\t❌\t❌\t❌ deck.gl\t✅\t✅\t✅\tCustom lightings Maplibre-gl-js   ","version":"Next","tagName":"h2"},{"title":"DEM​","type":1,"pageTitle":"Map viewers comparison","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-comparison#dem","content":" Viewer\tQMesh\tRaster DEM\tSkyline terrainCesium\t✅\t❌\t✅ (With plugin) Leaflet\t❌\t❌ OpenLayers\t❌\t❌ ArcGIS JS SDK\t❌\t➖ (ESRI format) iTowns\t❌\t✅ Mapbox v1\t❌ Mapbox v2\t❌\t✅ deck.gl\t❌\t✅ Maplibre-gl-js ✅\t  ","version":"Next","tagName":"h2"},{"title":"Vector​","type":1,"pageTitle":"Map viewers comparison","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-comparison#vector","content":" ","version":"Next","tagName":"h2"},{"title":"Supported data types and protocols​","type":1,"pageTitle":"Map viewers comparison","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-comparison#supported-data-types-and-protocols-1","content":" Viewer\tWFS\tGeoJSON\tFeatures\tDrawingCesium\t❌ No native support but feasible\t✅\t✅\t✅ Leaflet\t❌ No native support but feasible\t✅\t✅ 2D ❌ 3D\t✅ OpenLayers\t✅\t✅\t✅ 2D ❌ 3D ✅ OpenLayers symbology ✅ Mapbox symbology adapter\t✅ With complex symbology ArcGIS JS SDK\t✅\t✅ iTowns\t✅\t✅\t✅ 2D ✅ 2.5D ❌ 3\t✅ Simple symbolog Mapbox v1 ✅\t✅ 2D ✅ 2.5D ❌ 3\t✅ With complex symbolog Mapbox v2 ✅\t✅ 2D ✅ 2.5D ❌ 3\t✅ With complex symbolog deck.gl\t❌\t✅ Maplibre-gl-js   ","version":"Next","tagName":"h3"},{"title":"Vector Tiles​","type":1,"pageTitle":"Map viewers comparison","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/MapViewers/map-viewers-comparison#vector-tiles","content":" Viewer\tQuery\tSymbology\tOGC Vector TilesCesium\t❌\t❌\t❌ Leaflet\t➖ With plugins ❌ OpenLayers\t✅\t❌\t✅ ArcGIS JS SDK\t✅\t✅\t❌ iTowns\t✅\t❌\t❌ Mapbox v1\t✅\t✅ But for v1\t❌ Mapbox v2\t✅\t✅\t❌ deck.gl\t✅\t❌\t❌ Maplibre-gl-js ✅\t  info OGC added vector tiles support in their OGC Tiles API 🌐 (still in it's early stages). Read more about clients supporting Tiles API 🌐. ","version":"Next","tagName":"h3"},{"title":"Available Terms & Abbreviations","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/terms","content":"","keywords":"","version":"Next"},{"title":"Geodesy​","type":1,"pageTitle":"Available Terms & Abbreviations","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/terms#geodesy","content":" Term\tDescriptionGeodesy\tThe Earth science of accurately measuring and understanding Earth's geometric shape, orientation in space and gravitational field. The field also incorporates studies of how these properties change over time and equivalent measurements for other planets (known as planetary geodesy). Sphere\tA geometrical object in three-dimensional space that is the surface of a ball. Defined mathematically as the set of points that are all at the same distance r from a given point in a three-dimensional space. Ellipsoid\tA surface that may be obtained from a sphere by deforming it by means of directional scalings, or more generally, of an affine transformation. In geodesy, a reference ellipsoid is a mathematically defined surface that approximates the geoid, which is the truer, imperfect figure of the Earth, or other planetary body, as opposed to a perfect, smooth, and unaltered sphere. Spheroid\tA quadric surface obtained by rotating an ellipse about one of its principal axes; in other words, an ellipsoid with two equal semi-diameters. A spheroid has circular symmetry. Geodesy represents the figure of the Earth as an oblate spheroid, which is an ellipsoid of revolution obtained by rotating an ellipse about its shorter axis. It is the regular geometric shape that most nearly approximates the shape of the Earth. Geoid\tMathematical figure of the Earth, a smooth but irregular surface whose shape results from the uneven distribution of mass within and on the surface of Earth. It is the shape that the ocean surface would take under the influence of the gravity and rotation of Earth alone, if other influences such as winds and tides were absent. WGS\tThe World Geodetic System is a standard for use in cartography, geodesy and satellite navigation including GPS. This standard includes the definition of the coordinate system's fundamental and derived constants, the ellipsoidal (normal) Earth Gravitational Model (EGM), a description of the associated World Magnetic Model (WMM), and a current list of local datum transformations. The latest revision is WGS 84 (also known as WGS 1984, EPSG:4326), established and maintained by the United States National Geospatial-Intelligence Agency since 1984, and last revised in 2014. GCS\tA Geographic Coordinate System is a coordinate system associated with positions on Earth (geographic position). These systems use the 3D model of the earth (ellipsoid) to define specific locations on the surface to create a grid. When we refer to locations using “longitude” (East/West measurement) and “latitude” (North/South measurement), we are using geographic coordinates. Latitude\tThe &quot;latitude&quot; (lat) of a point on Earth's surface is the angle between the equatorial plane and the straight line that passes through that point and through (or close to) the center of the Earth (Y axis). Longitude\tThe &quot;latitude&quot; (lat) of a point on Earth's surface is the angle between the equatorial plane and the straight line that passes through that point and through (or close to) the center of the Earth (Y axis). Geodetic Datum\tA coordinate system which is based on a specific ellipsoid and a set of reference points, used for locating places on the Earth. An approximate definition of sea level is the datum WGS 84, an ellipsoid, whereas a more accurate definition is Earth Gravitational Model 2008 (EGM2008), using at least 2,159 spherical harmonics. Other datums are defined for other areas or at other times. EPSG\tEPSG Geodetic Parameter Dataset is a public registry of geodetic datums, spatial reference systems, Earth ellipsoids, coordinate transformations and related units of measurement. Each entity is assigned an EPSG code between 1024-32767, along with a standard machine-readable well-known text (WKT) representation. The dataset is actively maintained by the IOGP Geomatics Committee.  ","version":"Next","tagName":"h2"},{"title":"Mapping​","type":1,"pageTitle":"Available Terms & Abbreviations","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/terms#mapping","content":" Term\tDescriptionCartography\tThe study and practice of making maps. Combining science, aesthetics, and technique, cartography builds on the premise that reality (or an imagined reality) can be modeled in ways that communicate spatial information effectively. Map projection\tA way to flatten a globe's surface (ellipsoid) into a plane in order to make a map. This requires a systematic transformation of the latitudes and longitudes of locations from the surface of the globe into locations on a plane. SRS/CRS\tA Spatial/Coordinate Reference System is a coordinate-based local, regional or global system used to locate geographical entities. A spatial reference system defines a specific map projection, as well as transformations between different spatial reference systems. Projected Coordinate System\tA projected coordinate system is a grid used as a reference for locations on the planet, but it’s a translation of the 3D grid onto a 2D plane (like a paper map or a computer screen). Mercator projection\tA cylindrical map projection presented by Flemish geographer and cartographer Gerardus Mercator in 1569. It became the standard map projection for navigation because it is unique in representing north as up and south as down everywhere while preserving local directions and shapes. Web Mercator projection\t(Google) Web Mercator / Spherical Mercator / Pseudo-Mercator, is a variant of the Mercator projection and is the de facto standard for Web mapping applications. It takes the WGS84 coordinate system and projects it onto a square. Web Mercator rose to prominence when Google Maps adopted it in 2005. It is used by virtually all major online map providers, including Google Maps, Mapbox, Bing Maps, OSM, Mapquest, ESRI, and many others. Its official EPSG identifier is EPSG:3857. UTM\tThe Universal Transverse Mercator is a map projection system for assigning coordinates to locations on the surface of the Earth. Like the traditional method of latitude and longitude, it is a horizontal position representation, which means it ignores altitude and treats the earth as a perfect ellipsoid. However, it differs from global lat/long in that it divides earth into 60 zones and projects each to the plane as a basis for its coordinates. Specifying a location means specifying the zone and the x, y coordinate in that plane. Photogrammetry\tThe science and technology of obtaining reliable information about physical objects and the environment through the process of recording, measuring and interpreting photographic images and patterns of electromagnetic radiant imagery and other phenomena. Orthophoto\tAn aerial photograph or satellite imagery geometrically corrected (&quot;orthorectified&quot;) such that the scale is uniform: the photo or image follows a given map projection. Unlike an uncorrected aerial photograph, an orthophoto can be used to measure true distances, because it is an accurate representation of the Earth's surface, having been adjusted for topographic relief, lens distortion, and camera tilt. True Orthophoto\tAn orthophoto with a vertical view of the earth’s surface, eliminating building tilting and allowing a view of nearly any point on the ground. Discrete Layer\tA discrete layer represents a geographical region and is composed of multiple orthophoto mosaics (orthomosaics) with the same resolution, color scheme, and classification. CE90, LE90, SE90\tImagery accuracy measurements: CE90 is the Circular Error at the 90th percentile. This means that a minimum of 90% of the points measured has a horizontal error less than the stated CE90 value. LE90 is the 90th percentile Linear Error, meaning that a minimum of 90% of vertical errors fall within the stated LE90 value. SE90 is the 90th percentile Spherical Error, meaning that a minimum of 90% of spatial errors fall within the stated SE90 value, which is a measure that combines the traditional LE90 and CE90 measures.  ","version":"Next","tagName":"h2"},{"title":"GIS​","type":1,"pageTitle":"Available Terms & Abbreviations","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/terms#gis","content":" Term\tDescriptionGIS\tA Geographic Information System is a conceptualized framework that provides the ability to capture and analyze spatial and geographic data. GIS applications (or GIS apps) are computer-based tools that allow the user to create interactive queries (user-created searches), store and edit spatial and non-spatial data, analyze spatial information output, and visually share the results of these operations by presenting them as maps. Raster data\tRepresentation of a map, which made up as a matrix of pixels (bitmap), where each cell represent an area on the map with its color (aka imagery). Vector data\tRepresentation of entities in a map as basic geometries (made up of one or more interconnected vertices): points, lines, polygons, etc. SDI\tA Spatial Data Infrastructure implements a framework of geographic data, metadata, users and tools that are interactively connected in order to use spatial data in an efficient and flexible way. Spatial database\tA database that is optimized for storing and querying data that represents objects defined in a geometric space. Most spatial databases allow the representation of simple geometric objects such as points, lines and polygons. Geospatial index\tA spatial database index which allows to search records based on their geographic location in an efficient manner. Quadtree index\tA spatial indexing technique where each node represents a bounding box covering some part of the space being indexed, with the root node covering the entire area and each internal node has exactly four children. R-Tree\tA tree data structure used for spatial access methods, i.e., for indexing multi-dimensional information such as geographical coordinates, rectangles or polygons. DEM\tA Digital Elevation Model is a 3D computer graphics representation of elevation data to represent the surface of a planet (e.g. Earth), moon, or asteroid, above a certain datum. A &quot;global DEM&quot; refers to a discrete global grid. DTM\tThe Digital Terrain Model represents the elevation of the bare earth without considering any over-ground features like plants and buildings. DSM\tThe Digital Surface Model represents the elevation of the earth's surface that a remote sensing system will first meet (“blanket”). Thus, the resulting DSM includes the elevation of the bare earth terrain plus the natural (e.g., trees, shrubs) and man-made features (e.g., buildings, bridges). TIN\tA Triangulated Irregular Network is a representation of a continuous surface consisting entirely of triangular facets, used mainly as Discrete Global Grid in primary elevation modeling. SRTM\tThe Shuttle Radar Topography Mission is an international research effort that obtained digital elevation models on a near-global scale from 56°S to 60°N (approximately 80% of the Earth's surface), to generate the most complete high-resolution digital topographic database of Earth, prior to the release of the ASTER GDEM in 2009. ASTER GDEM\tThe Global Digital Elevation Model is a joint operation between NASA and Japan's Ministry of Economy, Trade and Industry (METI), the Global DEM is the most complete mapping of the earth ever made, covering 99% of its surface. The GDEM covers the planet from 83 degrees North to 83 degrees South, becoming the first earth mapping system that provide comprehensive coverage of the polar regions. Tiled web map\tA tiled web map, slippy map (OSM) or tile map (raster or vector) is a map displayed in a browser by seamlessly joining dozens of individually requested image or vector data files over the Internet. It is the most popular way to display and navigate maps, replacing other methods such as WMS which typically display a single large image, with arrow buttons to navigate to nearby areas. LOD\tLevel of Detail refers to the complexity of a 3D model representation. LOD can be decreased as the model moves away from the viewer or according to other metrics such as object importance, viewpoint-relative speed or position. Geoportal\tA type of web portal used to find and access geographic information (geospatial information) and associated geographic services (display, editing, analysis, etc.) via the Internet. Geoportals are important for effective use of GIS and a key element of SDI.  ","version":"Next","tagName":"h2"},{"title":"Organizations And Companies​","type":1,"pageTitle":"Available Terms & Abbreviations","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/terms#organizations-and-companies","content":" Term\tDescriptionOGC\tThe Open Geospatial Consortium is an international voluntary consensus standards organization, originated in 1994. In the OGC, more than 500 commercial, governmental, nonprofit and research organizations worldwide collaborate in a consensus process encouraging development and implementation of open standards for geospatial content and services, sensor web and IoT, GIS data processing and data sharing. OSGeo\tThe Open Source Geospatial Foundation is a not-for-profit organization whose mission is to support and promote the collaborative development of open source geospatial software, data and education. The foundation provides financial, organizational and legal support to the broader open source geospatial community. ESRI\tEnvironmental Systems Research Institute is an international supplier of GIS software, web GIS and geodatabase management applications. MapBox\tAn American company which provides custom online maps for websites and applications. Mapbox is also the creator of, or a significant contributor to, some open source mapping libraries and applications, including the Mapbox GL-JS JavaScript library, the MBTiles specification, the TileMill cartography IDE, the Leaflet JavaScript library, and the CartoCSS map styling language and parser.  ","version":"Next","tagName":"h2"},{"title":"Standards​","type":1,"pageTitle":"Available Terms & Abbreviations","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/terms#standards","content":" Term\tDescriptionDTED\tDigital Terrain Elevation Data is a standard of digital datasets which consists of a matrix of terrain elevation values, i.e., a DEM. Terrain elevations are described as the height above the Earth Gravitational Model 1996 (EGM96) geoid, not the WGS84 reference ellipsoid. The DTED format for level 0, 1 and 2 is described in U.S. Military Specification Digital Terrain Elevation Data (DTED). GPKG\tOGC GeoPackage is an open, non-proprietary, platform-independent and standards-based data format for geographic information system implemented as a SQLite database container. With the backing of the US military, GeoPackage has seen wide widespread support from various government, commercial, and open source organizations. glTF\tGraphics Language Transmission Format is a standard, JSON-based file format for 3D scenes and models. An open standard developed and maintained by the Khronos Group, it supports 3D model geometry, appearance, scene graph hierarchy and animation. 3D Tiles\tOGC 3D Tiles is an open specification for sharing, visualizing, fusing, and interacting with massive heterogenous 3D geospatial content across desktop, web, and mobile applications. It is designed for streaming and rendering massive 3D geospatial content such as Photogrammetry, 3D Buildings, BIM/CAD, Instanced Features, and Point Clouds. It defines a hierarchical data structure and a set of tile formats which deliver renderable content. CDB\tOGC Common DB standard defines a standardized model and structure for a single, “versionable”, virtual representation of the earth. A CDB structured data store provides for a geospatial content and model definition repository that is plug-and-play interoperable between database authoring workstations. GML\tOGC Geography Markup Language is an XML grammar for expressing geographical features. GML serves as a modeling language for geographic systems as well as an open interchange format for geographic transactions on the Internet. CityGML\tAn open standardised data model and exchange format to store digital 3D models of cities and landscapes. It defines ways to describe most of the common 3D features and objects found in cities (such as buildings, roads, rivers, bridges, vegetation and city furniture) and the relationships between them. It also defines different standard levels of detail (LoDs) for the 3D objects, which allows the representation of objects for different applications and purposes, such as simulations, urban data mining, facility management, and thematic inquiries. GeoJSON\tAn open standard, JSON-based format designed for representing simple geographical features, along with their non-spatial attributes. SLD\tOGC Styled Layer Descriptor is an XML schema specified by for describing the appearance of map layers. It is capable of describing the rendering of vector and raster data. KML\tKeyhole Markup Language is an XML notation for expressing geographic annotation and visualization within 2D maps and 3D Earth browsers. KML was developed for use with Google Earth, which was originally named Keyhole Earth Viewer. KML became an international standard of OGC in 2008. I3S\tA single Indexed 3D Scene Layers data set, referred to as a Scene Layer, is a container for arbitrarily large amounts of heterogeneously distributed 3D geographic data (defined by OGC). Scene Layers are designed to be used in mobile, desktop, and server-based workflows and can be accessed over the web or as local files. GeoTIFF\tA public domain metadata standard which allows georeferencing information to be embedded within a TIFF file. The potential additional information includes map projection, coordinate systems, ellipsoids, datums, and everything else necessary to establish the exact spatial reference for the file. COG\tCloud Optimized GeoTIFF is a regular GeoTIFF file, aimed at being hosted on a HTTP file server, with an internal organization that enables more efficient workflows on the cloud. WPS\tOGC Web Processing Service Interface Standard provides rules for standardizing inputs and outputs (requests and responses) for invoking geospatial processing services, such as polygon overlay, as a web service. The WPS standard defines how a client can request the execution of a process, and how the output from the process is handled. OGC API\tThe OGC API family of standards are being developed to make it easy for anyone to provide geospatial data to the web. These standards build upon the legacy of the OGC Web Service standards (WMS, WFS, WCS, WPS, etc.), but define resource-centric APIs (REST) that take advantage of modern web development practices.  ","version":"Next","tagName":"h2"},{"title":"Protocols​","type":1,"pageTitle":"Available Terms & Abbreviations","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/terms#protocols","content":" Term\tDescriptionWMS\tOGC Web Map Service is a standard protocol for serving geo-referenced map images over the Internet. These images are typically produced by a map server from data provided by a GIS database. WMTS\tOGC Web Map Tile Service is a standard protocol for serving pre-rendered or run-time computed geo-referenced map tiles over the Internet. TMS\tTile Map Service or is an older specification for tiled web maps, developed by OSGeo. WFS\tOGC Web Feature Service Interface Standard provides an interface allowing requests for geographical features across the web using platform-independent calls. WCS\tOGC Web Coverage Service Interface Standard defines Web-based retrieval of coverages – that is, digital geospatial information representing space/time-varying phenomena. CSW\tOGC catalog Services for the Web, a standard for exposing a catalog of geospatial records in XML on the Internet (over HTTP). XYZ\tThe de-facto OpenStreetMap standard, known as Slippy Map Tilenames or ZXY, where Z is the zoom level, and X and Y identify the tile.  ","version":"Next","tagName":"h2"},{"title":"Technologies​","type":1,"pageTitle":"Available Terms & Abbreviations","url":"/developer-portal/pr-preview/pr-158/docs/KnowledgeBase/terms#technologies","content":" Term\tDescriptionGPS\tThe Global Positioning System is a satellite-based radio navigation system owned by the United States government and operated by the United States Space Force. It is one of the global navigation satellite systems (GNSS) that provides geolocation and time information to a GPS receiver anywhere on or near the Earth where there is an unobstructed line of sight to four or more GPS satellites. OSM\tOpenStreetMap is a collaborative project to create a free editable map of the world. The geodata underlying the map is considered the primary output of the project. The creation and growth of OSM has been motivated by restrictions on use or availability of map data across much of the world, and the advent of inexpensive portable satellite navigation devices. GEE\tGoogle Earth Enterprise is a geospatial application which provides the ability to build and host custom 3D globes and 2D maps. OpenLayers\tAn open-source JavaScript library for displaying map data in web browsers as slippy maps. It provides an API for building rich web-based geographic applications similar to Google Maps and Bing Maps. OSG\tOpenSceneGraph is an open-source 3D graphics API used by application developers in fields such as visual simulation, computer games, virtual reality, scientific visualization and modeling. GDAL\tThe Geospatial Data Abstraction Library is a computer software library from the Open Source Geospatial Foundation, for reading and writing raster and vector geospatial data formats. As a library, it presents a single abstract data model to the calling application for all supported formats. GeoServer\tAn open-source server that allows users to share, process and edit geospatial data. Designed for interoperability, it publishes data from any major spatial data source using open standards. MapProxy\tAn open-source proxy for geospatial data. It caches, accelerates and transforms data from existing map services and serves any desktop or web GIS client. Cesium\tA complete platform for 3D geospatial data – handling everything from optimization to visualization to analytics. CesiumJS is an open source JavaScript library for world-class 3D mapping. GDB\tArcGIS geodatabase is a collection of geographic datasets of various types held in a common file system folder, a Microsoft Access database, or a multiuser RDBMS (e.g. Oracle, Postgres, etc.) BIL, BIP, BSQ\tBand interleaved by line, Band interleaved by pixel and Band Sequential are three common methods of organizing image data for multiband images. BIL, BIP, and BSQ are not in themselves image formats but are schemes for storing the actual pixel values of an image in a file. These files support the display of single and multiband images and handle black-and-white, grayscale, pseudo color, true color, and multispectral image data. Leaflet\tAn open source JavaScript library used to build web mapping applications. First released in 2011, it supports most mobile and desktop platforms, supporting HTML5 and CSS3. ","version":"Next","tagName":"h2"},{"title":"Enable Hardware Accelaration","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/HardwareAcceleration","content":"","keywords":"","version":"Next"},{"title":"What Is Hardware Acceleration?​","type":1,"pageTitle":"Enable Hardware Accelaration","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/HardwareAcceleration#what-is-hardware-acceleration","content":" If you enable hardware acceleration, or often times it’s enabled by default, the apps are allowed to use more of your device’s hardware to improve the overall performance of it. In the past, your computer’s processor was enough to handle most of the essential tasks of apps, especially web browsers. But as technology progresses, the requirements of minor web apps become bigger than before.  Some apps can’t work at their full potential if they only use your processor’s capacity. Take web browsers for example. Web sites are becoming more polished and demanding, so your browser may need to ‘borrow’ some power from your graphics and sound card to be more efficient. Google Chrome is one of those browsers.  The need for increased security when browsing the internet and greater video, sound, and streaming performance capabilities has caused many companies to build additional features into their web browsers. These features include running the browser and its tabs in containers, limiting and monitoring the actions a web page is trying to make, and more. As you can guess, this means increased demand for system resources such as the GPU for greater video quality.  ","version":"Next","tagName":"h2"},{"title":"How to Check Hardware Acceleration in Chrome​","type":1,"pageTitle":"Enable Hardware Accelaration","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/HardwareAcceleration#how-to-check-hardware-acceleration-in-chrome","content":" Before you turn hardware acceleration on or off, you should check its status. To do this, you need to:  Open Google Chrome, type “chrome://gpu” in the address bar on the top, and then press Enter.    After you execute the command, Chrome should display a list of various data about the software. For hardware acceleration, you should only pay attention to the Graphics Feature Status section. Next to each parameter, you should see either Hardware accelerated, Software only. Hardware acceleration disabled, Disabled, or Unavailable.If most of these items have a Hardware accelerated value displayed in green, it means that the feature is enabled. On the other hand, if Canvas, Flash, Compositing, WebGL, and others are disabled, you’ll need to turn hardware acceleration on.    ","version":"Next","tagName":"h2"},{"title":"Turning On Hardware Acceleration in Chrome​","type":1,"pageTitle":"Enable Hardware Accelaration","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/HardwareAcceleration#turning-on-hardware-acceleration-in-chrome","content":" You can turn on hardware acceleration by following a few simple steps:  Click the More button (three vertical dots) on the top-right of your Chrome window and select Settings from the drop-down menu.    Now, click the Advanced menu on the left-side and then click on System.    Then, toggle on Use hardware acceleration when available under the System section.    If Chrome notifies you that it needs to be restarted, just close all the tabs and relaunch it. Now, to check that it’s working, type “chrome://gpu” in the address bar again and hit Enter. Check if most of the items under the ‘Graphics Feature Status’ have the Hardware accelerated value.  To turn off hardware acceleration, just follow steps 1-3 and toggle the Use hardware acceleration when available option off.  Note that if the Use hardware acceleration when available option was already on when you entered the Settings and the values were disabled regardless, you will need to use another method.  danger If it doesn't work, make sure all of your graphics drivers are up to date. And repeat the steps. ","version":"Next","tagName":"h2"},{"title":"Terrain Height Extraction","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/mesh-height-extraction","content":"","keywords":"","version":"Next"},{"title":"Terrain Height Extraction​","type":1,"pageTitle":"Terrain Height Extraction","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/mesh-height-extraction#terrain-height-extraction","content":" The following section will help you understand how to extract terrain height value at a given position from a terrain provider using an example.  info In order to set a terrain provider, see here.  ","version":"Next","tagName":"h2"},{"title":"Cesium​","type":1,"pageTitle":"Terrain Height Extraction","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/mesh-height-extraction#cesium","content":" info The minimum required version for cesium is v84.  // Query the terrain height of two Cartographic positions const positions = [ Cesium.Cartographic.fromDegrees(86.925145, 27.988257), Cesium.Cartographic.fromDegrees(87.0, 28.0) ]; void Cesium.sampleTerrainMostDetailed( viewer.terrainProvider, positions ).then((updatedPositions) =&gt; { // positions[0].height and positions[1].height have been updated. // updatedPositions is just a reference to positions. console.log(updatedPositions); ... });  ","version":"Next","tagName":"h3"},{"title":"Terrain Min-Max Height Extraction","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/mesh-min-max-height-extraction","content":"","keywords":"","version":"Next"},{"title":"Terrain Min-Max Height Extraction​","type":1,"pageTitle":"Terrain Min-Max Height Extraction","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/mesh-min-max-height-extraction#terrain-min-max-height-extraction","content":" The following example shows how to extract min/max terrain height value from a terrain provider at a selected area, area is defined by a bounding polygon.  info In order to set a terrain provider, see here.  ","version":"Next","tagName":"h2"},{"title":"Cesium​","type":1,"pageTitle":"Terrain Min-Max Height Extraction","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/mesh-min-max-height-extraction#cesium","content":" info The minimum required version for cesium is v84.  const polygon = turf.polygon([ [ [-72.37353086471558, 42.32481709325035], [-72.3738956451416, 42.324594989789134], [-72.3735523223877, 42.324436343979656], [-72.37387418746948, 42.32430942704402], [-72.37363815307616, 42.32405559240466], [-72.37391710281372, 42.32388108049599], [-72.37363815307616, 42.32367483852534], [-72.37352013587952, 42.32375416244021], [-72.37370252609253, 42.32385728338004], [-72.37343430519104, 42.32408732179058], [-72.37361669540404, 42.32429356240905], [-72.37331628799438, 42.324428411678674], [-72.373605966568, 42.3246108543481], [-72.37338066101074, 42.32473777067564], [-72.37353086471558, 42.32481709325035] ] ]); // Takes a set of features, calculates the bbox of all input features // and returns a bounding box const bbox = turf.bbox(polygon); // bbox extent in minX, minY, maxX, maxY order const cellSide = 1.0; // distance between points (in units) const options = { units: 'meters', // used in calculating cellSide, can be: degrees, radians, miles, or kilometers (default) mask: polygon // if passed a Polygon or MultiPolygon, the grid Points will be created only inside it }; // Creates a Point grid from a bounding box, FeatureCollection or Feature. const pointGrid = turf.pointGrid(bbox, cellSide, options); // grid of points const pointGridCoordinates = pointGrid.features.map(f =&gt; f.geometry.coordinates); console.log(pointGridCoordinates); // 2,359 points inside the polygon pointGridCoordinates.forEach(p =&gt; { viewer.entities.add({ position: Cesium.Cartesian3.fromDegrees(p[0], p[1]), point: { color: Cesium.Color.fromRandom(), pixelSize: 5, heightReference: Cesium.HeightReference.RELATIVE_TO_GROUND } }); }); const positions = pointGridCoordinates.map(p =&gt; Cesium.Cartographic.fromDegrees(p[0], p[1])); void Cesium.sampleTerrainMostDetailed( viewer.terrainProvider, positions ).then((updatedPositions) =&gt; { // Calculate which coordinate has min/max height ... });   warning Above example is based on Pseudo code, you will have to adapt it in your own application to make it work.Please note: Time increases with the amount of sampling points. Number of requests does not change however due to sampling points density which happen to correspond with the same tiles. This example was tested against Cesium World Terrain over the internet. Need to consider amount of sampling points against the resolution of the source height product.  Distance between points(cellSide)\tNumber of Sampling Points\tNumber of Requests\tTime to Sample (seconds)30.0\t1\t1\t0.53 20.0\t7\t4\t0.56 15.0\t9\t2\t0.59 1.0\t2,359\t4\t0.98 0.5\t9,427\t4\t1.15 0.4\t14,748\t4\t1.35 0.3\t26,225\t4\t1.59 0.2\t58,891\t4\t2.88 ","version":"Next","tagName":"h3"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/3d-getting-started","content":"","keywords":"","version":"Next"},{"title":"Step by step guide​","type":1,"pageTitle":"Getting Started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/3d-getting-started#step-by-step-guide","content":" The following guide will help you understand, Step-by-step the best practices of how to work with the Map Colonies 3D Catalog and how to consume mapping products in a dynamic way (materials might be changed or added)  ","version":"Next","tagName":"h2"},{"title":"Flow diagram​","type":1,"pageTitle":"Getting Started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/3d-getting-started#flow-diagram","content":"   ","version":"Next","tagName":"h2"},{"title":"Query CSW catalog (Step 1)​","type":1,"pageTitle":"Getting Started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/3d-getting-started#query-csw-catalog-step-1","content":" Query 3D CSW catalog service to find item(s) according to desired filter example are here  Filter should be based on 3D profile  warning Pay attention to set the following parameter 'outputSchema=&quot;http://schema.mapcolonies.com/3d&quot;' in order to get full catalog data  There are a few ways to acquire the desired record layer, for example:  Specific LayerFetch All Layers (Pagination) To fetch a specific layer you need to aquire the following property value: productTypeThe &quot;type&quot; of the desired record layer (&quot;3DPhotoRealistic&quot;,&quot;TERRAIN_QMESH&quot;, etc.)productIdThe unique identifier of the desired record layer To get unique product when you already have the productType and productId you can use the following query (both can be coppied from our catalog app, for example for a specific 3D Photo Realistic use the following) GetRecords Request POST Request url: '&lt;3D_CATALOG_SERVICE_URL&gt;/csw' body (XML): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecords outputFormat=&quot;application/xml&quot; outputSchema=&quot;http://schema.mapcolonies.com/3d&quot; resultType=&quot;results&quot; service=&quot;CSW&quot; version=&quot;2.0.2&quot; startPosition=&quot;1&quot; maxRecords=&quot;10&quot; xmlns:mc=&quot;http://schema.mapcolonies.com/3d&quot; xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;csw:Query typeNames=&quot;csw:Record&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;csw:Constraint version=&quot;1.1.0&quot;&gt; &lt;Filter xmlns=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;And&gt; &lt;PropertyIsEqualTo&gt; &lt;!-- ****** PROFILE FIELD NAME START ********************** --&gt; &lt;PropertyName&gt;mc:productType&lt;/PropertyName&gt; &lt;!-- ****** PROFILE FIELD NAME END ********************** --&gt; &lt;!-- ****** PROFILE FIELD VALUE START ********************** --&gt; &lt;Literal&gt;3DPhotoRealistic&lt;/Literal&gt; &lt;!-- ****** PROFILE FIELD VALUE END ********************** --&gt; &lt;/PropertyIsEqualTo&gt; &lt;PropertyIsEqualTo&gt; &lt;PropertyName&gt;mc:productId&lt;/PropertyName&gt; &lt;Literal&gt;0fa277cb-b8ba-4c31-b787-7700f916dcd4&lt;/Literal&gt; &lt;/PropertyIsEqualTo&gt; &lt;/And&gt; &lt;/Filter&gt; &lt;/csw:Constraint&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt;   You will get GetRecords XML Response with product metadata.  Response example Search Results Example &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecordsResponse xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:dct=&quot;http://purl.org/dc/terms/&quot; xmlns:gmd=&quot;http://www.isotc211.org/2005/gmd&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:mc=&quot;http://schema.mapcolonies.com/3d&quot; xmlns:ows=&quot;http://www.opengis.net/ows&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; version=&quot;2.0.2&quot; xsi:schemaLocation=&quot;http://www.opengis.net/cat/csw/2.0.2 http://schemas.opengis.net/csw/2.0.2/CSW-discovery.xsd&quot;&gt; &lt;csw:SearchStatus timestamp=&quot;2022-03-27T06:45:54Z&quot; /&gt; &lt;csw:SearchResults numberOfRecordsMatched=&quot;1&quot; numberOfRecordsReturned=&quot;1&quot; nextRecord=&quot;0&quot; recordSchema=&quot;http://schema.mapcolonies.com/3d&quot; elementSet=&quot;full&quot;&gt; &lt;mc:MC3DRecord&gt; &lt;mc:accuracyLE90&gt;4.0&lt;/mc:accuracyLE90&gt; &lt;mc:classification&gt;5&lt;/mc:classification&gt; &lt;mc:creationDateUTC&gt;2025-01-09T08:00:00Z&lt;/mc:creationDateUTC&gt; &lt;mc:footprint&gt;{&quot;type&quot;:&quot;Polygon&quot;,&quot;coordinates&quot;:[[[46.9831483,36.4864826],[46.9831483,37.0135162],[48.0168517,37.0135162],[48.0168517,36.4864826],[46.9831483,36.4864826]]]}&lt;/mc:footprint&gt; &lt;mc:maxHorizontalAccuracyCE90&gt;5.0&lt;/mc:maxHorizontalAccuracyCE90&gt; &lt;mc:id&gt;0fa277cb-b8ba-4c31-b787-7700f916dcd4&lt;/mc:id&gt; &lt;mc:insertDate&gt;2025-01-09T16:33:51Z&lt;/mc:insertDate&gt; &lt;mc:links scheme=&quot;3DTiles&quot; name=&quot;&quot; description=&quot;&quot;&gt;https://tiles.mapcolonies.net/api/3d/v1/b3dm/0fa277cb-b8ba-4c31-b787-7700f916dcd4/vricon_3d_surface_model_3dtiles_1.0_gltf_2/data/vricon_3dtiles/tileset.json&lt;/mc:links&gt; &lt;mc:producerName&gt;DAVID&lt;/mc:producerName&gt; &lt;mc:productBBox&gt;46.9831483,36.4864826,48.0168517,37.0135162&lt;/mc:productBBox&gt; &lt;mc:productId&gt;0fa277cb-b8ba-4c31-b787-7700f916dcd4&lt;/mc:productId&gt; &lt;mc:productName&gt;name&lt;/mc:productName&gt; &lt;mc:productSource&gt;\\\\Path\\To\\3D\\Models\\e047n36_N\\vricon_3d_surface_model_3dtiles_1.0_gltf_2\\data\\vricon_3dtiles&lt;/mc:productSource&gt; &lt;mc:productStatus&gt;PUBLISHED&lt;/mc:productStatus&gt; &lt;mc:productType&gt;3DPhotoRealistic&lt;/mc:productType&gt; &lt;mc:productVersion&gt;1&lt;/mc:productVersion&gt; &lt;mc:productionSystem&gt;system&lt;/mc:productionSystem&gt; &lt;mc:productionSystemVersion&gt;9&lt;/mc:productionSystemVersion&gt; &lt;mc:region&gt;region&lt;/mc:region&gt; &lt;mc:sensors&gt;sensor&lt;/mc:sensors&gt; &lt;mc:imagingTimeEndUTC&gt;2022-01-09T08:11:00Z&lt;/mc:imagingTimeEndUTC&gt; &lt;mc:imagingTimeBeginUTC&gt;2022-01-09T08:11:00Z&lt;/mc:imagingTimeBeginUTC&gt; &lt;mc:SRS&gt;4326&lt;/mc:SRS&gt; &lt;mc:SRSName&gt;WGS84GEO&lt;/mc:SRSName&gt; &lt;mc:type&gt;RECORD_3D&lt;/mc:type&gt; &lt;mc:updateDateUTC&gt;2025-01-09T16:34:46Z&lt;/mc:updateDateUTC&gt; &lt;ows:BoundingBox crs=&quot;urn:x-ogc:def:crs:EPSG:6.11:4326&quot; dimensions=&quot;2&quot;&gt; &lt;ows:LowerCorner&gt;36.4864826 46.9831483&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;37.0135162 48.0168517&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/mc:MC3DRecord&gt; &lt;/csw:SearchResults&gt; &lt;/csw:GetRecordsResponse&gt;   info Authentication must be integrated in order to communicate with 3D Tile and Catalog services. See the principles here  ","version":"Next","tagName":"h2"},{"title":"Get layer URI (Step 2)​","type":1,"pageTitle":"Getting Started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/3d-getting-started#get-layer-uri-step-2","content":" In the Response, look for  Extract link for desired 3D model &lt;mc:links scheme=&quot;3DTiles&quot; name=&quot;&quot;&gt; http://3d-model-server.com/path-to-tileset.json &lt;/mc:links&gt;   info You need to save &lt;mc:links&gt; element value as MODEL_URL, which is a layer consumption URL.  ","version":"Next","tagName":"h2"},{"title":"Get terrain provider URI (Step 2.1, optional)​","type":1,"pageTitle":"Getting Started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/3d-getting-started#get-terrain-provider-uri-step-21-optional","content":" This section explains how to query &quot;Best&quot; terrain for complementing the 3D models and giving a true 3D visualization. If you wish to get a specifc terrain please use DEM Getting Started Guide  To query the &quot;Best&quot; terrain, use the following:  GetRecords Request For Terrain POST Request url: '&lt;3D_CATALOG_SERVICE_URL&gt;/csw' body (XML): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecords outputFormat=&quot;application/xml&quot; outputSchema=&quot;http://schema.mapcolonies.com/3d&quot; resultType=&quot;results&quot; service=&quot;CSW&quot; version=&quot;2.0.2&quot; startPosition=&quot;1&quot; maxRecords=&quot;200&quot; xmlns:mc=&quot;http://schema.mapcolonies.com/3d&quot; xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;csw:Query typeNames=&quot;csw:Record&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;csw:Constraint version=&quot;1.1.0&quot;&gt; &lt;Filter xmlns=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;PropertyIsEqualTo&gt; &lt;!-- ****** PROFILE FIELD NAME START ********************** --&gt; &lt;PropertyName&gt;mc:productType&lt;/PropertyName&gt; &lt;!-- ****** PROFILE FIELD NAME END ********************** --&gt; &lt;!-- ****** PROFILE FIELD VALUE START ********************** --&gt; &lt;Literal&gt;QuantizedMeshDTMBest&lt;/Literal&gt; &lt;!-- ****** PROFILE FIELD VALUE END ********************** --&gt; &lt;/PropertyIsEqualTo&gt; &lt;/Filter&gt; &lt;/csw:Constraint&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt;   You will get GetRecords XML Response with product metadata.  Response example Search Results Example &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecordsResponse xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:dct=&quot;http://purl.org/dc/terms/&quot; xmlns:gmd=&quot;http://www.isotc211.org/2005/gmd&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:mc=&quot;http://schema.mapcolonies.com/3d&quot; xmlns:ows=&quot;http://www.opengis.net/ows&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; version=&quot;2.0.2&quot; xsi:schemaLocation=&quot;http://www.opengis.net/cat/csw/2.0.2 http://schemas.opengis.net/csw/2.0.2/CSW-discovery.xsd&quot;&gt; &lt;csw:SearchStatus timestamp=&quot;2022-03-27T06:45:54Z&quot; /&gt; &lt;csw:SearchResults numberOfRecordsMatched=&quot;1&quot; numberOfRecordsReturned=&quot;1&quot; nextRecord=&quot;0&quot; recordSchema=&quot;http://schema.mapcolonies.com/3d&quot; elementSet=&quot;full&quot;&gt; &lt;mc:MC3DRecord&gt; &lt;mc:accuracyLE90&gt;4.0&lt;/mc:accuracyLE90&gt; &lt;mc:classification&gt;5&lt;/mc:classification&gt; &lt;mc:creationDateUTC&gt;2022-10-24&lt;/mc:creationDateUTC&gt; &lt;mc:footprint&gt;{&quot;type&quot;:&quot;Polygon&quot;,&quot;coordinates&quot;:[[[34.98,32.8],[35.1,32.8],[35.1,32.7],[34.98,32.7],[34.98,32.8]]]}&lt;/mc:footprint&gt; &lt;mc:geographicArea&gt;North&lt;/mc:geographicArea&gt; &lt;mc:maxHorizontalAccuracyCE90&gt;999.0&lt;/mc:maxHorizontalAccuracyCE90&gt; &lt;mc:id&gt;33333333-3333-3333-3333-333333333333&lt;/mc:id&gt; &lt;mc:insertDate&gt;2022-10-24&lt;/mc:insertDate&gt; &lt;mc:links scheme=&quot;TERRAIN_QMESH&quot; name=&quot;&quot; description=&quot;&quot;&gt;https://tiles.mapcolonies.net/api/dem/v1/terrains/srtm100&lt;/mc:links&gt; &lt;mc:producerName&gt;producer&lt;/mc:producerName&gt; &lt;mc:productBBox&gt;35.2670012825,32.5856881598,35.3105702702,32.6300363309&lt;/mc:productBBox&gt; &lt;mc:productId&gt;33333333-3333-3333-3333-333333333333&lt;/mc:productId&gt; &lt;mc:productName&gt;srtm100&lt;/mc:productName&gt; &lt;mc:productSource&gt;&lt;/mc:productSource&gt; &lt;mc:productStatus&gt;PUBLISHED&lt;/mc:productStatus&gt; &lt;mc:productType&gt;QuantizedMeshDTMBest&lt;/mc:productType&gt; &lt;mc:productVersion&gt;1&lt;/mc:productVersion&gt; &lt;mc:productionSystem&gt;&lt;/mc:productionSystem&gt; &lt;mc:productionSystemVersion&gt;1&lt;/mc:productionSystemVersion&gt; &lt;mc:region&gt;region&lt;/mc:region&gt; &lt;mc:sensors&gt;UNDEFINED&lt;/mc:sensors&gt; &lt;mc:imagingTimeEndUTC&gt;2022-10-24&lt;/mc:imagingTimeEndUTC&gt; &lt;mc:imagingTimeBeginUTC&gt;2022-10-24&lt;/mc:imagingTimeBeginUTC&gt; &lt;mc:SRS&gt;4326&lt;/mc:SRS&gt; &lt;mc:SRSName&gt;WGS84GEO&lt;/mc:SRSName&gt; &lt;mc:type&gt;RECORD_3D&lt;/mc:type&gt; &lt;mc:updateDateUTC&gt;2022-10-25T16:48:17Z&lt;/mc:updateDateUTC&gt; &lt;ows:BoundingBox crs=&quot;urn:x-ogc:def:crs:EPSG:6.11:4326&quot; dimensions=&quot;2&quot;&gt; &lt;ows:LowerCorner&gt;32.7 34.98&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;32.8 35.1&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/mc:MC3DRecord&gt; &lt;/csw:SearchResults&gt; &lt;/csw:GetRecordsResponse&gt;   Extract link for terrain provider &lt;mc:links scheme=&quot;TERRAIN_QMESH&quot; name=&quot;srtm100&quot;&gt; http://tiles.com/terrains/srtm100/layer.json &lt;/mc:links&gt;   info You need to save &lt;mc:links&gt; element value as TERRAIN_URL, which is a terrain provider consumption URL.  ","version":"Next","tagName":"h2"},{"title":"Step 3​","type":1,"pageTitle":"Getting Started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/3d-getting-started#step-3","content":" ","version":"Next","tagName":"h2"},{"title":"Construct Client side Layer​","type":1,"pageTitle":"Getting Started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/3d-getting-started#construct-client-side-layer","content":" Now, after you got all product metadata that you need by querying our Catalog and MapProxy capabilities, lets actually use it in order to display it in real map viewer / application (clients).  warning Below examples are based on Pseudo code, you will have to adapt it in your own application to make it work.  ","version":"Next","tagName":"h3"},{"title":"Cesium​","type":1,"pageTitle":"Getting Started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/Guides/3d-getting-started#cesium","content":" info The minimum required version for cesium is v84.  // **Optional** add to Cesium terrain provider in order to clamp 3d models to the ground viewer.terrainProvider = new Cesium.TerrainProvider({ url: new Cesium.Resource({ url: &quot;&lt;TERRAIN_URL&gt;&quot;, queryParameters: { &quot;token&quot;: &quot;&lt;token&gt;&quot;, }, }), }); ... ... // Add 3d model to the scene const tileset = viewer.scene.primitives.add( new Cesium.Cesium3DTileset({ url: new Cesium.Resource({ url: &quot;&lt;MODEL_URL&gt;&quot;, queryParameters: { &quot;token&quot;: &quot;&lt;token&gt;&quot;, }, }), }) ); ...   Replace &lt;MODEL_URL&gt; with the URL link that you got from Step 2.  Replace &lt;TERRAIN_URL&gt; with the URL link that you got from Step 2.1 (optional).  Replace &lt;token&gt; with the token you have. ","version":"Next","tagName":"h3"},{"title":"3D Tile Server","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/services/3d-tile-server","content":"3D Tile Server tip Hardware Acceleration for WebGL / WebGL2 is crucial for 3D tiles rendering performance. for more information click here. In 3D, the 3DTiles server uses the XYZ protocol to serve the models files. How does it work? Just send a get request with the file you want to get. info Pay attention to the authentication you need to provide! For further information, see: Authentication The get request should be like: &lt;3D_MODEL_SERVING_SERVICE_URL&gt;/[PATH_TO_FILE_TILESET_JSON] [PATH_TO_FILE_TILESET_JSON] - the full path to the wanted file. An example: &lt;3D_MODEL_SERVING_SERVICE_URL&gt;/path/tileset.json info This request is without the authentication The response is the content of the file from the request. An example: Response example { &quot;asset&quot;: { &quot;version&quot;: &quot;0.0&quot;, &quot;tilesetVersion&quot;: &quot;1.0&quot; }, &quot;geometricError&quot;: 27596589.783091642, &quot;root&quot;: { &quot;boundingVolume&quot;: { &quot;region&quot;: [ -1.3002877215936859, 0.7041575058907783, -1.2780350790633774, 0.7172779626921096, 0, 540.9999999997664 ] }, &quot;geometricError&quot;: 597.7486716289187, &quot;refine&quot;: &quot;add&quot;, &quot;content&quot;: { &quot;url&quot;: &quot;0/0/0.b3dm&quot;, &quot;boundingVolume&quot;: { &quot;region&quot;: [ -1.3001359425259444, 0.7046416776785741, -1.2847412414241195, 0.715974250610089, 0, 45.4 ] } }, &quot;children&quot;: [ { &quot;boundingVolume&quot;: { &quot;region&quot;: [ -1.3002877215936859, 0.7041575058907783, -1.2901045718929864, 0.7096268127518264, 0, 90.4 ] }, &quot;geometricError&quot;: 315.07835765914325, &quot;content&quot;: { &quot;url&quot;: &quot;1/0/0.b3dm&quot;, &quot;boundingVolume&quot;: { &quot;region&quot;: [ -1.3002838399814296, 0.7042702559057864, -1.2901097869367912, 0.7096162412925472, 0, 45.4 ] } }, &quot;children&quot;: [ { &quot;boundingVolume&quot;: { &quot;region&quot;: [ -1.3002877215936859, 0.7041575058907783, -1.292420442296141, 0.7082788949705112, 0, 30.7 ] }, &quot;geometricError&quot;: 208.26652664025082, &quot;content&quot;: { &quot;url&quot;: &quot;2/0/0.b3dm&quot;, &quot;boundingVolume&quot;: { &quot;region&quot;: [ -1.3002834211024092, 0.7042036838121276, -1.2933332268056539, 0.7082788949705112, 0, 16.2 ] } }, &quot;children&quot;: [ { &quot;boundingVolume&quot;: { &quot;region&quot;: [ -1.3002852257728557, 0.7041710828070297, -1.2947794415304408, 0.707218443388975, 0, 22.4 ] }, &quot;geometricError&quot;: 106.35154744399651, &quot;content&quot;: { &quot;url&quot;: &quot;3/0/0.b3dm&quot;, &quot;boundingVolume&quot;: { &quot;region&quot;: [ -1.3002679103613466, 0.7041822878208275, -1.2947794415304408, 0.707218443388975, 0, 22.4 ] } }, &quot;children&quot;: [ { &quot;boundingVolume&quot;: { &quot;region&quot;: [ -1.3002852257728557, 0.7041710828070297, -1.296688695596441, 0.7060297275607097, 0, 0 ] }, &quot;geometricError&quot;: 0, &quot;content&quot;: { &quot;url&quot;: &quot;4/0/0.b3dm&quot; } }, { &quot;boundingVolume&quot;: { &quot;region&quot;: [ -1.2963847011286456, 0.7044581196558126, -1.2947855885800665, 0.7069076351557798, 0, 15.4 ] }, &quot;geometricError&quot;: 23.081303749744492, &quot;content&quot;: { &quot;url&quot;: &quot;4/1/0.b3dm&quot; }, &quot;children&quot;: [ { &quot;boundingVolume&quot;: { &quot;region&quot;: [ -1.295899761395979, 0.7051670619259972, -1.2956769317197185, 0.7068777673362904, 0, 11.4 ], &quot;geometricError&quot;: 0, &quot;content&quot;: { &quot;url&quot;: &quot;5/2/0.b3dm&quot; } } }, { &quot;boundingVolume&quot;: { &quot;region&quot;: [ -1.2959047460563227, 0.7068762419185242, -1.2955470390807973, 0.7069071534449063, 0, 10.7 ] }, &quot;geometricError&quot;: 0, &quot;content&quot;: { &quot;url&quot;: &quot;3/0/7.b3dm&quot; }, &quot;children&quot;: [ { &quot;boundingVolume&quot;: { &quot;region&quot;: [ -1.2949925392507924, 0.7154444192637318, -1.294344742845622, 0.7164660163254601, 0, 0 ] }, &quot;geometricError&quot;: 0, &quot;content&quot;: { &quot;url&quot;: &quot;4/1/14.b3dm&quot; } } ] } ] } ] } ] } ] } ] } } This get request is actually the URL from the mc:links element from the records showed in catalog service.","keywords":"","version":"Next"},{"title":"3D Catalog Profile Information","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/services/catalog/catalog-profile-v2","content":"3D Catalog Profile Information typename = mc:MC3DRecordmain_namespace = http://schema.mapcolonies.com/3dThe 3D sub-system Catalog profile fields with information of each of them: Changes from previous profile:​ Removed unnecessary properties and added two properties: source and status of the product. PYCSW Queryable/XML Element Name\tType\tDescriptionmc:id\ttext\tunique internal catalog item id AUTO_GENERATED mc:productId\ttext\tunique external product id AUTO_GENERATED mc:productName\ttext\tthe product name maxLength: 50 mc:productVersion\tint\tthe product version AUTO_GENERATED mc:productType\tenum\tValid Values: 3DPhotoRealistic / QuantizedMeshDTMBest / QuantizedMeshDSMBest default: 3DPhotoRealistic mc:links\ttext\tavailable links for current product CSW Links structure of links in the format name,description,protocol,url[^„,[^„,]] mc:creationDateUTC\tdate\tthe date when raw product was created supported format: dd/mm/yyyy mc:imagingTimeBeginUTC\tdate\tstart imaging date of raw product supported format: dd/mm/yyyy (not later than &quot;mc:imagingTimeEndUTC&quot;) mc:imagingTimeEndUTC\tdate\tend imaging date of raw product supported format: dd/mm/yyyy (not earlier than &quot;mc:imagingTimeBeginUTC&quot;) mc:maxHorizontalAccuracyCE90\tdouble\tEP90 / CE90 Maximum absolute plane accuracy range in meters double unsigned valid: 0 to 999 (999 = no data) mc:accuracyLE90\tdouble\tdouble unsigned valid: 0 to 999 (999 = no data) mc:sensors\ttext\tlist of sensors used as a source for the product comma separated list mc:footprint\tgeojson\tgeographical delineation of the product / model trace mc:SRS\ttext\treference System ID (EPSG), ex: 4326 / 3857 mc:SRSName\ttext\tname of reference system mc:region\ttext\tsector / countries comma separated list mc:classification\tenum\tproduct classification / confidentiality Classification values mc:productionSystem\ttext\tthe production system mc:productionSystemVersion\ttext\tthe version of the production system maxLength: 20 mc:producerName\ttext\tmanufacturer / organization that produced / supplied the product mc:productBBox\ttext\tthe bounding box of the product minX,minY,maxX,maxY mc:productSource\ttext\tthe source of the product mc:productStatus\tenum\tStatus of the product Valid values: PUBLISHED / UNPUBLISHED default: UNPUBLISHED mc:type\tenum\ttype of the catalog Valid values: RECORD_RASTER / RECORD_3D / RECORD_DEM default: RECORD_3D mc:insertDate\tdate\tthe date when item was added to catalog AUTO_GENERATED: CURRENT_TIME ows:BoundingBox\twkt\tcurrently stored footprint in wkt format AUTO_GENERATED mc:updateDateUTC\tdate\tthe date when item was updated in catalog AUTO_GENERATED: CURRENT_TIME in every update","keywords":"","version":"Next"},{"title":"3D Catalog Profile Information","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/services/catalog/catalog-profile-v1","content":"3D Catalog Profile Information danger This version is deprecated, please refer to latest version typename = mc:MC3DRecordmain_namespace = http://schema.mapcolonies.com/3dThe 3D sub-system Catalog profile fields with information of each of them: PYCSW Queryable/XML Element Name\tType\tDescriptionmc:id\ttext\tunique internal catalog item id AUTO_GENERATED mc:productId\ttext\tunique external product id AUTO_GENERATED mc:productName\ttext\tthe product name maxLength: 50 mc:productVersion\tint\tthe product version AUTO_GENERATED mc:productType\tenum\tValid Values: 3DPhotoRealistic / QuantizedMeshDTMBest / QuantizedMeshDSMBest default: 3DPhotoRealistic mc:links\ttext\tavailable links for current product CSW Links structure of links in the format name,description,protocol,url[^„,[^„,]] mc:description\ttext\tthe product description maxLength: 250 mc:creationDateUTC\tdate\tthe date when raw product was created supported format: dd/mm/yyyy mc:imagingTimeBeginUTC\tdate\tstart imaging date of raw product supported format: dd/mm/yyyy (not later than &quot;mc:imagingTimeEndUTC&quot;) mc:imagingTimeEndUTC\tdate\tend imaging date of raw product supported format: dd/mm/yyyy (not earlier than &quot;mc:imagingTimeBeginUTC&quot;) mc:minResolutionMeter\tdouble\tthe product resolution in meters (not more than max res) double unsigned valid: 0.01 to 8000 mc:maxResolutionMeter\tdouble\tthe product resolution in meters (not less than min res) double unsigned valid: 0.01 to 8000 mc:nominalResolution\tdouble\tthe product nominal resolution in meters minimum: 0 mc:maxHorizontalAccuracyCE90\tdouble\tEP90 / CE90 Maximum absolute plane accuracy range in meters double unsigned valid: 0 to 999 (999 = no data) mc:accuracyLEP90\tdouble\tdouble unsigned valid: 0 to 999 (999 = no data) mc:accuracySE90\tdouble\tdouble unsigned valid: 0 to 250 mc:relativeAccuracyLE90\tdouble\tdouble unsigned valid: 0 to 100 mc:visualAccuracy\tdouble\tdouble unsigned valid: 0 to 100 mc:sensors\ttext\tlist of sensors used as a source for the product comma separated list mc:footprint\tgeojson\tgeographical delineation of the product / model trace mc:heightRangeFrom\tdouble\tminimum height range in meters mc:heightRangeTo\tdouble\tmaximum height range in meters mc:SRS\ttext\treference System ID (EPSG), ex: 4326 / 3857 mc:SRSName\ttext\tname of reference system mc:SRSOrigin\ttext\tCoordinates of reference system pattern: '(x;y;z)' mc:region\ttext\tsector / countries comma separated list mc:classification\tenum\tproduct classification / confidentiality Classification values mc:productionSystem\ttext\tthe production system mc:productionSystemVersion\ttext\tthe version of the production system maxLength: 20 mc:producerName\ttext\tmanufacturer / organization that produced / supplied the product mc:productionMethod\ttext\tthe production method default: photogrammetric mc:minFlightAlt\tdouble\tminimum flight height in meters mc:maxFlightAlt\tdouble\tmaximum flight height in meters mc:geographicArea\ttext\tthe area inside the region mc:productBBox\ttext\tthe bounding box of the product minX,minY,maxX,maxY mc:type\tenum\ttype of the catalog Valid values: RECORD_RASTER / RECORD_3D / RECORD_DEM default: RECORD_3D mc:insertDate\tdate\tthe date when item was added to catalog AUTO_GENERATED: CURRENT_TIME ows:BoundingBox\twkt\tcurrently stored footprint in wkt format AUTO_GENERATED mc:keywords\ttext\tlist of key words relevant for product AUTO_GENERATED mc:updateDate\tdate\tthe date when item was updated in catalog AUTO_GENERATED: CURRENT_TIME in every update","keywords":"","version":"Next"},{"title":"Authentication","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/authentication","content":"","keywords":"","version":"Next"},{"title":"Supplying the token​","type":1,"pageTitle":"Authentication","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/authentication#supplying-the-token","content":" When making any request, you need to add a special header or query parameter in which you supply the token.  How we supply the token\tNameQuery\ttoken Header\tx-api-key  info Important: Some services support only one of the above methods for supplying a token.  ","version":"Next","tagName":"h2"},{"title":"Using the token as a query parameter​","type":1,"pageTitle":"Authentication","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/authentication#using-the-token-as-a-query-parameter","content":" &lt;SERVICE_URL&gt;/SUB/PATH?token=&lt;token&gt;   ","version":"Next","tagName":"h2"},{"title":"Using the token as a header​","type":1,"pageTitle":"Authentication","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/authentication#using-the-token-as-a-header","content":" curl --location --request &lt;http_method&gt; '&lt;SERVICE_URL&gt;' --header 'x-api-key: &lt;token&gt;'  ","version":"Next","tagName":"h2"},{"title":"Catalog Service 🗃️","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/services/catalog/3d-catalog","content":"Catalog Service 🗃️ Catalog Service for the Web (CSW) is a standard for exposing a catalog of geospatial records in XML on the Internet (over HTTP). The catalog is made up of records that describe geospatial data, geospatial services (e.g. WMTS), and related resources. Request\tHTTP method binding(s)GetCapabilities\tGET (KVP) / POST (XML) / SOAP DescribeRecord\tGET (KVP) / POST (XML) / SOAP GetRecords\tGET (KVP) / POST (XML) / SOAP GetRecordById\tGET (KVP) / POST (XML) / SOAP GetRepositoryItem\tGET (KVP) GetDomain\tGET (KVP) / POST (XML) / SOAP Retrieve the records In order to retrieve the records, You need to send a post request with XML describing the specific records you want. Of course, you have to add the authentication stage in order to get answer. For more details, see: Authentication An example of a post request's body: Get all records with classification equal to 7 &lt;csw:GetRecords maxRecords=&quot;10&quot; outputFormat=&quot;application/xml&quot; outputSchema=&quot;http://schema.mapcolonies.com/3d&quot; resultType=&quot;results&quot; service=&quot;CSW&quot; version=&quot;2.0.2&quot; startPosition=&quot;1&quot; xmlns:mc=&quot;http://schema.mapcolonies.com/3d&quot; xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;csw:Query typeNames=&quot;csw:Record&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;csw:Constraint version=&quot;1.1.0&quot;&gt; &lt;ogc:Filter&gt; &lt;ogc:PropertyIsEqualTo&gt; &lt;ogc:PropertyName&gt;mc:classification&lt;/ogc:PropertyName&gt; &lt;ogc:Literal&gt;7&lt;/ogc:Literal&gt; &lt;/ogc:PropertyIsEqualTo&gt; &lt;/ogc:Filter&gt; &lt;/csw:Constraint&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt; After sending the request, you will get a response with all the records matched to the filter query. For example: Response example 3D Records Response &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt; &lt;csw:GetRecordsResponse xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:dct=&quot;http://purl.org/dc/terms/&quot; xmlns:gmd=&quot;http://www.isotc211.org/2005/gmd&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:ows=&quot;http://www.opengis.net/ows&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:mc=&quot;http://schema.mapcolonies.com/3d&quot; version=&quot;2.0.2&quot; xsi:schemaLocation=&quot;http://www.opengis.net/cat/csw/2.0.2 http://schemas.opengis.net/csw/2.0.2/CSW-discovery.xsd&quot;&gt; &lt;csw:SearchStatus timestamp=&quot;2022-06-16T07:12:25Z&quot;/&gt; &lt;csw:SearchResults numberOfRecordsMatched=&quot;3&quot; numberOfRecordsReturned=&quot;3&quot; nextRecord=&quot;0&quot; recordSchema=&quot;http://schema.mapcolonies.com/3d&quot; elementSet=&quot;full&quot;&gt; &lt;mc:MC3DRecord&gt; &lt;mc:accuracyLEP90&gt;999.0&lt;/mc:accuracyLEP90&gt; &lt;mc:classification&gt;5&lt;/mc:classification&gt; &lt;mc:footprint&gt;{&quot;type&quot;:&quot;Polygon&quot;,&quot;coordinates&quot;:[[[31.2603,33.4345],[31.2603,34.4888],[32.3353,34.4888],[32.3353,33.4345],[31.2603,33.4345]]]}&lt;/mc:footprint&gt; &lt;mc:geographicArea&gt;ישראל&lt;/mc:geographicArea&gt; &lt;mc:maxHorizontalAccuracyCE90&gt;999.0&lt;/mc:maxHorizontalAccuracyCE90&gt; &lt;mc:id&gt;c2bbeeee-6081-4e69-918c-287f48ea244d&lt;/mc:id&gt; &lt;mc:links scheme=&quot;3DTiles&quot; name=&quot;&quot; description=&quot;&quot;&gt;http://model-server-3d/path/to/file/tileset.json&lt;/mc:links&gt; &lt;mc:producerName&gt;TZAHAL&lt;/mc:producerName&gt; &lt;mc:productBBox&gt;31.2603,33.4345,32.3353,34.4888&lt;/mc:productBBox&gt; &lt;mc:productId&gt;c2bbeeee-6081-4e69-918c-287f48ea244d&lt;/mc:productId&gt; &lt;mc:productName&gt;מודל פריז&lt;/mc:productName&gt; &lt;mc:productType&gt;3DPhotoRealistic&lt;/mc:productType&gt; &lt;mc:productVersion&gt;1&lt;/mc:productVersion&gt; &lt;mc:productionMethod&gt;photogrammetric&lt;/mc:productionMethod&gt; &lt;mc:productionSystem&gt;P-30&lt;/mc:productionSystem&gt; &lt;mc:productionSystemVersion&gt;1&lt;/mc:productionSystemVersion&gt; &lt;mc:region&gt;צפון&lt;/mc:region&gt; &lt;mc:sensors&gt;sensor1&lt;/mc:sensors&gt; &lt;mc:imagingTimeEndUTC&gt;2022-06-15T10:39:00Z&lt;/mc:imagingTimeEndUTC&gt; &lt;mc:imagingTimeBeginUTC&gt;2022-06-15T10:39:00Z&lt;/mc:imagingTimeBeginUTC&gt; &lt;mc:SRS&gt;4567&lt;/mc:SRS&gt; &lt;mc:SRSName&gt;WGS24GEO&lt;/mc:SRSName&gt; &lt;mc:type&gt;RECORD_3D&lt;/mc:type&gt; &lt;ows:BoundingBox crs=&quot;urn:x-ogc:def:crs:EPSG:6.11:4326&quot; dimensions=&quot;2&quot;&gt; &lt;ows:LowerCorner&gt;33.4345 31.2603&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;34.4888 32.3353&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/mc:MC3DRecord&gt; &lt;mc:MC3DRecord&gt; &lt;mc:accuracyLEP90&gt;999.0&lt;/mc:accuracyLEP90&gt; &lt;mc:classification&gt;7&lt;/mc:classification&gt; &lt;mc:footprint&gt;{&quot;type&quot;:&quot;Polygon&quot;,&quot;coordinates&quot;:[[[32.2603,34.4345],[32.2603,35.4888],[33.3353,35.4888],[33.3353,34.4345],[32.2603,34.4345]]]}&lt;/mc:footprint&gt; &lt;mc:geographicArea&gt;ישראל&lt;/mc:geographicArea&gt; &lt;mc:maxHorizontalAccuracyCE90&gt;999.0&lt;/mc:maxHorizontalAccuracyCE90&gt; &lt;mc:id&gt;c2bbeeee-6081-4e69-918c-287f48ea244d&lt;/mc:id&gt; &lt;mc:links scheme=&quot;3DTiles&quot; name=&quot;&quot; description=&quot;&quot;&gt;http://model-server-3d/path/to/file/tileset.json&lt;/mc:links&gt; &lt;mc:producerName&gt;TZAHAL&lt;/mc:producerName&gt; &lt;mc:productBBox&gt;32.2603,34.4345,33.3353,35.4888&lt;/mc:productBBox&gt; &lt;mc:productId&gt;c2bb5433ee-6081-4e69-918c-287f48ea244d&lt;/mc:productId&gt; &lt;mc:productName&gt;מודל סיני&lt;/mc:productName&gt; &lt;mc:productType&gt;3DPhotoRealistic&lt;/mc:productType&gt; &lt;mc:productVersion&gt;1&lt;/mc:productVersion&gt; &lt;mc:productionMethod&gt;photogrammetric&lt;/mc:productionMethod&gt; &lt;mc:productionSystem&gt;P-80&lt;/mc:productionSystem&gt; &lt;mc:productionSystemVersion&gt;1&lt;/mc:productionSystemVersion&gt; &lt;mc:region&gt;דרום מזרח&lt;/mc:region&gt; &lt;mc:sensors&gt;sensor2&lt;/mc:sensors&gt; &lt;mc:imagingTimeEndUTC&gt;2022-06-15T10:39:00Z&lt;/mc:imagingTimeEndUTC&gt; &lt;mc:imagingTimeBeginUTC&gt;2022-06-15T10:39:00Z&lt;/mc:imagingTimeBeginUTC&gt; &lt;mc:SRS&gt;4567&lt;/mc:SRS&gt; &lt;mc:SRSName&gt;WGS24GEO&lt;/mc:SRSName&gt; &lt;mc:type&gt;RECORD_3D&lt;/mc:type&gt; &lt;ows:BoundingBox crs=&quot;urn:x-ogc:def:crs:EPSG:6.11:4326&quot; dimensions=&quot;2&quot;&gt; &lt;ows:LowerCorner&gt;34.4345 32.2603&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;35.4888 33.3353&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/mc:MC3DRecord&gt; &lt;mc:MC3DRecord&gt; &lt;mc:accuracyLEP90&gt;999.0&lt;/mc:accuracyLEP90&gt; &lt;mc:classification&gt;7&lt;/mc:classification&gt; &lt;mc:creationDateUTC&gt;2022-06-15&lt;/mc:creationDateUTC&gt; &lt;mc:footprint&gt;{&quot;type&quot;:&quot;Polygon&quot;,&quot;coordinates&quot;:[[[11,22],[11,33],[44,33],[44,22],[11,22]]]}&lt;/mc:footprint&gt; &lt;mc:geographicArea&gt;North&lt;/mc:geographicArea&gt; &lt;mc:maxHorizontalAccuracyCE90&gt;999.0&lt;/mc:maxHorizontalAccuracyCE90&gt; &lt;mc:id&gt;11111111-1111-1111-1111-111111111111&lt;/mc:id&gt; &lt;mc:links scheme=&quot;3DTiles&quot; name=&quot;&quot; description=&quot;&quot;&gt;http://model-server-3d/path/to/file/tileset.json&lt;/mc:links&gt; &lt;mc:producerName&gt;aa&lt;/mc:producerName&gt; &lt;mc:productBBox&gt;11,22,44,33&lt;/mc:productBBox&gt; &lt;mc:productId&gt;11111111-1111-1111-1111-111111111111&lt;/mc:productId&gt; &lt;mc:productName&gt;aaa&lt;/mc:productName&gt; &lt;mc:productType&gt;type&lt;/mc:productType&gt; &lt;mc:productVersion&gt;1&lt;/mc:productVersion&gt; &lt;mc:productionMethod&gt;&lt;/mc:productionMethod&gt; &lt;mc:productionSystem&gt;&lt;/mc:productionSystem&gt; &lt;mc:productionSystemVersion&gt;1&lt;/mc:productionSystemVersion&gt; &lt;mc:region&gt;region&lt;/mc:region&gt; &lt;mc:sensors&gt;aa&lt;/mc:sensors&gt; &lt;mc:imagingTimeEndUTC&gt;2022-06-15&lt;/mc:imagingTimeEndUTC&gt; &lt;mc:imagingTimeBeginUTC&gt;2022-06-15&lt;/mc:imagingTimeBeginUTC&gt; &lt;mc:SRS&gt;23&lt;/mc:SRS&gt; &lt;mc:SRSName&gt;1234&lt;/mc:SRSName&gt; &lt;mc:type&gt;revorsd&lt;/mc:type&gt; &lt;ows:BoundingBox crs=&quot;urn:x-ogc:def:crs:EPSG:6.11:23&quot; dimensions=&quot;2&quot;&gt; &lt;ows:LowerCorner&gt;22 11&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;33 44&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/mc:MC3DRecord&gt; &lt;/csw:SearchResults&gt; &lt;/csw:GetRecordsResponse&gt; You can see in the response how much records returned, from which schema and etc... In addition, you can also see all the metadata of the matched records. In each record, you can find an element called &lt;mc:links&gt;. This link is a layer consumption URL.","keywords":"","version":"Next"},{"title":"DEM","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/dem-overview","content":"","keywords":"","version":"Next"},{"title":"DEM (DTM / DSM)​","type":1,"pageTitle":"DEM","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/dem-overview#dem-dtm--dsm","content":" A Digital Elevation Model is a representation of elevation data that maps the surface of the earth, above a certain datum. There are essentially 2 types of DEM:  The Digital Terrain Model (DTM) represents the raw elevation of the bare earth ground without considering any over-ground features like plants and buildings. The Digital Surface Model (DSM) represents the elevation of the earth's surface that a remote sensing system will first meet (2.5D “blanket”). Thus, the resulting DSM includes the elevation of the bare earth terrain plus the natural (e.g. trees, shrubs) and artificial man-made features (e.g. buildings, bridges).    DEM can be represented as raster or vector data:  Raster DEM is represented as a 2D grid of uniform sized squares, where each square in the grid has a value that represents the height of the corresponding geographical point (also known as heightmap). This is actually a “2.5D” model, because there is only one height measure for each surface point. Raster DEM can be stored in a number of file formats but is mostly delivered as GeoTIFF, a format which in addition to the data contains the size of the raster and the position in geo coordinates, plus projection information. Vector DEM / Quanitized Mesh is a representation of a continuous surface consisting a mesh of triangular facets. The most common format for Vector DEM is Triangulated Irregular Network (TIN), which contains irregularly distributed nodes and lines (vertices) with X,Y,Z coordinates arranged in a network of non-overlapping triangles. These are meshes that contain only vertices where they define meaningful change in surface height. Vector DEM tiles are rendered more efficiently for displaying it in a 3D view.    DEM can be rendered as 2D (raster) or 3D maps:  In 2D view, the heights can be rendered as colors (based on some coloring scheme) or displayed as contour lines with hill shades.     In 3D view, the terrain surface is visualized in an oblique three-dimensional perspective, using raster tiles or TIN mesh tiles. It can be augmented with a satellite imagery to make it look realistic.   ","version":"Next","tagName":"h2"},{"title":"3D Model Viewer 🌍","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/services/3dViewer/3d-viewer","content":"","keywords":"","version":"Next"},{"title":"Flow Diagram ⏭​","type":1,"pageTitle":"3D Model Viewer 🌍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/services/3dViewer/3d-viewer#flow-diagram-","content":"   ","version":"Next","tagName":"h2"},{"title":"Quering 3D CSW catalog service (STEP ☝🏼)​","type":1,"pageTitle":"3D Model Viewer 🌍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/services/3dViewer/3d-viewer#quering-3d-csw-catalog-service-step-","content":" Query 3D CSW catalog service to find an item(s) according to the desired filter.  A good example of a filter request:  POST Request url: '&lt;3D_CATALOG_SERVICE_URL&gt;/csw?token=&lt;TOKEN&gt;' body (XML): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecords outputFormat=&quot;application/xml&quot; outputSchema=&quot;http://schema.mapcolonies.com/3d&quot; resultType=&quot;results&quot; service=&quot;CSW&quot; version=&quot;2.0.2&quot; startPosition=&quot;1&quot; maxRecords=&quot;200&quot; xmlns:mc=&quot;http://schema.mapcolonies.com/3d&quot; xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;csw:Query typeNames=&quot;csw:Record&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;csw:Constraint version=&quot;1.1.0&quot;&gt; &lt;ogc:Filter&gt; &lt;ogc:Or&gt; &lt;ogc:PropertyIsEqualTo&gt; &lt;ogc:PropertyName&gt;mc:classification&lt;/ogc:PropertyName&gt; &lt;ogc:Literal&gt;5&lt;/ogc:Literal&gt; &lt;/ogc:PropertyIsEqualTo&gt; &lt;ogc:PropertyIsEqualTo&gt; &lt;ogc:PropertyName&gt;mc:productType&lt;/ogc:PropertyName&gt; &lt;ogc:Literal&gt;3DPhotoRealistic&lt;/ogc:Literal&gt; &lt;/ogc:PropertyIsEqualTo&gt; &lt;/ogc:Or&gt; &lt;/ogc:Filter&gt; &lt;/csw:Constraint&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt;   Replace &lt;3D_CATALOG_SERVICE_URL&gt; with 3D CSW catalog URL.   &lt;3D_CATALOG_SERVICE_URL&gt;   Replace &lt;token&gt; with with the token you have.   &lt;token&gt;   Of course, you can also send a regular request with no filter.  A good example is:  POST Request url: '&lt;3D_CATALOG_SERVICE_URL&gt;/csw?token=&lt;TOKEN&gt;' body (XML): &lt;csw:GetRecords maxRecords=&quot;10&quot; outputFormat=&quot;application/xml&quot; outputSchema=&quot;http://schema.mapcolonies.com/3d&quot; resultType=&quot;results&quot; service=&quot;CSW&quot; version=&quot;2.0.2&quot; startPosition=&quot;1&quot; xmlns:mc=&quot;http://schema.mapcolonies.com/3d&quot; xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;csw:Query typeNames=&quot;csw:Record&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt;   You will get GetRecords XML Response with the products metadata.  XML Response &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt; &lt;!-- pycsw 2.7.dev0 --&gt; &lt;csw:GetRecordsResponse xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:dct=&quot;http://purl.org/dc/terms/&quot; xmlns:gmd=&quot;http://www.isotc211.org/2005/gmd&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:ows=&quot;http://www.opengis.net/ows&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:mc=&quot;http://schema.mapcolonies.com/3d&quot; version=&quot;2.0.2&quot; xsi:schemaLocation=&quot;http://www.opengis.net/cat/csw/2.0.2 http://schemas.opengis.net/csw/2.0.2/CSW-discovery.xsd&quot;&gt; &lt;csw:SearchStatus timestamp=&quot;2023-10-15T10:49:46Z&quot;/&gt; &lt;csw:SearchResults numberOfRecordsMatched=&quot;2&quot; numberOfRecordsReturned=&quot;2&quot; nextRecord=&quot;0&quot; recordSchema=&quot;http://schema.mapcolonies.com/3d&quot; elementSet=&quot;full&quot;&gt; &lt;mc:MC3DRecord&gt; &lt;mc:accuracyLE90&gt;8.0&lt;/mc:accuracyLE90&gt; &lt;mc:classification&gt;6&lt;/mc:classification&gt; &lt;mc:creationDateUTC&gt;1970-01-01&lt;/mc:creationDateUTC&gt; &lt;mc:footprint&gt;{&quot;type&quot;:&quot;Polygon&quot;,&quot;coordinates&quot;:[[[35.2670012825,32.5856881598],[35.2670012825,32.6300363309],[35.3105702702,32.6300363309],[35.3105702702,32.5856881598],[35.2670012825,32.5856881598]]]}&lt;/mc:footprint&gt; &lt;mc:maxHorizontalAccuracyCE90&gt;8.0&lt;/mc:maxHorizontalAccuracyCE90&gt; &lt;mc:id&gt;53c9e5f6-31d6-47a1-bc11-64e150bcc13b&lt;/mc:id&gt; &lt;mc:insertDate&gt;2023-10-11T18:33:18Z&lt;/mc:insertDate&gt; &lt;mc:links scheme=&quot;3DTiles&quot; name=&quot;&quot; description=&quot;&quot;&gt;https://URL-TO-3D-TILE/api/3d/v1/b3dm/model/tileset.json&lt;/mc:links&gt; &lt;mc:producerName&gt;IDFMU&lt;/mc:producerName&gt; &lt;mc:productBBox&gt;35.2670012825,32.5856881598,35.3105702702,32.6300363309&lt;/mc:productBBox&gt; &lt;mc:productId&gt;53c9e5f6-31d6-47a1-bc11-64e150bcc13b&lt;/mc:productId&gt; &lt;mc:productName&gt;natik-q2&lt;/mc:productName&gt; &lt;mc:productSource&gt;\\\\domtest\\mimi\\archi\\maz\\silver\\libot\\afula-whole&lt;/mc:productSource&gt; &lt;mc:productStatus&gt;PUBLISHED&lt;/mc:productStatus&gt; &lt;mc:productType&gt;3DPhotoRealistic&lt;/mc:productType&gt; &lt;mc:productVersion&gt;1&lt;/mc:productVersion&gt; &lt;mc:productionSystem&gt;i&lt;/mc:productionSystem&gt; &lt;mc:productionSystemVersion&gt;uy&lt;/mc:productionSystemVersion&gt; &lt;mc:region&gt;kl&lt;/mc:region&gt; &lt;mc:sensors&gt;k&lt;/mc:sensors&gt; &lt;mc:imagingTimeEndUTC&gt;2023-08-20T12:16:00Z&lt;/mc:imagingTimeEndUTC&gt; &lt;mc:imagingTimeBeginUTC&gt;2023-08-11T18:48:00Z&lt;/mc:imagingTimeBeginUTC&gt; &lt;mc:SRS&gt;4326&lt;/mc:SRS&gt; &lt;mc:SRSName&gt;WGS84GEO&lt;/mc:SRSName&gt; &lt;mc:type&gt;RECORD_3D&lt;/mc:type&gt; &lt;mc:updateDateUTC&gt;2023-10-11T18:33:18Z&lt;/mc:updateDateUTC&gt; &lt;ows:BoundingBox crs=&quot;urn:x-ogc:def:crs:EPSG:6.11:4326&quot; dimensions=&quot;2&quot;&gt; &lt;ows:LowerCorner&gt;32.5856881598 35.2670012825&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;32.6300363309 35.3105702702&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/mc:MC3DRecord&gt; &lt;mc:MC3DRecord&gt; &lt;mc:accuracyLE90&gt;999.0&lt;/mc:accuracyLE90&gt; &lt;mc:classification&gt;6&lt;/mc:classification&gt; &lt;mc:creationDateUTC&gt;1970-01-01&lt;/mc:creationDateUTC&gt; &lt;mc:footprint&gt;{&quot;type&quot;:&quot;Polygon&quot;,&quot;coordinates&quot;:[[[34.8,31.9],[34.8,31.9],[34.82,31.90],[34.81968953570555,31.91211446418133],[34.8809,31.913]]]}&lt;/mc:footprint&gt; &lt;mc:maxHorizontalAccuracyCE90&gt;999.0&lt;/mc:maxHorizontalAccuracyCE90&gt; &lt;mc:id&gt;e8a7ee77-1f95-4ac7-ad6e-24aae7859be5&lt;/mc:id&gt; &lt;mc:insertDate&gt;2023-10-14T15:05:15Z&lt;/mc:insertDate&gt; &lt;mc:links scheme=&quot;3DTiles&quot; name=&quot;&quot; description=&quot;&quot;&gt;https://URL-TO-3D-TILE/api/3d/v1/b3dm/model/tileset.json&lt;/mc:links&gt; &lt;mc:producerName&gt;IDFMU&lt;/mc:producerName&gt; &lt;mc:productId&gt;e8a7ee77-1f95-4ac7-ad6e-24aa5&lt;/mc:productId&gt; &lt;mc:productName&gt;רחובות&lt;/mc:productName&gt; &lt;mc:productSource&gt;\\\\domtest\\mimi\\archi\\maz\\silver\\libot\\City&lt;/mc:productSource&gt; &lt;mc:productStatus&gt;PUBLISHED&lt;/mc:productStatus&gt; &lt;mc:productType&gt;3DPhotoRealistic&lt;/mc:productType&gt; &lt;mc:productVersion&gt;1&lt;/mc:productVersion&gt; &lt;mc:productionSystem&gt;123&lt;/mc:productionSystem&gt; &lt;mc:productionSystemVersion&gt;123&lt;/mc:productionSystemVersion&gt; &lt;mc:region&gt;ישראל&lt;/mc:region&gt; &lt;mc:sensors&gt;סנסור&lt;/mc:sensors&gt; &lt;mc:imagingTimeEndUTC&gt;2023-10-08T12:14:00Z&lt;/mc:imagingTimeEndUTC&gt; &lt;mc:imagingTimeBeginUTC&gt;2023-10-03T11:09:00Z&lt;/mc:imagingTimeBeginUTC&gt; &lt;mc:SRS&gt;4326&lt;/mc:SRS&gt; &lt;mc:SRSName&gt;WGS84GEO&lt;/mc:SRSName&gt; &lt;mc:type&gt;RECORD_3D&lt;/mc:type&gt; &lt;mc:updateDateUTC&gt;2023-10-14T15:05:15Z&lt;/mc:updateDateUTC&gt; &lt;ows:BoundingBox crs=&quot;urn:x-ogc:def:crs:EPSG:6.11:4326&quot; dimensions=&quot;2&quot;&gt; &lt;ows:LowerCorner&gt;31.908523874681066 34.81539563385809&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;31.91211446418133 34.81968953570555&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/mc:MC3DRecord&gt; &lt;/csw:SearchResults&gt; &lt;/csw:GetRecordsResponse&gt;   ","version":"Next","tagName":"h2"},{"title":"Extract the desired attributes of the models (Step ✌🏼)​","type":1,"pageTitle":"3D Model Viewer 🌍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/services/3dViewer/3d-viewer#extract-the-desired-attributes-of-the-models-step-","content":" Within the response, locate the ID attribute of the desired mode, represented as :  &lt;mc:id&gt;MODEL_ID&lt;/mc:id&gt;   Additionally, the response contains other valuable attributes for your application.  In the response, you can find other useful attributes that you can use for your application.  You can see here all of the details about the 3D profile.  ","version":"Next","tagName":"h2"},{"title":"Useful and recommended attributes to use and display in your UI for the best user experience:​","type":1,"pageTitle":"3D Model Viewer 🌍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/services/3dViewer/3d-viewer#useful-and-recommended-attributes-to-use-and-display-in-your-ui-for-the-best-user-experience","content":" product name attributes to display the records property.footprint/product_bbox attribute in order to display the footprint of the model.imagingTimeBeginUTC attribute to order the 3D models by their footage creation time.region attribute to group 3D models from the same region.  Save the ID's of the models you wish to view as you will need them for the next step.  ","version":"Next","tagName":"h3"},{"title":"Creating a proper URL request for the tool (Step 3️⃣ )​","type":1,"pageTitle":"3D Model Viewer 🌍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/services/3dViewer/3d-viewer#creating-a-proper-url-request-for-the-tool-step-3️⃣-","content":" With the model ID's in hand, you can now create a request to the tool.  Use the following request template:  GET Request url: &lt;CATALOG-VIEWER-URL&gt;?&lt;QUERY-PARAMS&gt;   Replace &lt;3D_CATALOG_SERVICE_URL&gt; with 3D CSW catalog URL.   &lt;3D_CATALOG_SERVICE_URL&gt;   In &lt;QUERY-PARAMS&gt;, you need to add there params:  ","version":"Next","tagName":"h2"},{"title":"1. model_ids - mandatory​","type":1,"pageTitle":"3D Model Viewer 🌍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/services/3dViewer/3d-viewer#1-model_ids---mandatory","content":" ID's of the desired models obtained from the CSW response.  The convention is to list them as a comma-separated string:  model_ids=ID1,ID2   If you only need one model, omit the comma.  ","version":"Next","tagName":"h3"},{"title":"2. token -  mandatory​","type":1,"pageTitle":"3D Model Viewer 🌍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/services/3dViewer/3d-viewer#2-token----mandatory","content":" Simply the token you have.  This is the convention:  token=TOKEN   ","version":"Next","tagName":"h3"},{"title":"3. position (optional)​","type":1,"pageTitle":"3D Model Viewer 🌍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/services/3dViewer/3d-viewer#3-position-optional","content":" A position if you want the viewer to fly to a specific position instead of the model itself.  This is an optional parameter.the potion has 3 attributes:  longitude - double number between -180 and 180.latitude - double number between -90 and 90.height - positive double number between 0 and 22 (represents zoom level).  This is the convention:  position=LON,LAT,HEIGHT   ","version":"Next","tagName":"h3"},{"title":"4. show_extent (optional)​","type":1,"pageTitle":"3D Model Viewer 🌍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/services/3dViewer/3d-viewer#4-show_extent-optional","content":" A boolean parameter that determines whether a 3D model will display its footprint or not in the viewer. This is an optional parameter!  The show_extent parameter can be “true” or “false”.  This is the convention:  show_extent=trueshow_extent=true   The default value is false!  ℹ️ Query params are separated by '&amp;' char. An example: [http://url?model_ids=id1,id2?token=TOKEN&amp;position=0,0,0&amp;show_extent=true](http://url?model_ids=id1,id2?token=TOKEN&amp;position=0,0,0&amp;show_extent=true)   Here's an example of a well-structured GET request:  http://url-to-viewer/simple-catalog-viewer?model_ids=MODEL_ID1,MODEL_ID2&amp;token=TOKEN&amp;position=1.5,3,13   ","version":"Next","tagName":"h3"},{"title":"Congratulations!​","type":1,"pageTitle":"3D Model Viewer 🌍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/services/3dViewer/3d-viewer#congratulations","content":" You're now ready to view the model within a Cesium-based viewer.    ","version":"Next","tagName":"h2"},{"title":"Important Notes:​","type":1,"pageTitle":"3D Model Viewer 🌍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/3D/services/3dViewer/3d-viewer#important-notes","content":" When the &quot;model_ids&quot; query parameter includes multiple models, the viewer will automatically center on the first model listed. If a &quot;position&quot; query parameter is provided, the viewer will prioritize navigating to the specified position. The viewer seamlessly incorporates a terrain layer, offering a comprehensive portrayal of diverse surface elevations. To customize your experience, you can easily switch between various base maps (Raster layers) using the gear icon located in the upper-right corner of the viewer. Inside the viewer, you have the freedom to navigate the 3D space as you desire, providing a dynamic and immersive experience. ","version":"Next","tagName":"h3"},{"title":"DEM Catalog Profile Information","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Services/catalog/catalog-profile-v1","content":"DEM Catalog Profile Information typename = mc:MCDEMRecordmain_namespace = http://schema.mapcolonies.com/demThe DEM sub-system Catalog profile fields with information of each of them: PYCSW Queryable/XML Element Name\tType\tDescriptionmc:id\ttext\tunique internal catalog item id mc:productId\ttext\tunique external product id mc:productName\ttext\tthe product name mc:productType\tenum\tValid Values: DTM / DSM / QuantizedMesh / QuantizedMeshDTMBest / QuantizedMeshDSMBest mc:description\ttext\tthe product description mc:imagingTimeBeginUTC\tdate\tstart imaging date of raw product supported format: dd/mm/yyyy (not later than &quot;End date&quot;) mc:imagingTimeEndUTC\tdate\tend imaging date of raw product supported format: dd/mm/yyyy (not earlier than &quot;Begin date&quot;) mc:resolutionDeg\tdouble\tthe product resolution in degrees double unsigned valid: 0.00000009 to 0.072 mc:resolutionMeter\tdouble\tthe product resolution in meters double unsigned valid: 0.01 to 8000 mc:absoluteAccuracyLEP90\tdouble\tLEP90 maximum absolute vertical plane accuracy range in meters mc:relativeAccuracyLEP90\tdouble\tLEP90 maximum relative vertical plane accuracy range in meters mc:sensors\ttext\tlist of sensors used as a source for the product comma separated list mc:layerPolygonParts\tgeojson\tpolygons of the discrete parts (versions) and the list of layers in the best converted to Geojson mc:footprint\tgeojson\tgeographical delineation of the product / model trace mc:heightRangeFrom\tdouble\tminimum height range in Meters (not greater than &quot;heightRangeTo&quot;) valid: -500 to 9000 mc:heightRangeTo\tdouble\tmaximum height range in Meters (not less than &quot;heightRangeFrom&quot;) valid: -500 to 9000 mc:SRS\tint\treference System ID (EPSG), ex: 4326 / 3857 mc:SRSName\ttext\tname of reference system mc:verticalDatum\tenum\tValid Values: WGS 1984 / WGS 1972 / Pulkovo 1942 / Palestine 1923 / MSL Height / Israel / ED 1950 IDF mc:region\ttext\tsector / countries comma separated list mc:classification\tenum\tproduct classification / confidentiality Classification values mc:producerName\ttext\tmanufacturer / organization that produced / supplied the product mc:units\tenum\tValid Values: METER / DD / DMS / ARC_SECONDS / UNKNOWN mc:geographicArea\ttext\tgeographic area cities mc:undulationModel\tenum\tValid Values: MSL EGM96 / MSL EGM2008 / MSL DMA10 / ILUM mc:dataType\tenum\tValid Values: FLOAT64 / FLOAT32 / FLOAT16 / INT64 / INT32 / INT16 / INT8 mc:noDataValue\tenum\tValid Values: -32768 / -326767 / -999 mc:productBBox\ttext\tthe bounding box of the product minX,minY,maxX,maxY mc:insertDate\tdate\tthe date when item was added to catalog mc:keywords\ttext\tlist of key words relevant for product mc:updateDateUTC\tdate\tdate the record got and update in catalog supported format: dd/mm/yyyy mc:type\tenum\ttype of the catalog Valid values: RECORD_RASTER / RECORD_3D / RECORD_DEM default: RECORD_DEM","keywords":"","version":"Next"},{"title":"Catalog Service 🗃️","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Services/catalog/dem-catalog","content":"Catalog Service 🗃️ Catalogue Service for the Web (CSW) is a standard for exposing a catalogue of geospatial records in XML on the Internet (over HTTP). The catalogue is made up of records that describe geospatial data, geospatial services (e.g. WMTS), and related resources. Request\tHTTP method binding(s)GetCapabilities\tGET (KVP) / POST (XML) / SOAP DescribeRecord\tGET (KVP) / POST (XML) / SOAP GetRecords\tGET (KVP) / POST (XML) / SOAP GetRecordById\tGET (KVP) / POST (XML) / SOAP GetRepositoryItem\tGET (KVP) GetDomain\tGET (KVP) / POST (XML) / SOAP","keywords":"","version":"Next"},{"title":"Getting started","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Guides/dem-getting-started","content":"","keywords":"","version":"Next"},{"title":"Step by step guide​","type":1,"pageTitle":"Getting started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Guides/dem-getting-started#step-by-step-guide","content":" The following guide will help you understand, Step-by-step the best practices of how to work with the Map Colonies DEM Catalog and how to consume mapping products in a dynamic way (materials might be changed or added)  ","version":"Next","tagName":"h2"},{"title":"Flow diagram​","type":1,"pageTitle":"Getting started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Guides/dem-getting-started#flow-diagram","content":"   ","version":"Next","tagName":"h2"},{"title":"Query CSW catalog (Step 1)​","type":1,"pageTitle":"Getting started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Guides/dem-getting-started#query-csw-catalog-step-1","content":" Query DEM CSW catalog service to find item(s) according to desired filter examples are here  Filter should be based on DEM profile  Example query based on mc:classification profile field  GetRecords Request POST Request url: '&lt;DEM-CATALOG-SERVICE_URL&gt;/csw' body (XML): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecords outputFormat=&quot;application/xml&quot; outputSchema=&quot;http://schema.mapcolonies.com/dem&quot; resultType=&quot;results&quot; service=&quot;CSW&quot; version=&quot;2.0.2&quot; startPosition=&quot;1&quot; maxRecords=&quot;200&quot; xmlns:mc=&quot;http://schema.mapcolonies.com/dem&quot; xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;csw:Query typeNames=&quot;csw:Record&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;csw:Constraint version=&quot;1.1.0&quot;&gt; &lt;ogc:Filter&gt; &lt;ogc:And&gt; &lt;ogc:PropertyIsEqualTo&gt; &lt;ogc:PropertyName&gt;mc:classification&lt;/ogc:PropertyName&gt; &lt;ogc:Literal&gt;5&lt;/ogc:Literal&gt; &lt;/ogc:PropertyIsEqualTo&gt; &lt;ogc:PropertyIsEqualTo&gt; &lt;ogc:PropertyName&gt;mc:productType&lt;/ogc:PropertyName&gt; &lt;ogc:Literal&gt;DTM&lt;/ogc:Literal&gt; &lt;/ogc:PropertyIsEqualTo&gt; &lt;/ogc:And&gt; &lt;/ogc:Filter&gt; &lt;/csw:Constraint&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt;   You will get GetRecords XML Response with product metadata.  Response example Search Results Example &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecordsResponse xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:dct=&quot;http://purl.org/dc/terms/&quot; xmlns:gmd=&quot;http://www.isotc211.org/2005/gmd&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:mc=&quot;http://schema.mapcolonies.com/dem&quot; xmlns:ows=&quot;http://www.opengis.net/ows&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; version=&quot;2.0.2&quot; xsi:schemaLocation=&quot;http://www.opengis.net/cat/csw/2.0.2 http://schemas.opengis.net/csw/2.0.2/CSW-discovery.xsd&quot;&gt; &lt;csw:SearchStatus timestamp=&quot;2022-03-27T06:45:54Z&quot; /&gt; &lt;csw:SearchResults numberOfRecordsMatched=&quot;2&quot; numberOfRecordsReturned=&quot;2&quot; nextRecord=&quot;0&quot; recordSchema=&quot;http://schema.mapcolonies.com/dem&quot; elementSet=&quot;full&quot;&gt; &lt;mc:MCDEMRecord&gt; &lt;mc:accuracyLEP90&gt;999.0&lt;/mc:accuracyLEP90&gt; &lt;mc:classification&gt;5&lt;/mc:classification&gt; &lt;mc:footprint&gt;{&quot;type&quot;:&quot;Polygon&quot;,&quot;coordinates&quot;:[[[31.2603,33.4345],[31.2603,34.4888],[32.3353,34.4888],[32.3353,33.4345],[31.2603,33.4345]]]}&lt;/mc:footprint&gt; &lt;mc:geographicArea&gt;ישראל&lt;/mc:geographicArea&gt; &lt;mc:maxHorizontalAccuracyCE90&gt;999.0&lt;/mc:maxHorizontalAccuracyCE90&gt; &lt;mc:id&gt;c2bbeeee-6081-4e69-918c-287f48ea244d&lt;/mc:id&gt; &lt;mc:links scheme=&quot;WMTS_LAYER&quot; name=&quot;&quot; description=&quot;&quot;&gt;http://dem-server/15211-65da-4523-9d6f-08016ad51b0d....&lt;/mc:links&gt; &lt;mc:producerName&gt;DAVID&lt;/mc:producerName&gt; &lt;mc:productBBox&gt;31.2603,33.4345,32.3353,34.4888&lt;/mc:productBBox&gt; &lt;mc:productId&gt;c2bbeeee-6081-4e69-918c-287f48ea244d&lt;/mc:productId&gt; &lt;mc:productName&gt;מודל פריז&lt;/mc:productName&gt; &lt;mc:productType&gt;DTM&lt;/mc:productType&gt; &lt;mc:productVersion&gt;1&lt;/mc:productVersion&gt; &lt;mc:productionMethod&gt;photogrammetric&lt;/mc:productionMethod&gt; &lt;mc:productionSystem&gt;P-30&lt;/mc:productionSystem&gt; &lt;mc:productionSystemVersion&gt;1&lt;/mc:productionSystemVersion&gt; &lt;mc:region&gt;צפון&lt;/mc:region&gt; &lt;mc:sensors&gt;sensor1&lt;/mc:sensors&gt; &lt;mc:imagingTimeEndUTC&gt;2022-06-15T10:39:00Z&lt;/mc:imagingTimeEndUTC&gt; &lt;mc:imagingTimeBeginUTC&gt;2022-06-15T10:39:00Z&lt;/mc:imagingTimeBeginUTC&gt; &lt;mc:SRS&gt;4567&lt;/mc:SRS&gt; &lt;mc:SRSName&gt;WGS24GEO&lt;/mc:SRSName&gt; &lt;mc:type&gt;RECORD_DEM&lt;/mc:type&gt; &lt;ows:BoundingBox crs=&quot;urn:x-ogc:def:crs:EPSG:6.11:4326&quot; dimensions=&quot;2&quot;&gt; &lt;ows:LowerCorner&gt;33.4345 31.2603&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;34.4888 32.3353&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/mc:MCDEMRecord&gt; &lt;mc:MCDEMRecord&gt; &lt;mc:accuracyLEP90&gt;999.0&lt;/mc:accuracyLEP90&gt; &lt;mc:classification&gt;5&lt;/mc:classification&gt; &lt;mc:creationDateUTC&gt;2022-06-15&lt;/mc:creationDateUTC&gt; &lt;mc:description&gt;srtm100&lt;/mc:description&gt; &lt;mc:footprint&gt;{&quot;type&quot;:&quot;Polygon&quot;,&quot;coordinates&quot;:[[[35.2670012825,32.5856881598],[35.2670012825,32.6300363309],[35.3105702702,32.6300363309],[35.3105702702,32.5856881598],[35.2670012825,32.5856881598]]]}&lt;/mc:footprint&gt; &lt;mc:geographicArea&gt;North&lt;/mc:geographicArea&gt; &lt;mc:maxHorizontalAccuracyCE90&gt;999.0&lt;/mc:maxHorizontalAccuracyCE90&gt; &lt;mc:id&gt;11111111-1111-1111-1111-111111111111&lt;/mc:id&gt; &lt;mc:links scheme=&quot;TERRAIN_QMESH&quot; name=&quot;&quot; description=&quot;&quot;&gt;http://terrain-server.com/terrains/srtm100&lt;/mc:links&gt; &lt;mc:producerName&gt;MIKI&lt;/mc:producerName&gt; &lt;mc:productBBox&gt;35.2670012825,32.5856881598,35.3105702702,32.6300363309&lt;/mc:productBBox&gt; &lt;mc:productId&gt;11111111-1111-1111-1111-111111111111&lt;/mc:productId&gt; &lt;mc:productName&gt;srtm100&lt;/mc:productName&gt; &lt;mc:productType&gt;DTM&lt;/mc:productType&gt; &lt;mc:productVersion&gt;1&lt;/mc:productVersion&gt; &lt;mc:productionMethod&gt;&lt;/mc:productionMethod&gt; &lt;mc:productionSystem&gt;&lt;/mc:productionSystem&gt; &lt;mc:productionSystemVersion&gt;1&lt;/mc:productionSystemVersion&gt; &lt;mc:region&gt;Israel&lt;/mc:region&gt; &lt;mc:sensors&gt;UNDEFINED&lt;/mc:sensors&gt; &lt;mc:imagingTimeEndUTC&gt;2022-06-15&lt;/mc:imagingTimeEndUTC&gt; &lt;mc:imagingTimeBeginUTC&gt;2022-06-15&lt;/mc:imagingTimeBeginUTC&gt; &lt;mc:SRS&gt;4326&lt;/mc:SRS&gt; &lt;mc:SRSName&gt;WGS84GEO&lt;/mc:SRSName&gt; &lt;mc:type&gt;RECORD_DEM&lt;/mc:type&gt; &lt;ows:BoundingBox crs=&quot;urn:x-ogc:def:crs:EPSG:6.11:4326&quot; dimensions=&quot;2&quot;&gt; &lt;ows:LowerCorner&gt;32.5856881598 35.2670012825&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;32.6300363309 35.3105702702&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/mc:MCDEMRecord&gt; &lt;/csw:SearchResults&gt; &lt;/csw:GetRecordsResponse&gt;   info Authentication must be integrated in order to communicate with Catalog services. See the principles here  ","version":"Next","tagName":"h2"},{"title":"Get DEM metadata (Step 2)​","type":1,"pageTitle":"Getting started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Guides/dem-getting-started#get-dem-metadata-step-2","content":" In the Response, look for desired data according to profile definition.  ","version":"Next","tagName":"h2"},{"title":"Get terrain provider URI (Step 2.1, optional)​","type":1,"pageTitle":"Getting started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Guides/dem-getting-started#get-terrain-provider-uri-step-21-optional","content":" In the Response, look for  Extract link for terrain provider &lt;mc:links scheme=&quot;TERRAIN_QMESH&quot; name=&quot;srtm100&quot;&gt; http://terrain-server.com/terrains/srtm100 &lt;/mc:links&gt;   info You should extract the &lt;mc:links&gt; element value as TERRAIN_URL variable, which is a terrain provider consumption URL for the following steps.  ","version":"Next","tagName":"h2"},{"title":"Using catalog data (Step 3)​","type":1,"pageTitle":"Getting started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Guides/dem-getting-started#using-catalog-data-step-3","content":" In the future, you'll be able to export catalog data( elevation raw data in TIFF format ) after filtering.  ","version":"Next","tagName":"h2"},{"title":"Construct Client (Step 3.1)​","type":1,"pageTitle":"Getting started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Guides/dem-getting-started#construct-client-step-31","content":" Now, after you got all product metadata that you need by querying our Catalog, lets actually use it in your client application.  warning Below examples are based on Pseudo code, you will have to adapt it in your own application to make it work.  ","version":"Next","tagName":"h2"},{"title":"Cesium​","type":1,"pageTitle":"Getting started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Guides/dem-getting-started#cesium","content":" info The minimum required version for cesium is v84.  // **Optional** add to Cesium terrain provider in order to clamp 3d models to the ground or investigate terrain viewer.terrainProvider = new Cesium.TerrainProvider({ url: new Cesium.Resource({ url: &quot;&lt;TERRAIN_URL&gt;&quot;, queryParameters: { &quot;token&quot;: &quot;&lt;token&gt;&quot;, }, }), }); ...   Replace &lt;TERRAIN_URL&gt; with the URL link that you got from Step 2.1 (optional).  Replace &lt;token&gt; with the token you have. ","version":"Next","tagName":"h3"},{"title":"Obligations","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/obligations","content":"","keywords":"","version":"Next"},{"title":"Application Startup​","type":1,"pageTitle":"Obligations","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/obligations#application-startup","content":" When your application is loaded or refreshed you are required make a request to our catalogue services in order to fetch up-to-date information. Caching the request may result in errors due to changed metadata and links, new products or even deleted products that don't exist anymore.  ","version":"Next","tagName":"h3"},{"title":"Catalog items​","type":1,"pageTitle":"Obligations","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/obligations#catalog-items","content":" In order to use our services you are required to go through the catalogue. The catalogue is the gateway to many of our services, it details the available products and product metadata for a particular domain.  ","version":"Next","tagName":"h3"},{"title":"Hardcoded Links​","type":1,"pageTitle":"Obligations","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/obligations#hardcoded-links","content":" We require that you fetch and extract any link that is available in our catalogue services through your code. Any link that isn't available through the catalogue service may be held as an easily configurable parameter.  warning We hold the right to change any link that is available through our catalogue services at any time.  ","version":"Next","tagName":"h3"},{"title":"Basemaps​","type":1,"pageTitle":"Obligations","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/obligations#basemaps","content":" At application startup there is usually a set of default Raster layers that are displayed. The productId and productType for each layer should be held as an easily configurable list of parameters in case you want to use different layers in the future.  We also recommend that the layers are loaded in the same order as described in the list for easy swapping.  ","version":"Next","tagName":"h3"},{"title":"Pagination​","type":1,"pageTitle":"Obligations","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/obligations#pagination","content":" Some of our services return multiple results per request, according to filter parameters, and due to geographic entities the returned payload may be very large. In order to solve this issue we implement pagination using special parameters.  You should be using pagination in order to control the amount of results returned and easily split a request that yields a huge amount of data or records in to multiple requests. Read more in the documentation page for each service in order to understand how to use this feature. ","version":"Next","tagName":"h3"},{"title":"Frequently Asked Questions","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/osm-nominatim-faq","content":"","keywords":"","version":"Next"},{"title":"API Results​","type":1,"pageTitle":"Frequently Asked Questions","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/osm-nominatim-faq#api-results","content":" 1. The address of my search results contains far-away places that don't belong there.​  Nominatim computes the address from two sources in the OpenStreetMap data: from administrative boundaries and from place nodes. Boundaries are the more useful source. They precisely describe an area. So it is very clear for Nominatim if a point belongs to an area or not. Place nodes are more complicated. These are only points without any precise extent. So Nominatim has to take a guess and assume that an address belongs to the closest place node it can find. In an ideal world, Nominatim would not need the place nodes but there are many places on earth where there are no precise boundaries available for all parts that make up an address. This is in particular true for the more local address parts, like villages and suburbs. Therefore it is not possible to completely dismiss place nodes. And sometimes they sneak in where they don't belong.  As a OpenStreetMap mapper, you can improve the situation in two ways: if you see a place node for which already an administrative area exists, then you should link the two by adding the node with a 'label' role to the boundary relation. If there is no administrative area, you can add the approximate extent of the place and tag it place=&quot;something&quot; as well.  2. When doing reverse search, the address details have parts that don't contain the point I was looking up.​  There is a common misconception how the reverse API call works in Nominatim. Reverse does not give you the address of the point you asked for. Reverse returns the closest object to the point you asked for and then returns the address of that object. Now, if you are close to a border, then the closest object may be across that border. When Nominatim then returns the address, it contains the county/state/country across the border.  3. I get different counties/states/countries when I change the zoom parameter in the reverse query. How is that possible?​  This is basically the same problem as in the previous answer. The zoom level influences at which search rank Nominatim starts looking for the closest object. So the closest house number maybe on one side of the border while the closest street is on the other. As the address details contain the address of the closest object found, you might sometimes get one result, sometimes the other for the closest point.  4. Can you return the continent?​  Nominatim assigns each map feature one country. Those outside any administrative boundaries are assigned a special no-country. Continents or other super-national administrations (e.g. European Union, NATO, Custom unions) are not supported. ","version":"Next","tagName":"h2"},{"title":"Elevation Service ⛰️","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Services/elevation/info","content":"","keywords":"","version":"Next"},{"title":"Purpose​","type":1,"pageTitle":"Elevation Service ⛰️","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Services/elevation/info#purpose","content":" Allows users to request elevation(height) information at a given location(s)/position(s) in [lon,lat] format with/without extra data eg. resolution, DTM/DSM, etc.  ","version":"Next","tagName":"h2"},{"title":"Terminology​","type":1,"pageTitle":"Elevation Service ⛰️","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Services/elevation/info#terminology","content":" ","version":"Next","tagName":"h2"},{"title":"Product types​","type":1,"pageTitle":"Elevation Service ⛰️","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Services/elevation/info#product-types","content":" Elevation info might be returned from following material types:  DTM - terrain materials.DSM - surface materials.MIXED - according to most detailed (best resolution) materials.  ","version":"Next","tagName":"h3"},{"title":"Confidence level​","type":1,"pageTitle":"Elevation Service ⛰️","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Services/elevation/info#confidence-level","content":" Calculated for each product and is represented by two values:  resolutionMeter - precision on the horizontal plane (may be interpolated), meaning that for every resolutionMeter meters there is a value in the meshabsoluteAccuracyLEP90 - each height measurement has a 90% chance to have a deviation of at most x meters from the given value (between height - absoluteAccuracyLEP90 and height + absoluteAccuracyLEP90)  It is extremely important to provide all of the information about the product which the height was extracted from for each point you query.  info When using the API to display the heights, we require you to provide the productType, resolutionMeter and absoluteAccuracyLEP90 values as well.  ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Elevation Service ⛰️","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Services/elevation/info#usage","content":" warning - You may request values for up to 250 points at once. In case you have more than that, you should divide it into bulks.- Coordinates order is not preserved. - You will need an API token as part of the service authentication. - When getting a time-out in a result of request, please try same API call again.  ","version":"Next","tagName":"h2"},{"title":"API parameters (payload) explanation​","type":1,"pageTitle":"Elevation Service ⛰️","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Services/elevation/info#api-parameters-payload-explanation","content":" The structure (JSON schema) is as follows:  JSON Schema of Request { &quot;positions&quot;: [ { &quot;longitude&quot;: 0, &quot;latitude&quot;: 0 } ], &quot;productType&quot;: &quot;MIXED&quot; }   🔴 positions (required)​  Array of geographical coordinates Limited up to 250 coordinates  🟡 productType (optional, MIXED is default)​  String one of DTM | DSM | MIXED  ","version":"Next","tagName":"h3"},{"title":"API response explanation​","type":1,"pageTitle":"Elevation Service ⛰️","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/DEM/Services/elevation/info#api-response-explanation","content":" The structure (JSON schema) is as follows:  JSON Schema of Response { &quot;data&quot;: [ { &quot;longitude&quot;: 0, &quot;latitude&quot;: 0, &quot;height&quot;: 3, &quot;productId&quot;: &quot;world_terrain&quot; } ], &quot;products&quot;: { &quot;world_terrain&quot;: { &quot;productType&quot;: &quot;DTM&quot;, &quot;resolutionMeter&quot;: 30, &quot;absoluteAccuracyLEP90&quot;: 17, &quot;updateDate&quot;: &quot;2019-08-24T14:15:22Z&quot; } } }   In the response, each point will have the productId field as a reference to the product it was returned from.  Each product has the following information:  productType - the type of the materialresolutionMeter - precision on the horizontal plane, see confidence levelabsoluteAccuracyLEP90 - precision on the z axis, see confidence levelupdateDate - date when the product was updated ","version":"Next","tagName":"h3"},{"title":"Address lookup","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-AddressLookup-API","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Address lookup","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-AddressLookup-API#parameters","content":" The lookup API has the following format:   &lt;VECTOR-NOMINATIM-SERVICE_URL&gt;/lookup?osm_ids=[N|W|R]&lt;value&gt;,…,…,&amp;&lt;params&gt;   osm_ids is mandatory and must contain a comma-separated list of OSM ids each prefixed with its type, one of node(N), way(W) or relation(R). Up to 50 ids can be queried at the same time.  Additional optional parameters are explained below.  ","version":"Next","tagName":"h2"},{"title":"Output format​","type":1,"pageTitle":"Address lookup","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-AddressLookup-API#output-format","content":" format=[xml|json|jsonv2|geojson|geocodejson]  See Place Output Formats for details on each format. (Default: xml)  json_callback=&lt;string&gt;  Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.  ","version":"Next","tagName":"h3"},{"title":"Output details​","type":1,"pageTitle":"Address lookup","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-AddressLookup-API#output-details","content":" addressdetails=[0|1]  Include a breakdown of the address into elements. (Default: 0)  extratags=[0|1]  Include additional information in the result if available, e.g. wikipedia link, opening hours. (Default: 0)  namedetails=[0|1]  Include a list of alternative names in the results. These may include language variants, references, operator and brand. (Default: 0)  ","version":"Next","tagName":"h3"},{"title":"Language of results​","type":1,"pageTitle":"Address lookup","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-AddressLookup-API#language-of-results","content":" accept-language=&lt;browser language string&gt;  Preferred language order for showing search results, overrides the value specified in the &quot;Accept-Language&quot; HTTP header. Either use a standard RFC2616 accept-language string or a simple comma-separated list of language codes.  ","version":"Next","tagName":"h3"},{"title":"Polygon output​","type":1,"pageTitle":"Address lookup","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-AddressLookup-API#polygon-output","content":" polygon_geojson=1polygon_kml=1polygon_svg=1polygon_text=1  Output geometry of results as a GeoJSON, KML, SVG or WKT. Only one of these options can be used at a time. (Default: 0)  polygon_threshold=0.0  Return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result. (Default: 0.0)  ","version":"Next","tagName":"h3"},{"title":"Other​","type":1,"pageTitle":"Address lookup","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-AddressLookup-API#other","content":" email=&lt;valid email address&gt;  If you are making large numbers of request please include an appropriate email address to identify your requests (only relevant when using the service in the internet).  debug=[0|1]  Output assorted developer debug information. Data on internals of Nominatim's &quot;Search Loop&quot; logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format. (Default: 0)  ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Address lookup","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-AddressLookup-API#examples","content":" XML​  &lt;VECTOR-NOMINATIM-SERVICE_URL&gt;/lookup?osm_ids=R7116646,W551414758,N4976386821  Lookup Results in XML Format &lt;lookupresults timestamp=&quot;Tue, 24 Jan 23 06:41:19 +0000&quot; attribution=&quot;Data © OpenStreetMap contributors, ODbL 1.0. http://www.openstreetmap.org/copyright&quot; querystring=&quot;R7116646,W551414758,N4976386821&quot; more_url=&quot;&quot;&gt; &lt;place place_id=&quot;308733271&quot; osm_type=&quot;relation&quot; osm_id=&quot;7116646&quot; place_rank=&quot;30&quot; address_rank=&quot;30&quot; boundingbox=&quot;31.7805304,31.7816054,35.2033623,35.2046501&quot; lat=&quot;31.78107505&quot; lon=&quot;35.20375223509767&quot; display_name=&quot;Supreme Court of Israel, Rotschild, Kiryat HaMemshalah, Jerusalem, Jerusalem Subdistrict, Jerusalem District, 9432301, Israel&quot; class=&quot;amenity&quot; type=&quot;courthouse&quot; importance=&quot;0.24232784765904&quot;&gt; &lt;amenity&gt;Supreme Court of Israel&lt;/amenity&gt; &lt;road&gt;Rotschild&lt;/road&gt; &lt;suburb&gt;Kiryat HaMemshalah&lt;/suburb&gt; &lt;city&gt;Jerusalem&lt;/city&gt; &lt;state_district&gt;Jerusalem Subdistrict&lt;/state_district&gt; &lt;state&gt;Jerusalem District&lt;/state&gt; &lt;ISO3166-2-lvl4&gt;IL-JM&lt;/ISO3166-2-lvl4&gt; &lt;postcode&gt;9432301&lt;/postcode&gt; &lt;country&gt;Israel&lt;/country&gt; &lt;country_code&gt;il&lt;/country_code&gt; &lt;/place&gt; &lt;place place_id=&quot;222933834&quot; osm_type=&quot;way&quot; osm_id=&quot;551414758&quot; place_rank=&quot;30&quot; address_rank=&quot;30&quot; boundingbox=&quot;31.7760076,31.776938,35.2048741,35.2059629&quot; lat=&quot;31.776474049999997&quot; lon=&quot;35.20538295033272&quot; display_name=&quot;Knesset, Berman Square, Kiryat HaMemshalah, Jerusalem, Jerusalem Subdistrict, Jerusalem District, 9107202, Israel&quot; class=&quot;office&quot; type=&quot;government&quot; importance=&quot;0.34176259084946&quot;&gt; &lt;office&gt;Knesset&lt;/office&gt; &lt;road&gt;Berman Square&lt;/road&gt; &lt;suburb&gt;Kiryat HaMemshalah&lt;/suburb&gt; &lt;city&gt;Jerusalem&lt;/city&gt; &lt;state_district&gt;Jerusalem Subdistrict&lt;/state_district&gt; &lt;state&gt;Jerusalem District&lt;/state&gt; &lt;ISO3166-2-lvl4&gt;IL-JM&lt;/ISO3166-2-lvl4&gt; &lt;postcode&gt;9107202&lt;/postcode&gt; &lt;country&gt;Israel&lt;/country&gt; &lt;country_code&gt;il&lt;/country_code&gt; &lt;/place&gt; &lt;place place_id=&quot;55796886&quot; osm_type=&quot;node&quot; osm_id=&quot;4976386821&quot; place_rank=&quot;30&quot; address_rank=&quot;30&quot; boundingbox=&quot;32.0695874,32.0696874,34.7845255,34.7846255&quot; lat=&quot;32.0696374&quot; lon=&quot;34.7845755&quot; display_name=&quot;Lehamim, 103, HaHashmonaim, Sarona Gardens, Tel Aviv, Bitsaron, Tel Aviv-Yafo, Tel Aviv Subdistrict, Tel Aviv District, 6713203, Israel&quot; class=&quot;shop&quot; type=&quot;bakery&quot; importance=&quot;9.9999999999545E-6&quot;&gt; &lt;shop&gt;Lehamim&lt;/shop&gt; &lt;house_number&gt;103&lt;/house_number&gt; &lt;road&gt;HaHashmonaim&lt;/road&gt; &lt;suburb&gt;Bitsaron&lt;/suburb&gt; &lt;residential&gt;Tel Aviv&lt;/residential&gt; &lt;city&gt;Tel Aviv-Yafo&lt;/city&gt; &lt;state_district&gt;Tel Aviv Subdistrict&lt;/state_district&gt; &lt;state&gt;Tel Aviv District&lt;/state&gt; &lt;ISO3166-2-lvl4&gt;IL-TA&lt;/ISO3166-2-lvl4&gt; &lt;postcode&gt;6713203&lt;/postcode&gt; &lt;country&gt;Israel&lt;/country&gt; &lt;country_code&gt;il&lt;/country_code&gt; &lt;/place&gt; &lt;/lookupresults&gt;   JSON with extratags​  /details.html?osmtype=W&amp;osmid=44296789  Lookup Results in JSON Format [ { &quot;place_id&quot;: 119518296, &quot;licence&quot;: &quot;Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright&quot;, &quot;osm_type&quot;: &quot;way&quot;, &quot;osm_id&quot;: 44296789, &quot;boundingbox&quot;: [ &quot;31.7775552&quot;, &quot;31.777817&quot;, &quot;35.2019221&quot;, &quot;35.203181&quot; ], &quot;lat&quot;: &quot;31.777682300000002&quot;, &quot;lon&quot;: &quot;35.202551594501585&quot;, &quot;display_name&quot;: &quot;Ministry of Finance, Rupin, Kiryat HaMemshalah, Jerusalem, Jerusalem Subdistrict, Jerusalem District, 9218812, Israel&quot;, &quot;class&quot;: &quot;office&quot;, &quot;type&quot;: &quot;government&quot;, &quot;importance&quot;: 0.4438713827293206, &quot;address&quot;: { &quot;office&quot;: &quot;Ministry of Finance&quot;, &quot;road&quot;: &quot;Rupin&quot;, &quot;suburb&quot;: &quot;Kiryat HaMemshalah&quot;, &quot;city&quot;: &quot;Jerusalem&quot;, &quot;state_district&quot;: &quot;Jerusalem Subdistrict&quot;, &quot;state&quot;: &quot;Jerusalem District&quot;, &quot;ISO3166-2-lvl4&quot;: &quot;IL-JM&quot;, &quot;postcode&quot;: &quot;9218812&quot;, &quot;country&quot;: &quot;Israel&quot;, &quot;country_code&quot;: &quot;il&quot; }, &quot;extratags&quot;: { &quot;wikidata&quot;: &quot;Q1707870&quot;, &quot;government&quot;: &quot;ministry&quot;, &quot;building:levels&quot;: &quot;7&quot; } } ]  ","version":"Next","tagName":"h2"},{"title":"Output formats","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-output-API","content":"","keywords":"","version":"Next"},{"title":"JSON​","type":1,"pageTitle":"Output formats","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-output-API#json","content":" The JSON format returns an array of places (for search and lookup) or a single place (for reverse) of the following format:  JSON { &quot;place_id&quot;: &quot;100149&quot;, &quot;licence&quot;: &quot;Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright&quot;, &quot;osm_type&quot;: &quot;node&quot;, &quot;osm_id&quot;: &quot;107775&quot;, &quot;boundingbox&quot;: [&quot;51.3473219&quot;, &quot;51.6673219&quot;, &quot;-0.2876474&quot;, &quot;0.0323526&quot;], &quot;lat&quot;: &quot;51.5073219&quot;, &quot;lon&quot;: &quot;-0.1276474&quot;, &quot;display_name&quot;: &quot;London, Greater London, England, SW1A 2DU, United Kingdom&quot;, &quot;class&quot;: &quot;place&quot;, &quot;type&quot;: &quot;city&quot;, &quot;importance&quot;: 0.9654895765402, &quot;icon&quot;: &quot;&lt;VECTOR-NOMINATIM-SERVICE_URL&gt;/images/mapicons/poi_place_city.p.20.png&quot;, &quot;address&quot;: { &quot;city&quot;: &quot;London&quot;, &quot;state_district&quot;: &quot;Greater London&quot;, &quot;state&quot;: &quot;England&quot;, &quot;ISO3166-2-lvl4&quot;: &quot;GB-ENG&quot;, &quot;postcode&quot;: &quot;SW1A 2DU&quot;, &quot;country&quot;: &quot;United Kingdom&quot;, &quot;country_code&quot;: &quot;gb&quot; }, &quot;extratags&quot;: { &quot;capital&quot;: &quot;yes&quot;, &quot;website&quot;: &quot;http://www.london.gov.uk&quot;, &quot;wikidata&quot;: &quot;Q84&quot;, &quot;wikipedia&quot;: &quot;en:London&quot;, &quot;population&quot;: &quot;8416535&quot; } }   The possible fields are:  place_id - reference to the Nominatim internal database ID (see notes)osm_type, osm_id - reference to the OSM object (see notes)boundingbox - area of corner coordinates (see notes)lat, lon - latitude and longitude of the centroid of the objectdisplay_name - full comma-separated addressclass, type - key and value of the main OSM tagimportance - computed importance rankicon - link to class icon (if available)address - dictionary of address details (only with addressdetails=1,see notes)extratags - dictionary with additional useful tags like website or maxspeed (only with extratags=1)namedetails - dictionary with full list of available names including ref etc.geojson, svg, geotext, geokml - full geometry (only with the appropriate polygon_* parameter)  ","version":"Next","tagName":"h2"},{"title":"JSONv2​","type":1,"pageTitle":"Output formats","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-output-API#jsonv2","content":" This is the same as the JSON format with two changes:  class renamed to categoryadditional field place_rank with the search rank of the object  ","version":"Next","tagName":"h2"},{"title":"GeoJSON​","type":1,"pageTitle":"Output formats","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-output-API#geojson","content":" This format follows the RFC7946. Every feature includes a bounding box (bbox).  The properties object has the following fields:  place_id - reference to the Nominatim internal database ID (see notes)osm_type, osm_id - reference to the OSM object (see notes)category, type - key and value of the main OSM tagdisplay_name - full comma-separated addressplace_rank - class search rankimportance - computed importance rankicon - link to class icon (if available)address - dictionary of address details (only with addressdetails=1,see notes)extratags - dictionary with additional useful tags like website or maxspeed(only with extratags=1)namedetails - dictionary with full list of available names including ref etc.  Use polygon_geojson to output the full geometry of the object instead of the centroid.  ","version":"Next","tagName":"h2"},{"title":"GeocodeJSON​","type":1,"pageTitle":"Output formats","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-output-API#geocodejson","content":" The GeocodeJSON format follows theGeocodeJSON spec 0.1.0. The following feature attributes are implemented:  osm_type, osm_id - reference to the OSM object (unofficial extension, see notes)type - the 'address level' of the object ('house', 'street', district, city,county, state, country, locality)osm_key- key of the main tag of the OSM object (e.g. boundary, highway, amenity)osm_value - value of the main tag of the OSM object (e.g. residential, restaurant)label - full comma-separated addressname - localised name of the placehousenumber, street, locality, district, postcode, city,county, state, country - provided when it can be determined from the addressadmin - list of localised names of administrative boundaries (only with addressdetails=1)  Use polygon_geojson to output the full geometry of the object instead of the centroid.  ","version":"Next","tagName":"h2"},{"title":"XML​","type":1,"pageTitle":"Output formats","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-output-API#xml","content":" The XML response returns one or more place objects in slightly different formats depending on the API call.  ","version":"Next","tagName":"h2"},{"title":"Reverse​","type":1,"pageTitle":"Output formats","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-output-API#reverse","content":" Reverse GeoCode Response in XML Format &lt;reversegeocode timestamp=&quot;Sat, 11 Aug 18 11:53:21 +0000&quot; attribution=&quot;Data © OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright&quot; querystring=&quot;lat=48.400381&amp;lon=11.745876&amp;zoom=5&amp;format=xml&quot;&gt; &lt;result place_id=&quot;179509537&quot; osm_type=&quot;relation&quot; osm_id=&quot;2145268&quot; ref=&quot;BY&quot; place_rank=&quot;15&quot; address_rank=&quot;15&quot; lat=&quot;48.9467562&quot; lon=&quot;11.4038717&quot; boundingbox=&quot;47.2701114,50.5647142,8.9763497,13.8396373&quot;&gt; Bavaria, Germany &lt;/result&gt; &lt;addressparts&gt; &lt;state&gt;Bavaria&lt;/state&gt; &lt;ISO3166-2-lvl4&gt;DE-BY&lt;/ISO3166-2-lvl4&gt; &lt;country&gt;Germany&lt;/country&gt; &lt;country_code&gt;de&lt;/country_code&gt; &lt;/addressparts&gt; &lt;extratags&gt; &lt;tag key=&quot;place&quot; value=&quot;state&quot;/&gt; &lt;tag key=&quot;wikidata&quot; value=&quot;Q980&quot;/&gt; &lt;tag key=&quot;wikipedia&quot; value=&quot;de:Bayern&quot;/&gt; &lt;tag key=&quot;population&quot; value=&quot;12520000&quot;/&gt; &lt;tag key=&quot;name:prefix&quot; value=&quot;Freistaat&quot;/&gt; &lt;/extratags&gt; &lt;/reversegeocode&gt;   The attributes of the outer reversegeocode element return generic information about the query, including the time when the response was sent (in UTC), attribution to OSM and the original querystring.  The place information can be found in the result element. The attributes of that element contain:  place_id - reference to the Nominatim internal database ID (see notes)osm_type, osm_id - reference to the OSM object (see notes)ref - content of ref tag if it existslat, lon - latitude and longitude of the centroid of the objectboundingbox - comma-separated list of corner coordinates (see notes)  The full address of the result can be found in the content of theresult element as a comma-separated list.  Additional information requested with addressdetails=1, extratags=1 andnamedetails=1 can be found in extra elements.  ","version":"Next","tagName":"h3"},{"title":"Search and Lookup​","type":1,"pageTitle":"Output formats","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-output-API#search-and-lookup","content":" Search Results &lt;searchresults timestamp=&quot;Sat, 11 Aug 18 11:55:35 +0000&quot; attribution=&quot;Data © OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright&quot; querystring=&quot;london&quot; polygon=&quot;false&quot; exclude_place_ids=&quot;100149&quot; more_url=&quot;&lt;VECTOR-NOMINATIM-SERVICE_URL&gt;/search.php?q=london&amp;addressdetails=1&amp;extratags=1&amp;exclude_place_ids=100149&amp;format=xml&amp;accept-language=en-US%2Cen%3Bq%3D0.7%2Cde%3Bq%3D0.3&quot;&gt; &lt;place place_id=&quot;100149&quot; osm_type=&quot;node&quot; osm_id=&quot;107775&quot; place_rank=&quot;15&quot; address_rank=&quot;15&quot; boundingbox=&quot;51.3473219,51.6673219,-0.2876474,0.0323526&quot; lat=&quot;51.5073219&quot; lon=&quot;-0.1276474&quot; display_name=&quot;London, Greater London, England, SW1A 2DU, United Kingdom&quot; class=&quot;place&quot; type=&quot;city&quot; importance=&quot;0.9654895765402&quot; icon=&quot;&lt;VECTOR-NOMINATIM-SERVICE_URL&gt;/images/mapicons/poi_place_city.p.20.png&quot;&gt; &lt;extratags&gt; &lt;tag key=&quot;capital&quot; value=&quot;yes&quot;/&gt; &lt;tag key=&quot;website&quot; value=&quot;http://www.london.gov.uk&quot;/&gt; &lt;tag key=&quot;wikidata&quot; value=&quot;Q84&quot;/&gt; &lt;tag key=&quot;wikipedia&quot; value=&quot;en:London&quot;/&gt; &lt;tag key=&quot;population&quot; value=&quot;8416535&quot;/&gt; &lt;/extratags&gt; &lt;city&gt;London&lt;/city&gt; &lt;state_district&gt;Greater London&lt;/state_district&gt; &lt;state&gt;England&lt;/state&gt; &lt;ISO3166-2-lvl4&gt;GB-ENG&lt;/ISO3166-2-lvl4&gt; &lt;postcode&gt;SW1A 2DU&lt;/postcode&gt; &lt;country&gt;United Kingdom&lt;/country&gt; &lt;country_code&gt;gb&lt;/country_code&gt; &lt;/place&gt; &lt;/searchresults&gt;   The attributes of the outer searchresults or lookupresults element return generic information about the query:  timestamp - UTC time when the response was sentattribution - OSM licensing informationquerystring - original querypolygon - true when extra geometry information was requestedexclude_place_ids - IDs of places that should be ignored in a follow-up requestmore_url - search call that will yield additional results for the query just sent  The place information can be found in the place elements, of which there may be more than one. The attributes of that element contain:  place_id - reference to the Nominatim internal database ID (see notes)osm_type, osm_id - reference to the OSM object (see notes)ref - content of ref tag if it existslat, lon - latitude and longitude of the centroid of the objectboundingbox - comma-separated list of corner coordinates (see notes)place_rank - class search rankaddress_rank - place address rankdisplay_name - full comma-separated addressclass, type - key and value of the main OSM tagimportance - computed importance rankicon - link to class icon (if available)  When addressdetails=1 is requested, the localised address parts appear as subelements with the type of the address part.  Additional information requested with extratags=1 and namedetails=1 can be found in extra elements as sub-element of extratags and namedetailsrespectively.  ","version":"Next","tagName":"h3"},{"title":"Notes on field values​","type":1,"pageTitle":"Output formats","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-output-API#notes-on-field-values","content":" ","version":"Next","tagName":"h2"},{"title":"place_id is not a persistent id​","type":1,"pageTitle":"Output formats","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-output-API#place_id-is-not-a-persistent-id","content":" The place_id is an internal identifier that is assigned data is imported into a Nominatim database. The same OSM object will have a different value on another server. It may even change its ID on the same server when it is removed and reimported while updating the database with fresh OSM data. It is thus not useful to treat it as permanent for later use.  The combination osm_type+osm_id is slightly better but remember in OpenStreetMap mappers can delete, split, recreate places (and those get a new osm_id), there is no link between those old and new ids. Places can also change their meaning without changing their osm_id, e.g. when a restaurant is retagged as supermarket.  If you need an ID that is consistent over multiple installations of Nominatim, then you should use the combination of osm_type+osm_id+class.  ","version":"Next","tagName":"h3"},{"title":"OSM reference​","type":1,"pageTitle":"Output formats","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-output-API#osm-reference","content":" Nominatim may sometimes return special objects that do not correspond directly to an object in OpenStreetMap. These are:  Postcodes. Nominatim returns an postcode point created from all mapped postcodes of the same name. The class and type of these object is place=postcdode. No osm_type and osm_id are included in the result.Housenumber interpolations. Nominatim returns a single interpolated housenumber from the interpolation way. The class and type are place=houseand osm_type and osm_id correspond to the interpolation way in OSM.TIGER housenumber. Nominatim returns a single interpolated housenumber from the TIGER data. The class and type are place=houseand osm_type and osm_id correspond to the street mentioned in the result.  Please note that the osm_type and osm_id returned may be changed in the future. You should not expect to only find node, way and relation for the type.  ","version":"Next","tagName":"h3"},{"title":"boundingbox​","type":1,"pageTitle":"Output formats","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-output-API#boundingbox","content":" Comma separated list of min latitude, max latitude, min longitude, max longitude. The whole planet would be -90,90,-180,180.  Can be used to pan and center the map on the result, for example with leafletjs mapping librarymap.fitBounds([[bbox[0],bbox[2]],[bbox[1],bbox[3]]], {padding: [20, 20], maxzoom: 16});  Bounds crossing the antimeridian have a min latitude -180 and max latitude 180, essentially covering the entire planet.  ","version":"Next","tagName":"h3"},{"title":"addressdetails​","type":1,"pageTitle":"Output formats","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-output-API#addressdetails","content":" Address details in the xml and json formats return a list of names together with a designation label. Per default the following labels may appear:  continentcountry, country_coderegion, state, state_district, county, ISO3166-2-lvl&lt;admin_level&gt;municipality, city, town, villagecity_district, district, borough, suburb, subdivisionhamlet, croft, isolated_dwellingneighbourhood, allotments, quartercity_block, residential, farm, farmyard, industrial, commercial, retailroadhouse_number, house_nameemergency, historic, military, natural, landuse, place, railway, man_made, aerialway, boundary, amenity, aeroway, club, craft, leisure, office, mountain_pass, shop, tourism, bridge, tunnel, waterwaypostcode  They roughly correspond to the classification of the OpenStreetMap data according to either the place tag or the main key of the object. ","version":"Next","tagName":"h3"},{"title":"Special Phrases","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-special-phrases","content":"","keywords":"","version":"Next"},{"title":"Special Phrases Options​","type":1,"pageTitle":"Special Phrases","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-special-phrases#special-phrases-options","content":" .css-8atqhb{width:100%;}   ","version":"Next","tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"Special Phrases","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-special-phrases#examples","content":" Request in English &lt;VECTOR-NOMINATIM_URL&gt;/search.php?format=jsonv2'&amp; q=school in tel aviv   Request in Hebrew &lt;VECTOR-NOMINATIM_URL&gt;/search.php?format=jsonv2'&amp; q=בית ספר בתוך תל אביב   Response in jsonv2 format [ { &quot;place_id&quot;: 371349364, &quot;licence&quot;: &quot;Data © OpenStreetMap contributors, ODbL 1.0. http://osm.org/copyright&quot;, &quot;osm_type&quot;: &quot;way&quot;, &quot;osm_id&quot;: 405360284, &quot;lat&quot;: &quot;32.0866755&quot;, &quot;lon&quot;: &quot;34.78522392879019&quot;, &quot;category&quot;: &quot;amenity&quot;, &quot;type&quot;: &quot;school&quot;, &quot;place_rank&quot;: 30, &quot;importance&quot;: 0.3996636286275556, &quot;addresstype&quot;: &quot;amenity&quot;, &quot;name&quot;: &quot;גימנסיה הרצליה&quot;, &quot;display_name&quot;: &quot;גימנסיה הרצליה, דוד רמז, הצפון החדש - סביבת ככר המדינה, תל אביב - יפו, הצפון החדש, תל אביב-יפו, נפת תל אביב, מחוז תל אביב, 6296802, ישראל&quot;, &quot;boundingbox&quot;: [ &quot;32.0860104&quot;, &quot;32.0875880&quot;, &quot;34.7843618&quot;, &quot;34.7860641&quot; ] }, { &quot;place_id&quot;: 371344929, &quot;licence&quot;: &quot;Data © OpenStreetMap contributors, ODbL 1.0. http://osm.org/copyright&quot;, &quot;osm_type&quot;: &quot;way&quot;, &quot;osm_id&quot;: 140917803, &quot;lat&quot;: &quot;32.09302495&quot;, &quot;lon&quot;: &quot;34.79094265017193&quot;, &quot;category&quot;: &quot;amenity&quot;, &quot;type&quot;: &quot;school&quot;, &quot;place_rank&quot;: 30, &quot;importance&quot;: 0.23859140675544002, &quot;addresstype&quot;: &quot;amenity&quot;, &quot;name&quot;: &quot;בית ספר עירוני ד'&quot;, &quot;display_name&quot;: &quot;בית ספר עירוני ד', רב צעיר, הצפון החדש - החלק הצפוני, תל אביב - יפו, הצפון החדש, תל אביב-יפו, נפת תל אביב, מחוז תל אביב, 6230231, ישראל&quot;, &quot;boundingbox&quot;: [ &quot;32.0922268&quot;, &quot;32.0938329&quot;, &quot;34.7906316&quot;, &quot;34.7912568&quot; ] } ]  ","version":"Next","tagName":"h2"},{"title":"Reverse Geocoding","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Reverse-Search-API","content":"","keywords":"","version":"Next"},{"title":"How it works​","type":1,"pageTitle":"Reverse Geocoding","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Reverse-Search-API#how-it-works","content":" The reverse geocoding API does not exactly compute the address for the coordinate it receives. It works by finding the closest suitable OSM object and returning its address information. This may occasionally lead to unexpected results.  First of all, Nominatim only includes OSM objects in its index that are suitable for searching. Small, unnamed paths for example are missing from the database and can therefore not be used for reverse geocoding either.  The other issue to be aware of is that the closest OSM object may not always have a similar enough address to the coordinate you were requesting. For example, in dense city areas it may belong to a completely different street.  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Reverse Geocoding","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Reverse-Search-API#parameters","content":" The main format of the reverse API is  &lt;VECTOR-NOMINATIM-SERVICE_URL&gt;/reverse?lat=&lt;value&gt;&amp;lon=&lt;value&gt;&amp;&lt;params&gt;   where lat and lon are latitude and longitude of a coordinate in WGS84 projection. The API returns exactly one result or an error when the coordinate is in an area with no OSM data coverage. Additional parameters are accepted as listed below.  warning The reverse API used to allow address lookup for a single OSM object by its OSM id. This use is now deprecated. Use the Address Lookup APIinstead.  ","version":"Next","tagName":"h2"},{"title":"Output format​","type":1,"pageTitle":"Reverse Geocoding","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Reverse-Search-API#output-format","content":" format=[xml|json|jsonv2|geojson|geocodejson]  See Place Output Formats for details on each format. (Default: xml)  json_callback=&lt;string&gt;  Wrap JSON output in a callback function (JSONP) i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.  ","version":"Next","tagName":"h3"},{"title":"Output details​","type":1,"pageTitle":"Reverse Geocoding","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Reverse-Search-API#output-details","content":" addressdetails=[0|1]  Include a breakdown of the address into elements. (Default: 1)  extratags=[0|1]  Include additional information in the result if available, e.g. wikipedia link, opening hours. (Default: 0)  namedetails=[0|1]  Include a list of alternative names in the results. These may include language variants, references, operator and brand. (Default: 0)  ","version":"Next","tagName":"h3"},{"title":"Language of results​","type":1,"pageTitle":"Reverse Geocoding","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Reverse-Search-API#language-of-results","content":" accept-language=&lt;browser language string&gt;  Preferred language order for showing search results, overrides the value specified in the &quot;Accept-Language&quot; HTTP header. Either use a standard RFC2616 accept-language string or a simple comma-separated list of language codes.  ","version":"Next","tagName":"h3"},{"title":"Result limitation​","type":1,"pageTitle":"Reverse Geocoding","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Reverse-Search-API#result-limitation","content":" zoom=[0-18]  Level of detail required for the address. Default: 18. This is a number that corresponds roughly to the zoom level used in XYZ tile sources in frameworks like Leaflet.js, Openlayers etc (Please take not that WGS84 zoom level is slightly different). In terms of address details the zoom levels are as follows:  zoom\taddress detail3\tcountry 5\tstate 8\tcounty 10\tcity 14\tsuburb 16\tmajor streets 17\tmajor and minor streets 18\tbuilding  ","version":"Next","tagName":"h3"},{"title":"Polygon output​","type":1,"pageTitle":"Reverse Geocoding","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Reverse-Search-API#polygon-output","content":" polygon_geojson=1polygon_kml=1polygon_svg=1polygon_text=1  Output geometry of results as a GeoJSON, KML, SVG or WKT. Only one of these options can be used at a time. (Default: 0)  polygon_threshold=0.0  Return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result. (Default: 0.0)  ","version":"Next","tagName":"h3"},{"title":"Other​","type":1,"pageTitle":"Reverse Geocoding","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Reverse-Search-API#other","content":" email=&lt;valid email address&gt;  If you are making a large number of requests, please include an appropriate email address to identify your requests (only relevant when using the service in the internet).  debug=[0|1]  Output assorted developer debug information. Data on internals of Nominatim's &quot;Search Loop&quot; logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format. (Default: 0)  ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Reverse Geocoding","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Reverse-Search-API#examples","content":" /reverse.html?format=xml&amp;lat=31.770454150126838&amp;lon=35.20109340043129&amp;zoom=18&amp;addressdetails=1  Response in XML Format &lt;reversegeocode timestamp=&quot;Mon, 23 Jan 23 12:44:51 +0000&quot; attribution=&quot;Data © OpenStreetMap contributors, ODbL 1.0. http://www.openstreetmap.org/copyright&quot; querystring=&quot;format=xml&amp;lat=31.770454150126838&amp;lon=35.20109340043129&amp;zoom=18&amp;addressdetails=1&quot;&gt; &lt;result place_id=&quot;19306678&quot; osm_type=&quot;node&quot; osm_id=&quot;2260660571&quot; lat=&quot;31.7704127&quot; lon=&quot;35.2010157&quot; boundingbox=&quot;31.7703627,31.7704627,35.2009657,35.2010657&quot; place_rank=&quot;30&quot; address_rank=&quot;30&quot;&gt;18, Nave Shaanan, Nayot, Jerusalem, Jerusalem Subdistrict, Jerusalem District, 9218812, Israel&lt;/result&gt; &lt;addressparts&gt; &lt;house_number&gt;18&lt;/house_number&gt; &lt;road&gt;Nave Shaanan&lt;/road&gt; &lt;suburb&gt;Nayot&lt;/suburb&gt; &lt;city&gt;Jerusalem&lt;/city&gt; &lt;state_district&gt;Jerusalem Subdistrict&lt;/state_district&gt; &lt;state&gt;Jerusalem District&lt;/state&gt; &lt;ISO3166-2-lvl4&gt;IL-JM&lt;/ISO3166-2-lvl4&gt; &lt;postcode&gt;9218812&lt;/postcode&gt; &lt;country&gt;Israel&lt;/country&gt; &lt;country_code&gt;il&lt;/country_code&gt; &lt;/addressparts&gt; &lt;/reversegeocode&gt;   Example with format=jsonv2​  /reverse.html?format=jsonv2&amp;lat=32.06906022673506&amp;lon=34.778194163532476  Response in jsonv2 Format { &quot;place_id&quot;: 143009880, &quot;licence&quot;: &quot;Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright&quot;, &quot;osm_type&quot;: &quot;way&quot;, &quot;osm_id&quot;: 149962182, &quot;lat&quot;: &quot;32.0691986&quot;, &quot;lon&quot;: &quot;34.77800567065701&quot;, &quot;place_rank&quot;: 30, &quot;category&quot;: &quot;building&quot;, &quot;type&quot;: &quot;apartments&quot;, &quot;importance&quot;: 0.00000999999999995449, &quot;addresstype&quot;: &quot;building&quot;, &quot;name&quot;: null, &quot;display_name&quot;: &quot;109, Rothschild Boulevard, Tel Aviv, Lev Tel Aviv, Tel Aviv-Yafo, Tel Aviv Subdistrict, Tel Aviv District, 6527401, Israel&quot;, &quot;address&quot;: { &quot;house_number&quot;: &quot;109&quot;, &quot;road&quot;: &quot;Rothschild Boulevard&quot;, &quot;residential&quot;: &quot;Tel Aviv&quot;, &quot;suburb&quot;: &quot;Lev Tel Aviv&quot;, &quot;city&quot;: &quot;Tel Aviv-Yafo&quot;, &quot;state_district&quot;: &quot;Tel Aviv Subdistrict&quot;, &quot;state&quot;: &quot;Tel Aviv District&quot;, &quot;ISO3166-2-lvl4&quot;: &quot;IL-TA&quot;, &quot;postcode&quot;: &quot;6527401&quot;, &quot;country&quot;: &quot;Israel&quot;, &quot;country_code&quot;: &quot;il&quot; }, &quot;boundingbox&quot;: [ &quot;32.0690938&quot;, &quot;32.0693033&quot;, &quot;34.7778663&quot;, &quot;34.778145&quot; ] }   Example with format=geojson​  /reverse.html?format=geojson&amp;lat=31.258847882906082&amp;lon=34.801318450147534  Response in GeoJSON Format { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;licence&quot;: &quot;Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright&quot;, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: { &quot;place_id&quot;: 161967817, &quot;osm_type&quot;: &quot;way&quot;, &quot;osm_id&quot;: 219455608, &quot;place_rank&quot;: 30, &quot;category&quot;: &quot;building&quot;, &quot;type&quot;: &quot;yes&quot;, &quot;importance&quot;: 0.00000999999999995449, &quot;addresstype&quot;: &quot;building&quot;, &quot;name&quot;: &quot;מחלקות ילדים א-ד&quot;, &quot;display_name&quot;: &quot;מחלקות ילדים א-ד, אשפוז יום כירורגי, Be'er Sheva Innovation District, Gimel, Beer Sheva, Beersheba Subdistrict, South District, 8452566, Israel&quot;, &quot;address&quot;: { &quot;building&quot;: &quot;מחלקות ילדים א-ד&quot;, &quot;road&quot;: &quot;אשפוז יום כירורגי&quot;, &quot;commercial&quot;: &quot;Be'er Sheva Innovation District&quot;, &quot;suburb&quot;: &quot;Gimel&quot;, &quot;city&quot;: &quot;Beer Sheva&quot;, &quot;state_district&quot;: &quot;Beersheba Subdistrict&quot;, &quot;state&quot;: &quot;South District&quot;, &quot;ISO3166-2-lvl4&quot;: &quot;IL-D&quot;, &quot;postcode&quot;: &quot;8452566&quot;, &quot;country&quot;: &quot;Israel&quot;, &quot;country_code&quot;: &quot;il&quot; } }, &quot;bbox&quot;: [ 34.8012294, 31.2585054, 34.8016819, 31.2589849 ], &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [ 34.801452912210586, 31.2586442 ] } } ] }   Example with format=geocodejson​  /reverse.html?format=geocodejson&amp;lat=31.77671359535347&amp;lon=35.234473935516405  Response in GeoCodeJSON Format { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.1.0&quot;, &quot;attribution&quot;: &quot;Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright&quot;, &quot;licence&quot;: &quot;ODbL&quot;, &quot;query&quot;: &quot;31.776713595353,35.234473935516&quot; }, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: { &quot;geocoding&quot;: { &quot;place_id&quot;: 267010108, &quot;osm_type&quot;: &quot;way&quot;, &quot;osm_id&quot;: 817206833, &quot;type&quot;: &quot;house&quot;, &quot;accuracy&quot;: 0, &quot;label&quot;: &quot;Western Wall, Wilson's Arch, Jewish Quarter, Old City, Jerusalem, Jerusalem Subdistrict, Jerusalem District, 9511208, Israel&quot;, &quot;name&quot;: &quot;Western Wall&quot;, &quot;country&quot;: &quot;Israel&quot;, &quot;postcode&quot;: &quot;9511208&quot;, &quot;state&quot;: &quot;Jerusalem District&quot;, &quot;county&quot;: &quot;Jerusalem Subdistrict&quot;, &quot;city&quot;: &quot;Jerusalem&quot;, &quot;district&quot;: &quot;Old City&quot;, &quot;locality&quot;: &quot;Jewish Quarter&quot;, &quot;street&quot;: &quot;Wilson's Arch&quot;, &quot;admin&quot;: { &quot;level4&quot;: &quot;Jerusalem District&quot;, &quot;level5&quot;: &quot;Jerusalem Subdistrict&quot;, &quot;level8&quot;: &quot;Jerusalem&quot;, &quot;level9&quot;: &quot;Old City&quot;, &quot;level10&quot;: &quot;Jewish Quarter&quot; } } }, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [ 35.23446114230339, 31.776734949999998 ] } } ] }  ","version":"Next","tagName":"h2"},{"title":"Search queries","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Search-API","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Search queries","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Search-API#parameters","content":" The search API has the following format:   &lt;VECTOR-NOMINATIM-SERVICE_URL&gt;/search?&lt;params&gt;   The search term may be specified with two different sets of parameters:  q=&lt;query&gt; Free-form query string to search for. Free-form queries are processed first left-to-right and then right-to-left if that fails. So you may search forpilkington avenue, birmingham as well as forbirmingham, pilkington avenue. Commas are optional, but improve performance by reducing the complexity of the search. For searching with special phrases you can read more here. street=&lt;housenumber&gt; &lt;streetname&gt; city=&lt;city&gt; county=&lt;county&gt; state=&lt;state&gt; country=&lt;country&gt; postalcode=&lt;postalcode&gt; Alternative query string format split into several parameters for structured requests. Structured requests are faster but are less robust against alternative OSM tagging schemas. Do not combine with q=&lt;query&gt; parameter.  Both query forms accept the additional parameters listed below.  ","version":"Next","tagName":"h2"},{"title":"Output format​","type":1,"pageTitle":"Search queries","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Search-API#output-format","content":" format=[xml|json|jsonv2|geojson|geocodejson]  See Place Output Formats for details on each format. (Default: jsonv2)  json_callback=&lt;string&gt;  Wrap JSON output in a callback function JSONP i.e. &lt;string&gt;(&lt;json&gt;). Only has an effect for JSON output formats.  ","version":"Next","tagName":"h3"},{"title":"Output details​","type":1,"pageTitle":"Search queries","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Search-API#output-details","content":" addressdetails=[0|1]  Include a breakdown of the address into elements. (Default: 0)  extratags=[0|1]  Include additional information in the result if available, e.g. wikipedia link, opening hours. (Default: 0)  namedetails=[0|1]  Include a list of alternative names in the results. These may include language variants, references, operator and brand. (Default: 0)  ","version":"Next","tagName":"h3"},{"title":"Language of results​","type":1,"pageTitle":"Search queries","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Search-API#language-of-results","content":" accept-language=&lt;browser language string&gt;  Preferred language order for showing search results, overrides the value specified in the &quot;Accept-Language&quot; HTTP header. Either use a standard RFC2616 accept-language string or a simple comma-separated list of language codes.  ","version":"Next","tagName":"h3"},{"title":"Result limitation​","type":1,"pageTitle":"Search queries","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Search-API#result-limitation","content":" countrycodes=&lt;countrycode&gt;[,&lt;countrycode&gt;][,&lt;countrycode&gt;]...  Limit search results to one or more countries. &lt;countrycode&gt; must be theISO 3166-1alpha2 code, e.g. gb for the United Kingdom, de for Germany.  Each place in Nominatim is assigned to one country code based on OSM country boundaries. In rare cases a place may not be in any country at all, for example, in international waters.  exclude_place_ids=&lt;place_id,[place_id],[place_id]  If you do not want certain OSM objects to appear in the search result, give a comma separated list of the place_ids you want to skip. This can be used to retrieve additional search results. For example, if a previous query only returned a few results, then including those here would cause the search to return other, less accurate, matches (if possible).  limit=&lt;integer&gt;  Limit the number of returned results. (Default: 10, Maximum: 50)  viewbox=&lt;x1&gt;,&lt;y1&gt;,&lt;x2&gt;,&lt;y2&gt;  The preferred area to find search results. Any two corner points of the box are accepted as long as they span a real box. x is longitude,y is latitude.  bounded=[0|1]  When a viewbox is given, restrict the result to items contained within that viewbox (see above). When viewbox and bounded=1 are given, an amenity only search is allowed. Give the special keyword for the amenity in square brackets, e.g. [pub] and a selection of objects of this type is returned. There is no guarantee that the result is complete. (Default: 0)  ","version":"Next","tagName":"h3"},{"title":"Polygon output​","type":1,"pageTitle":"Search queries","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Search-API#polygon-output","content":" polygon_geojson=1polygon_kml=1polygon_svg=1polygon_text=1  Output geometry of results as a GeoJSON, KML, SVG or WKT. Only one of these options can be used at a time. (Default: 0)  polygon_threshold=0.0  Return a simplified version of the output geometry. The parameter is the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the result. (Default: 0.0)  ","version":"Next","tagName":"h3"},{"title":"Other​","type":1,"pageTitle":"Search queries","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Search-API#other","content":" email=&lt;valid email address&gt;  If you are making large numbers of request please include an appropriate email address to identify your requests (only relevant when using the service in the internet).  dedupe=[0|1]  Sometimes you have several objects in OSM identifying the same place or object in reality. The simplest case is a street being split into many different OSM ways due to different characteristics. Nominatim will attempt to detect such duplicates and only return one match unless this parameter is set to 0. (Default: 1)  debug=[0|1]  Output assorted developer debug information. Data on internals of Nominatim's &quot;Search Loop&quot; logic, and SQL queries. The output is (rough) HTML format. This overrides the specified machine readable format. (Default: 0)  ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Search queries","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/nominatim/Osm-Search-API#examples","content":" XML with KML polygon​  /search.html?q=נוה+שאנן+20+ירושלים&amp;polygon_geojson=1&amp;addressdetails=1  XML with KML polygon &lt;searchresults timestamp=&quot;Mon, 23 Jan 23 11:14:56 +0000&quot; attribution=&quot;Data © OpenStreetMap contributors, ODbL 1.0. http://www.openstreetmap.org/copyright&quot; querystring=&quot;נוה שאנן 20 ירושלים&quot; exclude_place_ids=&quot;135102101&quot; more_url=&quot;&lt;VECTOR-NOMINATIM-SERVICE_URL&gt;/search/?q=%D7%A0%D7%95%D7%94+%D7%A9%D7%90%D7%A0%D7%9F+20+%D7%99%D7%A8%D7%95%D7%A9%D7%9C%D7%99%D7%9D&amp;addressdetails=1&amp;polygon_geojson=1&amp;exclude_place_ids=135102101&amp;format=xml&amp;accept-language=en-GB%2Cen-US%3Bq%3D0.9%2Cen%3Bq%3D0.8&quot;&gt; &lt;place place_id=&quot;135102101&quot; osm_type=&quot;way&quot; osm_id=&quot;117395912&quot; place_rank=&quot;26&quot; address_rank=&quot;26&quot; boundingbox=&quot;31.7701362,31.7728728,35.2005205,35.2011552&quot; geojson=&quot;{&quot; type&quot;:&quot; LineString&quot;,&quot; coordinates&quot;:[[35.2005205,31.7728728],[35.2006515,31.7727207],[35.2008554,31.7724425],[35.2008817,31.7722532],[35.2009251,31.7719408],[35.2010378,31.7709603],[35.2010813,31.77059],[35.2011075,31.7703674],[35.2011369,31.7702248],[35.2011552,31.7701362]]}&quot; lat=&quot;31.7719408&quot; lon=&quot;35.2009251&quot; display_name=&quot;Nave Shaanan, Nayot, Jerusalem, Jerusalem Subdistrict, Jerusalem District, 9218812, Israel&quot; class=&quot;highway&quot; type=&quot;residential&quot; importance=&quot;0.10001&quot;&gt; &lt;road&gt;Nave Shaanan&lt;/road&gt; &lt;suburb&gt;Nayot&lt;/suburb&gt; &lt;city&gt;Jerusalem&lt;/city&gt; &lt;state_district&gt;Jerusalem Subdistrict&lt;/state_district&gt; &lt;state&gt;Jerusalem District&lt;/state&gt; &lt;ISO3166-2-lvl4&gt;IL-JM&lt;/ISO3166-2-lvl4&gt; &lt;postcode&gt;9218812&lt;/postcode&gt; &lt;country&gt;Israel&lt;/country&gt; &lt;country_code&gt;il&lt;/country_code&gt; &lt;/place&gt; &lt;/searchresults&gt;   JSON with SVG polygon​  /search.html?q=שדרות+רוטשילד+תל+אביב&amp;format=jsonv2&amp;addressdetails=1&amp;limit=1  JSON with SVG polygon { &quot;place_id&quot;: 144435067, &quot;licence&quot;: &quot;Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright&quot;, &quot;osm_type&quot;: &quot;way&quot;, &quot;osm_id&quot;: 154741757, &quot;boundingbox&quot;: [ &quot;32.0635149&quot;, &quot;32.0681999&quot;, &quot;34.7729215&quot;, &quot;34.7779348&quot; ], &quot;lat&quot;: &quot;32.0654291&quot;, &quot;lon&quot;: &quot;34.7766695&quot;, &quot;display_name&quot;: &quot;Rothschild Boulevard, Tel Aviv, Lev Tel Aviv, Tel Aviv-Yafo, Tel Aviv Subdistrict, Tel Aviv District, 6688209, Israel&quot;, &quot;class&quot;: &quot;highway&quot;, &quot;type&quot;: &quot;tertiary&quot;, &quot;importance&quot;: 0.10000999999999993, &quot;address&quot;: { &quot;road&quot;: &quot;Rothschild Boulevard&quot;, &quot;residential&quot;: &quot;Tel Aviv&quot;, &quot;suburb&quot;: &quot;Lev Tel Aviv&quot;, &quot;city&quot;: &quot;Tel Aviv-Yafo&quot;, &quot;state_district&quot;: &quot;Tel Aviv Subdistrict&quot;, &quot;state&quot;: &quot;Tel Aviv District&quot;, &quot;ISO3166-2-lvl4&quot;: &quot;IL-TA&quot;, &quot;postcode&quot;: &quot;6688209&quot;, &quot;country&quot;: &quot;Israel&quot;, &quot;country_code&quot;: &quot;il&quot; }, &quot;svg&quot;: &quot;M 34.7779348 -32.0681999 L 34.7779248 -32.0681693 34.777464 -32.0667233 34.7774456 -32.0666655 34.7774298 -32.0666189 34.7771958 -32.0659273 34.7767089 -32.0654665 34.7766695 -32.0654291 34.7755674 -32.0643757 34.7748309 -32.0641328 34.7747835 -32.0641179 34.7747331 -32.0641021 34.7744227 -32.0640012 34.7741919 -32.0639261 34.7740025 -32.0638618 34.7737944 -32.0637997 34.7737636 -32.0637897 34.7729979 -32.0635408 34.7729506 -32.0635243 34.7729215 -32.0635149&quot; }   JSON with address details​  /search.html?addressdetails=1&amp;q=bakery+in+beer+sheba+&amp;format=json&amp;limit=1  JSON with address details { &quot;place_id&quot;: 15852500, &quot;licence&quot;: &quot;Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright&quot;, &quot;osm_type&quot;: &quot;node&quot;, &quot;osm_id&quot;: 1772765812, &quot;boundingbox&quot;: [ &quot;31.2447187&quot;, &quot;31.2448187&quot;, &quot;34.8124668&quot;, &quot;34.8125668&quot; ], &quot;lat&quot;: &quot;31.2447687&quot;, &quot;lon&quot;: &quot;34.8125168&quot;, &quot;display_name&quot;: &quot;Harishonim bakery, Eliyahu Nawi, Beersheba Industrial Area, Beer-Sheba, Beersheba Subdistrict, South District, 8441410, Israel&quot;, &quot;class&quot;: &quot;shop&quot;, &quot;type&quot;: &quot;bakery&quot;, &quot;importance&quot;: 0.40001, &quot;icon&quot;: &quot;&lt;VECTOR-NOMINATIM-SERVICE_URL&gt;/ui/mapicons/shopping_bakery.p.20.png&quot;, &quot;address&quot;: { &quot;shop&quot;: &quot;Harishonim bakery&quot;, &quot;road&quot;: &quot;Eliyahu Nawi&quot;, &quot;suburb&quot;: &quot;Beersheba Industrial Area&quot;, &quot;city&quot;: &quot;Beer-Sheba&quot;, &quot;state_district&quot;: &quot;Beersheba Subdistrict&quot;, &quot;state&quot;: &quot;South District&quot;, &quot;ISO3166-2-lvl4&quot;: &quot;IL-D&quot;, &quot;postcode&quot;: &quot;8441410&quot;, &quot;country&quot;: &quot;Israel&quot;, &quot;country_code&quot;: &quot;il&quot; } }   GeoJSON​  /search.html?q=חורב+15+חיפה&amp;format=geojson  GeoJSON Format { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;licence&quot;: &quot;Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright&quot;, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: { &quot;place_id&quot;: 123700904, &quot;osm_type&quot;: &quot;way&quot;, &quot;osm_id&quot;: 60468022, &quot;display_name&quot;: &quot;Horev Center, 15, Horev, Ahuzzat Shemuel, Carmel Heights District, Haifa, Haifa Subdistrict, Haifa District, 3434120, Israel&quot;, &quot;place_rank&quot;: 30, &quot;category&quot;: &quot;shop&quot;, &quot;type&quot;: &quot;mall&quot;, &quot;importance&quot;: 0.11000999999999997 }, &quot;bbox&quot;: [ 34.9867531, 32.7841525, 34.9877418, 32.785079 ], &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [ 34.98706599757996, 32.7845887 ] } } ] }   GeocodeJSON​  /search.html?q=הכותל+המערבי&amp;format=geocodejson  GeocodeJSON Format { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.1.0&quot;, &quot;attribution&quot;: &quot;Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright&quot;, &quot;licence&quot;: &quot;ODbL&quot;, &quot;query&quot;: &quot;הכותל המערבי&quot; }, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: { &quot;geocoding&quot;: { &quot;place_id&quot;: 267010108, &quot;osm_type&quot;: &quot;way&quot;, &quot;osm_id&quot;: 817206833, &quot;osm_key&quot;: &quot;amenity&quot;, &quot;osm_value&quot;: &quot;place_of_worship&quot;, &quot;type&quot;: &quot;house&quot;, &quot;label&quot;: &quot;Western Wall, Wilson's Arch, Jewish Quarter, Old City, Jerusalem, Jerusalem Subdistrict, Jerusalem District, 9511208, Israel&quot;, &quot;name&quot;: &quot;Western Wall&quot; } }, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [ 35.23446114230339, 31.776734949999998 ] } } ] }  ","version":"Next","tagName":"h2"},{"title":"OpenStreetMap","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/openstreetmap","content":"","keywords":"","version":"Next"},{"title":"What is it?​","type":1,"pageTitle":"OpenStreetMap","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/openstreetmap#what-is-it","content":" OpenStreetMap (OSM) is a free, open geographic database updated and maintained by a community of volunteers via open collaboration. Contributors collect data from surveys, trace from aerial imagery and also import from other freely licensed geodata sources. OpenStreetMap is freely licensed under the Open Database License and as a result commonly used to make electronic maps, inform turn-by-turn navigation, assist in humanitarian aid and data visualisation.  ","version":"Next","tagName":"h2"},{"title":"Why are we using it​","type":1,"pageTitle":"OpenStreetMap","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/openstreetmap#why-are-we-using-it","content":" We believe that any additional data is welcome, and because OpenStreetMap is the de-facto standard in mapping in the internet today, we should also import the data and as many services as possible.  ","version":"Next","tagName":"h2"},{"title":"Available OSM based products​","type":1,"pageTitle":"OpenStreetMap","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/openstreetmap#available-osm-based-products","content":" OSM Carto The default OSM raster tile layer style.Nominatim OpenStreetMap based GeoCoding and Reverse GeoCoding service.  ","version":"Next","tagName":"h2"},{"title":"Future OSM based products​","type":1,"pageTitle":"OpenStreetMap","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/openstreetmap#future-osm-based-products","content":" NavigationQueryAdditional styles  ","version":"Next","tagName":"h2"},{"title":"Additional information about OSM​","type":1,"pageTitle":"OpenStreetMap","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/openstreetmap#additional-information-about-osm","content":" OSM Deep Dive More about the project and it's history.OSM Data Model About the &quot;building blocks&quot; OSM uses to describe the world.OSM Users A partial list of organizations and companies that use OpenStreetMap. ","version":"Next","tagName":"h2"},{"title":"OpenStreetMap Carto","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/openstreetmap-carto","content":"","keywords":"","version":"Next"},{"title":"How to use​","type":1,"pageTitle":"OpenStreetMap Carto","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/openstreetmap-carto#how-to-use","content":" The style can be consumed as a raster tiles layer from Raster team services. For more information check Raster step by step guide.  ","version":"Next","tagName":"h2"},{"title":"What did we do​","type":1,"pageTitle":"OpenStreetMap Carto","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/openstreetmap-carto#what-did-we-do","content":" As this stylesheet is an open-source, we had to make a few minor changes compared to the original one.  We changed the stylesheet projection from Web Mercator to WGS84. See mapping terms.We modified the database insertion script to prefer names in Hebrew and English when possible.We imported data from the Natural Earth dataset in places where we didn't import OSM data.  ","version":"Next","tagName":"h2"},{"title":"Style key​","type":1,"pageTitle":"OpenStreetMap Carto","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/openstreetmap-carto#style-key","content":" SymbolsLinesAreas  ","version":"Next","tagName":"h2"},{"title":"\"My house doesn't appears on the map, fix it 😡\"​","type":1,"pageTitle":"OpenStreetMap Carto","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/openstreetmap-carto#my-house-doesnt-appears-on-the-map-fix-it-","content":" First, we are sorry, but its not our fault 🤷  We import the data as is from the internet, without any change or modification to maintain authenticity. Because OpenStreetMap is free and Open Source, you can go on their website at openstreetmap.org, and make the changes yourself. Be sure to read the guidelines before making any change to avoid it being removed.  ","version":"Next","tagName":"h2"},{"title":"Stylesheet design goals​","type":1,"pageTitle":"OpenStreetMap Carto","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/openstreetmap-carto#stylesheet-design-goals","content":" Taken from the project repository  ","version":"Next","tagName":"h2"},{"title":"General purpose​","type":1,"pageTitle":"OpenStreetMap Carto","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/openstreetmap-carto#general-purpose","content":" This style has multiple purposes:  It's an important feedback mechanism for mappers to validate their edits and helps to prevent unfavorable fragmentation of tag use.It's a major part of the public face of OpenStreetMap, for many people the map on osm.org rendered with this style is OpenStreetMap.It's used in many map applications as a general purpose map.It's an exemplar stylesheet for rendering OSM data.  There is no ranking of these purposes. To allow serving all of them and to avoid satisfying only some at the cost of the others the following main goals have been identified.  ","version":"Next","tagName":"h3"},{"title":"Main goals​","type":1,"pageTitle":"OpenStreetMap Carto","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/openstreetmap-carto#main-goals","content":" The following goals need to be balanced against each other to serve the purposes above. There is no fixed order of priorities. Apart from these goals there are of course also technical constraints and requirements that need to be taken into account.  Legibility and clarity - The map should be intuitively readable by users with some general experience using maps without a map key, preferrably with relatively little effort. A map key or more extensive experience using this map style can be required for clearly identifying minor differences or the exact meaning of certain features but in broad strokes orientation and identification of map elements should be possible on an intuitive level. We also aim for the map appearance to be esthetically pleasing.Being understandable and supportive for mappers - To serve as feedback for mappers and encourage correct mapping this style needs to render the data in a way that allows mappers to understand how the data produces a certain rendering result based on basic observation without in depth understanding how map rendering works or looking at the style implementation.Diversity - The style should represent the diversity of the OSM community and geography in general. The most obvious element to serve this goal is showing the local names everywhere on earth in their respective scripts. This goal however goes beyond labels. Both physical and cultural geography differs a lot globally and the aim is to represent this variety with equal determination - well mapped areas are not supposed to have more weight here than less mapped parts of the world. This also means the target map user is the potential global map user and no special consideration is given to the current geographic distribution of actual map use.A rich map - This style deliberately creating a fairly rich map showing a significant number of different features. This way it shows the richness of OSM data and gives a broad recognition to the mappers' work. The aim is not however to show all or even most of the OSM data.Maintainability - The implementation of this style should not be too hard to maintain. This refers to both the volume and complexity of the code and how fast the style can be parsed when rendering it, which is very important for efficient development work. So the amount of code should be kept small and complex and fragile interdependencies should be avoided. If the code is difficult to maintain this would ultimately seriously affect all of the above goals.Adaptability and ease of use - The style should be easy to customize, like for creating localized or special purpose maps. It is also important to keep demands on rendering infrastructure for serving the style low so it is not too difficult and costly to set up a tile server for this style or a specialized variant of it. ","version":"Next","tagName":"h3"},{"title":"OpenStreetMap Data Model","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-data-model","content":"","keywords":"","version":"Next"},{"title":"Node​","type":1,"pageTitle":"OpenStreetMap Data Model","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-data-model#node","content":" A node represents a specific point on the earth's surface defined by its latitude and longitude, referred to the World Geodetic System 1984. Each node comprises at least an id number and a pair of coordinates.  Nodes can be used to define standalone point features. For example, a node could represent a park bench or a water well.  Nodes are also used to define the shape of a way. When used as points along ways, nodes usually have no tags, though some of them could. For example, highway=traffic_signals marks traffic signals on a road, and power=tower represents a pylon along an electric power line.  A node can be included as member of relation. The relation also may indicate the member's role: that is, the node's function in this particular set of related data elements.  ","version":"Next","tagName":"h2"},{"title":"Way​","type":1,"pageTitle":"OpenStreetMap Data Model","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-data-model#way","content":" A way is an ordered list of between 1 (!) and 2,000 nodes that define a polyline. Ways are used to represent linear features such as rivers and roads.  Ways can also represent the boundaries of areas (solid polygons) such as buildings or forests. In this case, the way's first and last node will be the same. This is called a &quot;closed way&quot;.  Note that closed ways occasionally represent loops, such as roundabouts on highways, rather than solid areas. The way's tags must be examined to discover which it is. For elements with tags that could both be a linear representation or an area-representation of a real life object (such as man_made=pier) the tag area=yes or area=no can be used to avoid ambiguity or misinterpretation.  Areas with holes, or with boundaries of more than 2,000 nodes, cannot be represented by a single way. Instead, the feature will require a more complex multipolygon relation data structure.  ","version":"Next","tagName":"h2"},{"title":"Relation​","type":1,"pageTitle":"OpenStreetMap Data Model","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-data-model#relation","content":" A relation is a multi-purpose data structure that documents a relationship between two or more data elements (nodes, ways, and/or other relations). Examples include:  A route relation, which lists the ways that form a major (numbered) highway, a cycle route, or a bus route.A turn restriction that says you can't turn from one way into another way.A multipolygon that describes an area (whose boundary is the 'outer way') with holes (the 'inner ways'). Thus, relations can have different meanings. The relation's meaning is defined by its tags. Typically, the relation will have a 'type' tag. The relation's other tags need to be interpreted in light of the type tag.  The relation is primarily an ordered list of nodes, ways, or other relations. These objects are known as the relation's members.  Each element can optionally have a role within the relation. For example, a turn restriction would have members with &quot;from&quot; and &quot;to&quot; roles, describing the particular turn that is forbidden.  A single element such as a particular way may appear multiple times in a relation.  ","version":"Next","tagName":"h2"},{"title":"Tag​","type":1,"pageTitle":"OpenStreetMap Data Model","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-data-model#tag","content":" All types of data element (nodes, ways and relations) can have tags. Tags describe the meaning of the particular element to which they are attached.  A tag consists of two free format text fields; a 'key' and a 'value'. Each of these are Unicode strings of up to 255 characters. For example, highway=residential defines the way as a road whose main function is to give access to people's homes. An element cannot have 2 tags with the same 'key', the 'key's must be unique. For example, you cannot have an element tagged both amenity=restaurant and amenity=bar.  There is no fixed dictionary of tags, but there are many conventions documented on the OSM wiki (starting with the Map Features page). Tag usage can be measured with the Taginfo application. If there is more than one way to tag a given feature, it's probably best to use the most common approach.  Not all elements have tags. Nodes are often untagged if they are part of ways. Both ways and nodes may be untagged if they are members of a relation. ","version":"Next","tagName":"h2"},{"title":"OpenStreetMap in depth","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-in-depth","content":"","keywords":"","version":"Next"},{"title":"History​","type":1,"pageTitle":"OpenStreetMap in depth","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-in-depth#history","content":" The idea for OpenStreetMap came about in 2003, when Steve Coast was working on a project for the UK government. He realized that there was a need for a free, open-source map of the world that could be easily edited and updated by anyone. In 2004, Coast launched the OpenStreetMap website and began to gather data from various sources, including GPS traces and aerial imagery.  Over the next few years, the project grew rapidly, with the number of contributors and the amount of data increasing. In 2007, the OpenStreetMap Foundation was established to support the project and provide infrastructure for the community. Today, OpenStreetMap is one of the largest and most widely used open data projects in the world.   idEditor - The official OpenStreetMap editor   ","version":"Next","tagName":"h2"},{"title":"Uses​","type":1,"pageTitle":"OpenStreetMap in depth","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-in-depth#uses","content":" OpenStreetMap data is used in a wide variety of applications, including:  Online maps: The most obvious use of OpenStreetMap data is in online maps, such as the main OpenStreetMap website. The data is also used by many other websites and apps that provide maps and location-based services, such as OpenRouteService, GraphHopper, and Mapbox.  GIS: OpenStreetMap data is also used in Geographic Information Systems (GIS) for a wide range of applications, such as land use planning, emergency response, and environmental monitoring.  Navigation: OpenStreetMap data is used by many navigation apps and devices, such as OsmAnd, Navit, and OpenFietsMap.  Humanitarian aid: OpenStreetMap data is often used in disaster response and humanitarian aid efforts, as it can be quickly and easily updated to reflect changes on the ground.  Overall, OpenStreetMap provides a valuable resource for many different fields, from online maps and navigation to GIS and humanitarian aid. With the data constantly updated by a community of volunteers, it offers a reliable and accurate map of the world. ","version":"Next","tagName":"h2"},{"title":"OpenStreetMap Users","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-users","content":"OpenStreetMap Users A list of various OpenStreetMap users taken from Wikipedia. Amazon uses OpenStreetMap for navigation and has a team who revises the map based on feedback from drivers.Apple Inc. unexpectedly created an OpenStreetMap-based map for iPhoto for iOS on 7 March 2012, and launched the maps without properly citing the data source – though this was corrected in 1.0.1. OpenStreetMap is one of the many cited sources for Apple's custom maps in iOS 6, though the majority of map data is provided by TomTom. As of February 2021, Apple was the most prolific corporate editor, responsible for 80% of edits to existing roads.Ballardia (games developer) launched World of the Living Dead: Resurrection in October 2013, which has incorporated OpenStreetMap into its game engine, along with census information, to create a browser-based game mapping over 14,000 square kilometres of greater Los Angeles and survival strategy gameplay. Its previous incarnation had used Google Maps, which had proven incapable of supporting high volumes of players, so during 2013 they shut down the Google Maps version and ported the game to OpenStreetMap.Craigslist switched to OpenStreetMap in 2012, rendering their own tiles based on the data.Facebook uses the map directly in its website/mobile app (depending on the zoom level, the area and the device), with a rendering style designed by Stamen Design as of 2021. Facebook has also used AI technology to detect roads absent from OpenStreetMap but visible in aerial imagery (&quot;mapwith.ai&quot; / &quot;Map with AI&quot;), and has developed an OpenStreetMap editing tool (&quot;RapiD&quot;) for adding these roads to OpenStreetMap. The &quot;Daylight Map Distribution&quot; is a snapshot of OpenStreetMap data created by Facebook that claims to be clean of vandalism.Flickr uses OpenStreetMap data for various cities around the world, including Baghdad, Beijing, Kabul, Santiago, Sydney and Tokyo. In 2012, the maps switched to use Nokia data primarily, with OpenStreetMap being used in areas where the commercial provider lacked performance.Foursquare started using OpenStreetMap via Mapbox's rendering and infrastructure of OpenStreetMap.Garmin uses OpenStreetMap data for some maps for GPSs units.Geotab uses OpenStreetMap data in their Vehicle Tracking Software platform, MyGeotab.Hasbro, the toy company behind the real estate-themed board game Monopoly, launched Monopoly City Streets, a massively multiplayer online game (MMORPG) which allowed players to &quot;buy&quot; streets all over the world. The game used map tiles from Google Maps and the Google Maps API to display the game board, but the underlying street data was obtained from OpenStreetMap. The online game was a limited time offering, its servers were shut down in the end of January 2010.Komoot, a route planning service for running, cycling and hiking uses OpenStreetMap dataMapbox, a provider of custom online maps for websites and applicationsMapQuest announced a service based on OpenStreetMap in 2010, which eventually became MapQuest Open.Mapy.cz is based on OpenStreetMap and extends it by allowing users to upload photos, by making web searches by categories like travel tips, restaurant, accommodation, and by featuring 3D views, areal views, historical photos and haptic mode for blind people. It has apps for both Android and iOS with offline maps.Moovit uses maps based on OpenStreetMap in their free mobile application for public transit navigation.Niantic switched to OpenStreetMap based maps from Google Maps on 1 December 2017 for their games Ingress and Pokémon Go.Nominatim (from the Latin, 'by name') is a tool to search OpenStreetMap data by name and address (geocoding) and then to generate synthetic addresses of OpenStreetMap points (reverse geocoding).OpenTopoMap renders topographic maps based on OpenStreetMap data and on SRTM data.Petal Maps is a free mobile map application developed by Huawei. From its copyright statement, OpenStreetMap is one of their map data sources.Snapchat's June 2017 update introduced its Snap Map with data from Mapbox, OpenStreetMap, and DigitalGlobe.Strava switched to OpenStreetMap rendered and hosted by Mapbox from Google Maps in July 2015.Tableau has integrated OpenStreetMap for all their mapping needs. It has been integrated in all of their products.TCDD Taşımacılık uses OpenStreetMap as a location map on passenger seats on YHTs.Tesla Smart Summon feature released widely in US in October 2019 uses OSM data to navigate vehicles in private parking areas autonomously (without a safety driver)Wahoo uses OpenStreetMap for mapping and giving turn-by-turn navigation in their ELEMNT cycling computers.Webots uses OpenStreetMap data to create a virtual environment for autonomous vehicle simulations.Gurtam uses OpenStreetMap data in their GPS Tracking Software platform, Wialon.Wikimedia projects uses OpenStreetMap as a locator map for cities and travel points of interest.Wikipedia uses OpenStreetMap data to render custom maps used by the articles. Many languages are included in the WIWOSM project (Wikipedia Where in OpenStreetMap) which aims to show OpenStreetMap objects on a slippy map, directly visible on the article page.","keywords":"","version":"Next"},{"title":"Lines","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-lines-symbology","content":"","keywords":"","version":"Next"},{"title":"Roads​","type":1,"pageTitle":"Lines","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-lines-symbology#roads","content":" In OpenStreetMap, the major roads of a road network are sorted on an importance scale, from motorway to quaternary road  ","version":"Next","tagName":"h2"},{"title":"Major roads​","type":1,"pageTitle":"Lines","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-lines-symbology#major-roads","content":" Drawing\tDescription\tTags\tMotorway, the most important roads in a road network. Equivalent to freeway, Autobahn (Germany), etc.\thighway=motorway The link roads (sliproads / ramps) leading to and from a motorway\thighway=motorway_link Motorway under construction / Motorway link under construction\thighway=construction + construction=motorway / highway=construction + construction=motorway_link Trunks, the most important roads in a road network that aren't motorways\thighway=trunk The link roads (sliproads / ramps) leading to and from a trunk highway\thighway=trunk_link Trunk under construction / Trunk link under construction\thighway=construction + construction=trunk / highway=construction + construction=trunk_link Primary road\thighway=primary Connecting slip roads/ramps of primary highways\thighway=primary_link Primary road under construction / Primary road link under construction\thighway=construction + construction=primary / highway=construction + construction=primary_link Secondary road\thighway=secondary Connecting slip roads/ramps of secondary highways\thighway=secondary_link Secondary road under construction / Secondary road link under construction\thighway=construction + construction=secondary / highway=construction + construction=secondary_link Tertiary road\thighway=tertiary Connecting slip roads/ramps of tertiary highways\thighway=tertiary_link Quaternary road\thighway=unclassified  ","version":"Next","tagName":"h3"},{"title":"City roads​","type":1,"pageTitle":"Lines","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-lines-symbology#city-roads","content":" Drawing\tDescription\tTags\tResidential road\thighway=residential Tertiary road under construction / Tertiary road link under construction / Quaternary road under construction / Residential road under construction\thighway=construction + construction=tertiary / highway=construction + construction=tertiary_link / highway=construction + construction=unclassified / highway=construction + construction=residential / highway=construction (without construction=*) Residential road only local traffic\thighway=residential + access=destination Residential road only private traffic / prohibited to be used by the general public\thighway=residential + access=private / highway=residential + access=no Access road (may be also outside of a city)\thighway=service Subordinated way in a parking lot / drive-through highway / driveway / slipway\thighway=service + service=parking_aisle / highway=service + service=drive-through / highway=service + service=driveway / highway=service + leisure=slipway Access road under construction\thighway=construction + construction=service Living street\thighway=living_street Living street under construction\thighway=construction + construction=living_street Pedestrian street\thighway=pedestrian Pedestrian street under construction\thighway=construction + construction=pedestrian  ","version":"Next","tagName":"h3"},{"title":"Roads and ways for non-motorized vehicles​","type":1,"pageTitle":"Lines","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-lines-symbology#roads-and-ways-for-non-motorized-vehicles","content":" Drawing\tDescription\tTags\tBridleway\thighway=bridleway Cycleway\thighway=cycleway Footway / Multi-use path\thighway=footway / highway=path Steps\thighway=steps Bridleway / Cycleway / Footway / Multi-use path / Steps / Track under construction\thighway=construction + construction=bridleway / highway=construction + construction=cycleway / highway=construction + construction=footway / highway=construction + construction=path / highway=construction + construction=steps / highway=construction + construction=track  ","version":"Next","tagName":"h3"},{"title":"gricultural and/or forestry roads​","type":1,"pageTitle":"Lines","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-lines-symbology#gricultural-andor-forestry-roads","content":" Drawing\tDescription\tTags\tTrack. Solid surface.\thighway=track + tracktype=grade1 Track. Mostly solid surface.\thighway=track + tracktype=grade2 Track. Even amount of solid and soft materials.\thighway=track + tracktype=grade3 Track. Mostly soft surface.\thighway=track + tracktype=grade4 Track. Soft surface.\thighway=track + tracktype=grade5 Track with unknown surface type.\thighway=track  ","version":"Next","tagName":"h3"},{"title":"Miscellaneous roads​","type":1,"pageTitle":"Lines","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-lines-symbology#miscellaneous-roads","content":" Drawing\tDescription\tTags\tRunway\taeroway=runway Taxiway\taeroway=taxiway Way for guided buses\thighway=bus_guideway Track (non-motorised)\tleisure=track Racetrack (motorised)\thighway=raceway Completely unknown road type. Anything from footpath to motorway is possible. This should be temporary, until the road type has been surveyed properly.\thighway=road Raceway under construction / Road with unknown classification under construction\thighway=construction + construction=raceway / highway=construction + construction=road Pier, Landing stage\tman_made=pier  ","version":"Next","tagName":"h3"},{"title":"Railways​","type":1,"pageTitle":"Lines","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-lines-symbology#railways","content":" Drawing\tDescription\tTags\tRailway for full-sized passenger trains\trailway=rail Construction railway\trailway=construction Disused railway\trailway=disused Railway full-sized passenger trains service segments (Siding track / Yard / Spur track)\trailway=rail + service=siding / railway=rail + service=yard / railway=rail + service=spur Narrow gauge railway / Cable-driven inclined railway / Rails of a light rail\trailway=narrow_gauge / railway=funicular / railway=light_rail Tram railway\trailway=tram Subway railway\trailway=subway Preserved railway\trailway=preserved Miniature railway\trailway=miniature Monorail railway\trailway=monorail Railway turntable\trailway=turntable  ","version":"Next","tagName":"h2"},{"title":"Aerial lifts​","type":1,"pageTitle":"Lines","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-lines-symbology#aerial-lifts","content":" Drawing\tDescription\tTags\tChairlift / Drag lift / T-bar lift / J-bar lift / Platter lift / Rope tow lift / Zip line\taerialway=chair_lift / aerialway=drag_lift / aerialway=t-bar / aerialway=j-bar / aerialway=platter / aerialway=rope_tow / aerialway=zip_line Gondola lift / Cable car run / Mixed lift\taerialway=gondola / aerialway=cable_car / aerialway=mixed_lift An aerial lift for goods\taerialway=goods  ","version":"Next","tagName":"h2"},{"title":"Waterways​","type":1,"pageTitle":"Lines","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-lines-symbology#waterways","content":" Drawing\tDescription\tTags\tRiver / Canal\twaterway=river / waterway=canal River intermittent / Canal intermittent / River seasonal / Canal seasonal\twaterway=river + intermittent=* / waterway=river + seasonal=* / waterway=canal + intermittent=* / waterway=canal + seasonal=* River in tunnel / Canal in tunnel\twaterway=river + tunnel=yes / waterway=canal + tunnel=yes Canal in tunnel\twaterway=canal + tunnel=flooded Stream / Ditch / Drain\twaterway=stream / waterway=ditch / waterway=drain Stream intermittent / Stream seasonal / Ditch intermittent / Ditch seasonal / Drain intermittent / Drain seasonal\twaterway=stream + intermittent=* / waterway=stream + seasonal=* / waterway=ditch + intermittent=* / waterway=ditch + seasonal=* / waterway=drain + intermittent=* / waterway=drain + seasonal=* Stream in pipe or tunnel / Ditch in pipe or tunnel / drain in pipe or tunnel\twaterway=stream + tunnel=yes / waterway=ditch + tunnel=yes / waterway=drain + tunnel=yes Water slide\tattraction=water_slide  ","version":"Next","tagName":"h2"},{"title":"Water traffic​","type":1,"pageTitle":"Lines","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-lines-symbology#water-traffic","content":" Drawing\tDescription\tTags\tFerry route\troute=ferry  ","version":"Next","tagName":"h2"},{"title":"Platforms​","type":1,"pageTitle":"Lines","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-lines-symbology#platforms","content":" Drawing\tDescription\tTags\tPlatform at a bus stop or station / Railway platform\thighway=platform / railway=platform  ","version":"Next","tagName":"h2"},{"title":"Energy supply​","type":1,"pageTitle":"Lines","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-lines-symbology#energy-supply","content":" Drawing\tDescription\tTags\tMajor power line\tpower=line Minor power line / Path from tee area to the green of a golf course\tpower=minor_line / golf=hole Overground pipeline\tman_made=pipeline + location=overground Overground gas pipeline\tman_made=pipeline + location=overground + substance=gas Overground oil pipeline\tman_made=pipeline + location=overground + substance=oil Overground water pipeline\tman_made=pipeline + location=overground + substance=water Conveyor system for transporting materials\tman_made=goods_conveyor  ","version":"Next","tagName":"h2"},{"title":"Barriers​","type":1,"pageTitle":"Lines","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-lines-symbology#barriers","content":" Drawing\tDescription\tTags\tCity wall\tbarrier=city_wall / historic=citywalls Wall / Fence / Chain / Guard rail / Hand rail / Ditch\tbarrier=retaining_wall / barrier=wall / barrier=fence / barrier=chain / barrier=guard_rail / barrier=handrail / barrier=ditch Hedge\tbarrier=hedge Breakwater / Groyne\tman_made=breakwater / man_made=groyne Weir\twaterway=weir Dam\twaterway=dam  ","version":"Next","tagName":"h2"},{"title":"Nature​","type":1,"pageTitle":"Lines","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-lines-symbology#nature","content":" Drawing\tDescription\tTags\tLine of trees\tnatural=tree_row A straight line cut in a forest\tman_made=cutline Cliff\tnatural=cliff Arete\tnatural=arete Ridge\tnatural=ridge Embankment\tman_made=embankment  ","version":"Next","tagName":"h2"},{"title":"Boundaries​","type":1,"pageTitle":"Lines","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-lines-symbology#boundaries","content":" Drawing\tDescription\tTags\tNational boundary\tboundary=administrative + admin_level=2 Sub-national boundary (highest level)\tboundary=administrative + admin_level=3 Sub-national boundary (second-highest level)\tboundary=administrative + admin_level=4 Sub-national boundary (third-highest level)\tboundary=administrative + admin_level=5 Sub-national boundary (fourth-highest level)\tboundary=administrative + admin_level=6 Sub-national boundary (fifth-highest or sixth-highest level)\tboundary=administrative + admin_level=7 / boundary=administrative + admin_level=8 Sub-national boundary (seventh-highest or eighth-highest level)\tboundary=administrative + admin_level=9 / boundary=administrative + admin_level=10 ","version":"Next","tagName":"h2"},{"title":"Symbols","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols","content":"","keywords":"","version":"Next"},{"title":"Gastronomy​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#gastronomy","content":" Icon\tDescription\tTags\tRestaurant (except fast food) / food court\tamenity=restaurant/ amenity=food_court Cafe\tamenity=cafe Fast food restaurant or snack bar or sandwich bar or similar\tamenity=fast_food Bar\tamenity=bar Pub\tamenity=pub Ice cream shop\tamenity=ice_cream Biergarten (traditional sense)\tamenity=biergarten A outdoor seating area, usually for the consumption of food and drink from neighbouring cafes and restaurants\tleisure=outdoor_seating  ","version":"Next","tagName":"h2"},{"title":"Culture, entertainment and arts​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#culture-entertainment-and-arts","content":" Icon\tDescription\tTags\tArtwork\ttourism=artwork Community centre\tamenity=community_centre Library\tamenity=library Museum\ttourism=museum Theatre\tamenity=theatre Cinema\tamenity=cinema Nightclub\tamenity=nightclub Arts centre\tamenity=arts_centre Art gallery, art museum\ttourism=gallery Internet cafe\tamenity=internet_cafe Casino\tamenity=casino Public bookcase\tamenity=public_bookcase A venue with pay-to-play games\tleisure=amusement_arcade  ","version":"Next","tagName":"h2"},{"title":"Historical objects​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#historical-objects","content":" Icon\tDescription\tTags\tMemorial (standard size)\thistoric=memorial Place in which objects of historic interest are preserved\thistoric=archaeological_site Historical shrine\thistoric=wayside_shrine Monument\thistoric=monument Castle\thistoric=castle Memorial plaque / Blue plaque\thistoric=memorial + memorial=plaque / historic=memorial + memorial=blue_plaque Statue\thistoric=memorial + memorial=statue / tourism=artwork + artwork_type=statue Memorial as a stone\thistoric=memorial + memorial=stone Palace / Stately home\thistoric=castle + castle_type=palace / historic=castle + castle_type=stately Defensive castle / Fortress / Castra / Shiro / Kremlin\thistoric=castle + castle_type=* =&gt;defensive / =&gt;fortress / =&gt;castrum / =&gt;shiro / =&gt;kremlin Military historic fort\thistoric=fort Bust\thistoric=memorial + memorial=bust / tourism=artwork + artwork_type=bust City gate\thistoric=city_gate Manor house\thistoric=castle + castle_type=manor Obelisk\tman_made=obelisk  ","version":"Next","tagName":"h2"},{"title":"Leisure, recreation and sports​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#leisure-recreation-and-sports","content":" Icon\tDescription\tTags\tPlayground\tleisure=playground Fitness centre / fitness station\tleisure=fitness_centre / leisure=fitness_station Golf course\tleisure=golf_course Water park / swimming area / (indoor or outdoor) swimming pool\tleisure=water_park / leisure=swimming_area / leisure=sports_centre + sport=swimming Massage shop\tshop=massage Sauna\tleisure=sauna A location where the public may bathe in common\tamenity=public_bath Miniature golf course\tleisure=miniature_golf A managed beach\tleisure=beach_resort A public place for fishing\tleisure=fishing Bowling centre\tleisure=bowling_alley Dog park\tleisure=dog_park Hole of a golf course\tgolf=pin  ","version":"Next","tagName":"h2"},{"title":"Waste management​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#waste-management","content":" Icon\tDescription\tTags\tPublic toilets\tamenity=toilets Recycling container or recycling centre\tamenity=recycling Waste basket\tamenity=waste_basket Disposal bin (medium size), for bagged up household or industrial waste\tamenity=waste_disposal Excrement bag dispenser\tamenity=vending_machine + vending=excrement_bags  ","version":"Next","tagName":"h2"},{"title":"Outdoor​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#outdoor","content":" Icon\tDescription\tTags\tBench\tamenity=bench Shelter (e.g. weather shelter)\tamenity=shelter Drinking water, bubbler, drinking fountain\tamenity=drinking_water Picnic site\ttourism=picnic_site Fountain (recreational/decorational)\tamenity=fountain Campsite, campground\ttourism=camp_site Picnic table\tleisure=picnic_table Caravan site, caravan park, RV park\ttourism=caravan_site Barbeque\tamenity=bbq Shower\tamenity=shower Fireplace\tleisure=firepit Bird hide\tleisure=bird_hide  ","version":"Next","tagName":"h2"},{"title":"Tourism and accommodation​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#tourism-and-accommodation","content":" Icon\tDescription\tTags\tGuidepost\ttourism=information + information=guidepost Information board\ttourism=information + information=board Board with a map / Information map as 3D-model\ttourism=information + information=map / tourism=information + information=tactile_map Tourism-Information\ttourism=information + information=office Information terminal\ttourism=information + information=terminal Audioguide\ttourism=information + information=audioguide Viewpoint\ttourism=viewpoint Hotel\ttourism=hotel Guest house\ttourism=guest_house Hostel\ttourism=hostel Chalet (holiday cottage)\ttourism=chalet Motel\ttourism=motel Apartment\ttourism=apartment Alpine hut\ttourism=alpine_hut Wilderness hut\ttourism=wilderness_hut  ","version":"Next","tagName":"h2"},{"title":"Finance​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#finance","content":" Icon\tDescription\tTags\tBank\tamenity=bank ATM or cash point\tamenity=atm Bureau de change\tamenity=bureau_de_change  ","version":"Next","tagName":"h2"},{"title":"Healthcare​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#healthcare","content":" Icon\tDescription\tTags\tPharmacy\tamenity=pharmacy Hospital (for stationary treatment)\tamenity=hospital surgery or a small clinic (for ambulant treatment) / Doctor's practice\tamenity=clinic / amenity=doctors Dentist\tamenity=dentist Veterinary\tamenity=veterinary  ","version":"Next","tagName":"h2"},{"title":"Communication​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#communication","content":" Icon\tDescription\tTags\tPost box\tamenity=post_box Post office\tamenity=post_office Machine for picking up and sending parcels\tamenity=parcel_locker Public telephone\tamenity=telephone Emergency phone\temergency=phone  ","version":"Next","tagName":"h2"},{"title":"Transportation​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#transportation","content":" Icon\tDescription\tTags\tCar parking\tamenity=parking Car parking on the carriageway / Car parking adjacent to the carriageway\tamenity=parking + parking=lane / amenity=parking + parking=street_side Bus stop\thighway=bus_stop Gas station or petrol station or similar\tamenity=fuel Bicycle parking\tamenity=bicycle_parking Railway station / Railway stop point / Tram stop point\trailway=station / railway=halt / railway=tram_stop Bus station\tamenity=bus_station Helipad\taeroway=helipad Airport\taeroway=aerodrome Bicycle-sharing/rental station\tamenity=bicycle_rental Slipway for boats\tleisure=slipway Taxi rank\tamenity=taxi A machine selling tickets for parking\tamenity=vending_machine + vending=parking_tickets Subway entrance\trailway=subway_entrance Charging station\tamenity=charging_station Elevator\thighway=elevator Rent a car\tamenity=car_rental Underground parking entrance\tamenity=parking_entrance + parking=underground A machine vending bus, tram, train... tickets\tamenity=vending_machine + vending=public_transport_tickets Ferry terminal\tamenity=ferry_terminal Motorcycle parking\tamenity=motorcycle_parking Bicycle repair station\tamenity=bicycle_repair_station Boat rental\tamenity=boat_rental Multi-storey parking entrance\tamenity=parking_entrance + parking=multi-storey  ","version":"Next","tagName":"h2"},{"title":"Road features​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#road-features","content":" Icon\tDescription\tTags\tOne-way\toneway=yes Gate\tbarrier=gate Traffic lights\thighway=traffic_signals Railroad crossing, zoom &gt;=16\trailway=level_crossing / railway=crossing Railroad crossing, zoom &lt;=15\trailway=level_crossing / railway=crossing Barriers (bollard / large block / turnstile / log)\tbarrier=bollard / barrier=block / barrier=turnstile / barrier=log Boom barrier\tbarrier=lift_gate / barrier=swing_gate Barriers to bicycle traffic\tbarrier=cycle_barrier Stile\tbarrier=stile Mini roundabout\thighway=mini_roundabout Tollbooth\tbarrier=toll_booth Cattle grid\tbarrier=cattle_grid A gate which allows people to cross, but not livestock.\tbarrier=kissing_gate A full-height turnstile\tbarrier=full-height_turnstile Motorcycle barrier\tbarrier=motorcycle_barrier Ford / Ford with stepping stones\tford=yes / ford=stepping_stones Saddle on a course of a way\tmountain_pass=yes Dam\twaterway=dam Weir\twaterway=weir Gate of a lock\twaterway=lock_gate Turning circle at agricultural or forestry roads\tNode with highway=turning_circle at way with highway=track  ","version":"Next","tagName":"h2"},{"title":"Nature​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#nature","content":" Icon\tDescription\tTags\tTree\tnatural=tree Peak, summit, etc.\tnatural=peak Spring\tnatural=spring Cave entrance\tnatural=cave_entrance Waterfall\twaterway=waterfall Topographic saddle\tnatural=saddle Volcano\tnatural=volcano  ","version":"Next","tagName":"h2"},{"title":"Administrative facilities​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#administrative-facilities","content":" Icon\tDescription\tTags\tPolice station\tamenity=police Townhall\tamenity=townhall Fire station\tamenity=fire_station Social facility\tamenity=social_facility Court house\tamenity=courthouse Embassy\toffice=diplomatic + diplomatic=embassy Consulate\toffice=diplomatic + diplomatic=consulate Prison\tamenity=prison  ","version":"Next","tagName":"h2"},{"title":"Religious place​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#religious-place","content":" Icon\tDescription\tTags\tChristian (except Jehovah's Witnesses, La Luz del Mundo, Iglesia ni Cristo and Mormons)\tamenity=place_of_worship + religion=christian Jewish\tamenity=place_of_worship + religion=jewish Muslim\tamenity=place_of_worship + religion=muslim Taoist\tamenity=place_of_worship + religion=taoist Hindu\tamenity=place_of_worship + religion=hindu Buddhist\tamenity=place_of_worship + religion=buddhist Shinto\tamenity=place_of_worship + religion=shinto Sikh\tamenity=place_of_worship + religion=sikh Unspecified or other religion\tamenity=place_of_worship + without or other religion=* value  ","version":"Next","tagName":"h2"},{"title":"Shops and services​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#shops-and-services","content":" Icon\tDescription\tTags\tMarketplace\tamenity=marketplace Convenience store\tshop=convenience Supermarket\tshop=supermarket Clothes shop / Fashion shop\tshop=clothes / shop=fashion Hairdresser's and/or barber's\tshop=hairdresser Bakery\tshop=bakery Car repair service\tshop=car_repair Do-It-Yourself store / Hardware store\tshop=doityourself / shop=hardware Car store\tshop=car Kiosk / Newsstand\tshop=kiosk / shop=newsagent Beauty services except hairdressing\tshop=beauty Car wash\tamenity=car_wash Butcher\tshop=butcher Shop selling alcohol / Wine shop\tshop=alcohol / shop=wine Furniture store\tshop=furniture Florist\tshop=florist Shop selling mobile phones and accessories\tshop=mobile_phone Shop selling consumer electronics\tshop=electronics Shoe store\tshop=shoes Car parts shop\tshop=car_parts Greengrocer / Farm shop\tshop=greengrocer / shop=farm Laundry shop / Clothes dry cleaning service\tshop=laundry / shop=dry_cleaning Optician\tshop=optician Jewellery\tshop=jewelry / shop=jewellery Book store\tshop=books Gift or souvenier shop\tshop=gift Department store\tshop=department_store Bicycle shop, retail, repair and/or rental\tshop=bicycle Confectionery / Chocolate shop / Patisserie\tshop=confectionery / shop=chocolate / shop=pastry Variety store\tshop=variety_store Travel agency\tshop=travel_agency Sports equipment shop\tshop=sports Chemist\tshop=chemist Computer store\tshop=computer Stationery shop\tshop=stationery Pet shop\tshop=pet Shop selling beverages\tshop=beverages Cosmetics shop / Perfumery\tshop=cosmetics / shop=perfumery Tyres shop\tshop=tyres Motorcycle shop\tshop=motorcycle Garden centre\tshop=garden_centre Copy shop\tshop=copyshop Toy shop\tshop=toys Shop selling delicatessen (gourmet foods)\tshop=deli Tobacco shop\tshop=tobacco Shop selling fish and/or seafood\tshop=seafood Shop selling interior decorations\tshop=interior_decoration A shop selling tickets for concerts, events, public transport\tshop=ticket Photo shop or photo studio\tshop=photo / shop=photography A place of business that sells to a particular trade or trades / Wholesale\tshop=trade / shop=wholesale Shop selling outdoor equipment\tshop=outdoor Shop selling houseware\tshop=houseware Art shop\tshop=art Shop selling paints\tshop=paint Shop that sells fabric\tshop=fabric Bookmaker\tshop=bookmaker A shop selling second hand goods\tshop=second_hand Charity store\tshop=charity Shop selling mattresses\tshop=bed A store where you can buy medical equipment\tshop=medical_supply Hi-fi store\tshop=hifi Shop selling recorded music\tshop=music Coffee shop\tshop=coffee Shop selling musical instruments\tshop=musical_instrument Tea shop\tshop=tea Shop selling or renting videos/DVDs\tshop=video Bag shop\tshop=bag Shop selling carpets\tshop=carpet Shop selling video games\tshop=video_games Government vehicle inspection\tamenity=vehicle_inspection Shop selling dairy products\tshop=dairy Shop (specified and other, not listed above) / Driving school\tAny Any shop=* value (except 'yes', 'no', 'vacant', 'closed', 'disused', 'empty') / `amenity=driving_school\t` Office, department, bureau (all)\t`&gt;=* Nursing home care / Childcare\tamenity=nursing_home / amenity=childcare  ","version":"Next","tagName":"h2"},{"title":"Landmarks, man-made infrastructure, masts and towers​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#landmarks-man-made-infrastructure-masts-and-towers","content":" Icon\tDescription\tTags\tStorage tanks / Silo\tman_made=storage_tank / man_made=silo Tower in general\tman_made=tower Communication towers\tman_made=tower + tower:type=communication Wind turbine\tpower=generator + generator:source=wind ( + generator:method=wind_turbine) Hunting stand\tamenity=hunting_stand Wayside cross / Summit cross or similar\thistoric=wayside_cross / man_made=cross Water tower\tman_made=water_tower Mast in general\tman_made=mast Bunker\tmilitary=bunker Chimney\tman_made=chimney Observation tower / Watch tower\tman_made=tower + tower:type=observation / man_made=tower + tower:type=watchtower Bell tower\tman_made=tower + tower:type=bell_tower Towers for lighting\tman_made=tower + tower:type=lighting Lighthouse\tman_made=lighthouse Advertising column\tadvertising=column Crane (stationary)\tman_made=crane Windmill\tman_made=windmill Lattice communication towers\tman_made=tower + tower:type=communication + tower:construction=lattice Poles for lighting\tman_made=mast + tower:type=lighting Mast with transmitters\tman_made=mast + tower:type=communication A huge tower for transmitting radio applications\tman_made=communications_tower Fortified defensive tower\tman_made=tower + tower:type=defensive Cooling tower\tman_made=tower + tower:type=cooling The tower is constructed from steel lattice\tman_made=tower + tower:construction=lattice Tower is constructed from steel lattice for lighting\tman_made=tower + tower:type=lighting + tower:construction=lattice The 'communication tower' is a dish\tman_made=tower + tower:construction=dish The 'communication tower' is a dome\tman_made=tower + tower:construction=dome Radio telescope\tman_made=telescope + telescope:type=radio Optical telescope\tman_made=telescope + telescope:type=optical  ","version":"Next","tagName":"h2"},{"title":"Electricity​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#electricity","content":" Icon\tDescription\tTags\tBig electricity pylon, carrying high voltage electricity cables\tpower=tower Small electricity pole, carrying low voltage electricity cables\tpower=pole  ","version":"Next","tagName":"h2"},{"title":"Places​","type":1,"pageTitle":"Symbols","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-symbols#places","content":" Icon\tDescription\tTags\tCity\tplace=city Capital\tcapital=* Entrance (exit) of a building\tentrance=yes Main entrance (exit) of a building\tentrance=main A backdoor of a building\tentrance=service Any door of a building and access is not allowed\tentrance=* + access=no ","version":"Next","tagName":"h2"},{"title":"Expansion service API reference","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-expansion","content":"","keywords":"","version":"Next"},{"title":"Inputs of the Expansion service​","type":1,"pageTitle":"Expansion service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-expansion#inputs-of-the-expansion-service","content":" Since this service wraps other services, the request format mostly follows the ones of the route, isochrone and matrix. Additionally, it accepts the following parameters:  Parameter\tDescriptionaction (required)\tThe service whose expansion should be tracked. Currently one of route, isochrone or sources_to_targets. skip_opposites (optional)\tIf set to true the output won't contain an edge's opposing edge. Opposing edges can be thought of as both directions of one road segment. Of the two, we discard the directional edge with higher cost and keep the one with less cost. Default false. expansion_properties (optional)\tA JSON array of strings of the GeoJSON property keys you'd like to have in the response. One or multiple of &quot;durations&quot;, &quot;distances&quot;, &quot;costs&quot;, &quot;edge_ids&quot;, &quot;statuses&quot;. Note, that each additional property will increase the output size by minimum ~ 25%. By default an empty properties object is returned.  The expansion_properties choices are as follows:  Property\tDescriptiondistances\tReturns the accumulated distance in meters for each edge in order of graph traversal. durations\tReturns the accumulated duration in seconds for each edge in order of graph traversal. costs\tReturns the accumulated cost for each edge in order of graph traversal. edge_ids\tReturns the internal edge IDs for each edge in order of graph traversal. Mostly interesting for debugging. statuses\tReturns the edge states for each edge in order of graph traversal. Mostly interesting for debugging. Can be one of &quot;r&quot; (reached), &quot;s&quot; (settled), &quot;c&quot; (connected).  An example request is:  {&quot;expansion_properties&quot;:[&quot;distances&quot;, &quot;durations&quot;, &quot;costs&quot;],&quot;contours&quot;:[{&quot;time&quot;:1.0}],&quot;locations&quot;:[{&quot;lon&quot;:0.00026949361342338066,&quot;lat&quot;:-0.00017966240895360996}],&quot;costing&quot;:&quot;auto&quot;,&quot;action&quot;:&quot;isochrone&quot;}   ","version":"Next","tagName":"h2"},{"title":"Outputs of the Expansion service​","type":1,"pageTitle":"Expansion service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-expansion#outputs-of-the-expansion-service","content":" In the service response, the expanded way segments are returned as GeoJSON. The geometry is a single MultiLineString with each LineString representing one way segment (edge). Due to the verbosity of the GeoJSON format, single geometry features would produce prohibitively huge responses. However, that also means that the properties contain arrays of the tracked attributes, where the indices are correlating to the coordinates array, i.e. the 3rd element in a properties array will correspond to the 3rd LineString in the MultiLineString geometry.  The output will only contain the properties which were specified in the expansion_properties request array. If the parameter was omitted in the request, the output will contain an empty properties object.  An example response for &quot;action&quot;: &quot;isochrone&quot; is:  {&quot;properties&quot;:{&quot;algorithm&quot;:&quot;unidirectional_dijkstra&quot;},&quot;type&quot;:&quot;FeatureCollection&quot;,&quot;features&quot;:[{&quot;type&quot;:&quot;Feature&quot;,&quot;geometry&quot;:{&quot;type&quot;:&quot;MultiLineString&quot;,&quot;coordinates&quot;:[[[0.00027,-0.00017],[0.00027,0.0]],[[0.00027,-0.00017],[0.00027,-0.00035]],[[0.00027,-0.00035],[0.00027,-0.00017]],[[0.00027,0.0],[0.00027,-0.00017]],[[0.00027,-0.00017],[0.00053,-0.00017]],[[0.00027,-0.00017],[0.0,-0.00017]],[[0.0,-0.00017],[0.00027,-0.00017]],[[0.00053,-0.00017],[0.0008,-0.00017]],[[0.0008,-0.00017],[0.00053,-0.00017]],[[0.00053,-0.00017],[0.00027,-0.00017]],[[0.00053,-0.00017],[0.0008,0.0]]]},&quot;properties&quot;:{&quot;distances&quot;:[20,20,40,40,30,30,60,60,90,120,80],&quot;durations&quot;:[0,0,29,29,1,1,30,2,31,33,5],&quot;costs&quot;:[0,0,1,1,1,1,2,2,3,4,11]}}]}  ","version":"Next","tagName":"h2"},{"title":"Areas","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-areas-symbology","content":"","keywords":"","version":"Next"},{"title":"Nature​","type":1,"pageTitle":"Areas","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-areas-symbology#nature","content":" Area Symbol\tDescription\tOverlay?\tTags\t(no symbol)\tLand (This is only shown when no more specific information is available)\tNo (no symbol)\tBody of water (ocean, sea, pond, river) / swimming pool / artificial basin / artificial lake / water-covered area of a river / dock\tNo\tnatural=water / leisure=swimming_pool / landuse=basin / landuse=reservoir / waterway=riverbank / waterway=dock (no symbol)\tWater body intermittent / Water body seasonal / Infiltration basin / Detention basin\tNo\tnatural=water + intermittent=* / natural=water + seasonal=* / landuse=basin + basin=infiltration / landuse=basin + basin=detention (no symbol)\tReef\tNo\tnatural=reef (no symbol)\tNatural woodland which is mostly or not at all not used for timber production\tYes\tnatural=wood (no symbol)\tBroadleaved woodland\tYes\tnatural=wood + leaf_type=broadleaved (no symbol)\tNeedleleaved woodland\tYes\tnatural=wood + leaf_type=needleleaved (no symbol)\tMixed woodland\tYes\tnatural=wood + leaf_type=mixed (no symbol)\tLeafless vegetation\tYes\tnatural=wood + leaf_type=leafless (no symbol)\tNatural grassland\tNo\tnatural=grassland (no symbol)\tBushes and small trees\tNo\tnatural=scrub (no symbol)\tDwarf scrubs\tNo\tnatural=heath (no symbol)\tGeneric beach / Shoal\tNo\tnatural=beach / natural=shoal (no symbol)\tGeneric sand area / golf bunker\tNo\tnatural=sand / golf=bunker (no symbol)\tBeach with sand surface / shoal with sand surface\tNo\tnatural=beach + surface=sand / natural=shoal + surface=sand (no symbol)\tBeach with coarse sand surface / shoal with coarse sand surface\tNo\tnatural=beach + surface=gravel / natural=shoal + surface=gravel (no symbol)\tBare rock surface\tNo\tnatural=bare_rock (no symbol)\tScree / Shingle\tNo\tnatural=scree / natural=shingle (no symbol)\tWetland (generic)\tYes\tnatural=wetland (no symbol)\tMud\tNo\tnatural=mud (no symbol)\tMarsh / Semi-wetland meadow / Fen\tYes\tnatural=wetland + wetland=marsh / natural=wetland + wetland=wet_meadow / natural=wetland + wetland=fen (no symbol)\tReedbed\tYes\tnatural=wetland + wetland=reedbed (no symbol)\tSalt marsh\tYes\tnatural=wetland + wetland=saltmarsh (no symbol)\tSwamp\tYes\tnatural=wetland + wetland=swamp (no symbol)\tMangrove\tYes\tnatural=wetland + wetland=mangrove (no symbol)\tBog / String bog\tYes\tnatural=wetland + wetland=bog / natural=wetland + wetland=string_bog (no symbol)\tTidalflat, Mudflat\tYes\tnatural=wetland + wetland=tidalflat (no symbol)\tSalt pond\tYes\tlanduse=salt_pond (no symbol)\tGlacier\tNo\tnatural=glacier  ","version":"Next","tagName":"h2"},{"title":"City planning​","type":1,"pageTitle":"Areas","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-areas-symbology#city-planning","content":" Area Symbol\tDescription\tOverlay?\tTags\t(no symbol)\tResidential area\tNo\tlanduse=residential (no symbol)\tCommercial area or business park (predominantly offices)\tNo\tlanduse=commercial (no symbol)\tRetail area (predominantly shops) / Shopping mall\tNo\tlanduse=retail / shop=mall A marketplace where trade is regulated\tNo\tamenity=marketplace (no symbol)\tIndustrial area / Area for railway usage / Waterworks / Wastewater plant\tNo\tlanduse=industrial / landuse=railway / man_made=water_works / man_made=wastewater_plant Railway station\tNo\trailway=station (no symbol)\tGarages area\tNo\tlanduse=garages (no symbol)\tChristian cemetery / Christian grave yard\tNo\tlanduse=cemetery + religion=christian / amenity=grave_yard + religion=christian (no symbol)\tJewish cemetery / Jewish grave yard\tNo\tlanduse=cemetery + religion=jewish / amenity=grave_yard + religion=jewish (no symbol)\tMuslim cemetery / Muslim grave yard\tNo\tlanduse=cemetery + religion=muslim / amenity=grave_yard + religion=muslim (no symbol)\tCemetery with unknown, other or no specific religious background / Grave yard with unknown, other or no specific religious background\tNo\tlanduse=cemetery / amenity=grave_yard (no symbol)\tBrownfield / Construction yard\tNo\tlanduse=brownfield / landuse=construction (no symbol)\tLandfill\tNo\tlanduse=landfill  ","version":"Next","tagName":"h2"},{"title":"Buildings​","type":1,"pageTitle":"Areas","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-areas-symbology#buildings","content":" Area Symbol\tDescription\tOverlay?\tTags\t(no symbol)\tNon-specific building\tNo\tbuilding=* (no symbol)\tAirport terminal / Train station / Aerialway station / Bus station\tNo\taeroway=terminal + building=* / building=train_station / aerialway=station + building=* / public_transport=station + building=* Place of worship where religious practices are held, i.e. church, synagogue, mosque, temple.\tNo\tamenity=place_of_worship + building=*  ","version":"Next","tagName":"h2"},{"title":"Transportation​","type":1,"pageTitle":"Areas","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-areas-symbology#transportation","content":" Area Symbol\tDescription\tOverlay?\tTags Car parking lot Bicycle parking Motorcycle parking Taxi rank\tNo\tamenity=parking amenity=bicycle_parking amenity=motorcycle_parking amenity=taxi Airport Ferry terminal Bus station\tNo\taeroway=aerodrome amenity=ferry_terminal amenity=bus_station (no symbol)\tPlace where drivers can leave a road to refuel, rest, or take refreshments / Place where drivers can leave the road to rest, but not refuel\tNo\thighway=services / highway=rest_area (no symbol)\tPlatform at a bus stop or station / Railway platform\tNo\thighway=platform / railway=platform (no symbol)\tBridge\tNo\tman_made=bridge (no symbol)\tRunway / taxiway\tNo\taeroway=runway / aeroway=taxiway helipad\tNo\taeroway=helipad (no symbol)\tApron\tNo\taeroway=apron (no symbol)\tService, residential, unclassified highway as a freely routable area\tNo\thighway=service + area=yes / highway=residential + area=yes / highway=unclassified + area=yes (no symbol)\tLiving street as an freely routable area\tNo\thighway=living_street + area=yes (no symbol)\tPedestrian street, footway or path as a freely routable area\tNo\thighway=pedestrian + area=yes / highway=footway + area=yes / highway=path + area=yes (no symbol)\tAgricultural, forestry road (track) as a place\tNo\thighway=track + area=yes  ","version":"Next","tagName":"h2"},{"title":"Agriculture and industry​","type":1,"pageTitle":"Areas","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-areas-symbology#agriculture-and-industry","content":" Area Symbol\tDescription\tOverlay?\tTags\t(no symbol)\tFarmland / Land area used for growing plants in greenhouses\tNo\tlanduse=farmland / landuse=greenhouse_horticulture (no symbol)\tFarmyard\tNo\tlanduse=farmyard (no symbol)\tAllotments\tNo\tlanduse=allotments (no symbol)\tOrchard\tNo\tlanduse=orchard (no symbol)\tPlant nursery\tNo\tlanduse=plant_nursery (no symbol)\tGarden\tNo\tleisure=garden (no symbol)\tManaged forest\tNo\tlanduse=forest (no symbol)\tBroadleaved woodland\tNo\tlanduse=forest + leaf_type=broadleaved (no symbol)\tNeedleleaved woodland\tNo\tlanduse=forest + leaf_type=needleleaved (no symbol)\tMixed woodland\tNo\tlanduse=forest + leaf_type=mixed (no symbol)\tLeafless vegetation\tNo\tlanduse=forest + leaf_type=leafless (no symbol)\tVineyard\tNo\tlanduse=vineyard (no symbol)\tQuarry\tNo\tlanduse=quarry (no symbol)\tDam\tNo\twaterway=dam  ","version":"Next","tagName":"h2"},{"title":"Electricity​","type":1,"pageTitle":"Areas","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-areas-symbology#electricity","content":" Area Symbol\tDescription\tOverlay?\tTags\t(no symbol)\tGenerator / Substation / Plant\tNo\tpower=generator / power=substation / power=plant  ","version":"Next","tagName":"h2"},{"title":"Leisure and recreation​","type":1,"pageTitle":"Areas","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-areas-symbology#leisure-and-recreation","content":" Area Symbol\tDescription\tOverlay?\tTags\t(no symbol)\tPark\tNo\tleisure=park (no symbol)\tRecreation ground\tNo\tlanduse=recreation_ground Playground Fitness station\tNo\tleisure=playground leisure=fitness_station (no symbol)\t(managed) Grassland / (managed) Meadow / Village green / Teeing ground of a golf course / Fairway of a golf course / Driving range of a golf course\tNo\tlanduse=grass / landuse=meadow / landuse=village_green / golf=tee / golf=fairway / golf=driving_range Campsite Caravansite\tNo\ttourism=camp_site tourism=caravan_site Dog park\tNo\tleisure=dog_park  ","version":"Next","tagName":"h2"},{"title":"Sports​","type":1,"pageTitle":"Areas","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-areas-symbology#sports","content":" Area Symbol\tDescription\tOverlay?\tTags\t(no symbol)\tSports centre / Stadium\tNo\tleisure=sports_centre / leisure=stadium (no symbol)\tSports pitch (i.e. soccer field, basketball field, etc.) / Running track\tNo\tleisure=pitch / leisure=track (no symbol)\tA place where you can skate and play bandy or ice hockey\tNo\tleisure=ice_rink Golf course Miniature golf course\tNo\tleisure=golf_course leisure=miniature_golf (no symbol)\tGolf rough\tNo\tgolf=rough (no symbol)\tPutting green of a golf course\tNo\tgolf=green  ","version":"Next","tagName":"h2"},{"title":"Institutional areas​","type":1,"pageTitle":"Areas","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-areas-symbology#institutional-areas","content":" Area Symbol\tDescription\tOverlay?\tTags\t(no symbol)\tArea which belongs to a kindergarten / school / college / university\tNo\tamenity=kindergarten / amenity=school / amenity=college / amenity=university Area which belongs to a community centre social facility arts centre\tNo\tamenity=community_centre amenity=social_facility amenity=arts_centre Area which belongs to a hospital\tNo\tamenity=hospital Area which belongs to a clinic\tNo\tamenity=clinic Police station Fire station\tNo\tamenity=police amenity=fire_station Prison ground\tYes\tamenity=prison (no symbol)\tReligious ground\tNo\tlanduse=religious Place of worship where religious practices are held (other than building).\tNo\tamenity=place_of_worship  ","version":"Next","tagName":"h2"},{"title":"Military​","type":1,"pageTitle":"Areas","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-areas-symbology#military","content":" Area Symbol\tDescription\tOverlay?\tTags\t(no symbol)\tLand used by the military.\tYes\tlanduse=military (no symbol)\tA military zone which has been be declared to be dangerous for some reason (i.e. a firing range, bombing range, etc.).\tYes\tmilitary=danger_area  ","version":"Next","tagName":"h2"},{"title":"Miscellaneous - framed areas​","type":1,"pageTitle":"Areas","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/osm-carto/osm-carto-areas-symbology#miscellaneous---framed-areas","content":" Area Symbol\tDescription\tOverlay?\tTags\t(no symbol)\tNational park / Nature reserve\tYes\tboundary=national_park / leisure=nature_reserve (no symbol)\tAboriginal Lands\tYes\tboundary=aboriginal_lands (no symbol)\tZoo\tYes\ttourism=zoo (no symbol)\tMarina\tYes\tleisure=marina (no symbol)\tTheme park, Amusement park, Discovery park, Open-air museum, Miniature park\tYes\ttourism=theme_park (no symbol)\tsingle parking space on a parking lot\tYes\tamenity=parking_space ","version":"Next","tagName":"h2"},{"title":"Isochrone & Isodistance service API reference","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-isochrone","content":"","keywords":"","version":"Next"},{"title":"Inputs of the Isochrone service​","type":1,"pageTitle":"Isochrone & Isodistance service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-isochrone#inputs-of-the-isochrone-service","content":" An isochrone request run locally takes the form of localhost:8002/isochrone?json={}, where the JSON inputs inside the {} includes an array of at least one location and options for the route costing model.  For example, you can use the isochrone service to find out where you can travel within a 15-minute walk from your office building. The API request for this uses isochrone? as the request action, pedestrian costing, and a single contour for a 15-minute time interval. The response is GeoJSON, which you can display on a map to visualize where you might be able to walk.  {&quot;locations&quot;:[{&quot;lat&quot;:40.744014,&quot;lon&quot;:-73.990508}],&quot;costing&quot;:&quot;pedestrian&quot;,&quot;contours&quot;:[{&quot;time&quot;:15.0,&quot;color&quot;:&quot;ff0000&quot;}]}&amp;id=Walk_From_Office   There is an option to name your isochrone request by appending &amp;id=. The id is returned with the response so you can match it to your corresponding request.  ","version":"Next","tagName":"h2"},{"title":"Location parameters​","type":1,"pageTitle":"Isochrone & Isodistance service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-isochrone#location-parameters","content":" The locations must include a latitude and longitude in decimal degrees. The coordinates can come from many input sources, such as a GPS location, a point or a click on a map, a geocoding service, and so on. External search services, such as Mapbox Geocoding can be used to find places and geocode addresses, whose coordinates can be used as input to the service.  Location parameters\tDescriptionlat\tLatitude of the location in degrees. lon\tLongitude of the location in degrees.  Refer to the route location documentation for more information on specifying locations.  ","version":"Next","tagName":"h3"},{"title":"Costing parameters​","type":1,"pageTitle":"Isochrone & Isodistance service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-isochrone#costing-parameters","content":" The isochrone service uses the auto, bicycle, pedestrian, and multimodal and all other costing models available in the Valhalla Turn-by-Turn service. Refer to the route costing models and costing options documentation for more on how to specify this input.  ","version":"Next","tagName":"h3"},{"title":"Other request parameters​","type":1,"pageTitle":"Isochrone & Isodistance service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-isochrone#other-request-parameters","content":" Parameter description Parameter\tDescriptiondate_time\tThe local date and time at the location. type 0 - Current departure time.1 - Specified departure time.2 - Specified arrival time. Note: This is not yet implemented for multimodal. value - the date and time specified in ISO 8601 format (YYYY-MM-DDThh:mm) in the local time zone of departure or arrival. For example, &quot;2016-07-03T08:06&quot; id\tName of the isochrone request. If id is specified, the name is returned with the response. contours\tA JSON array of contour objects with the time in minutes or distance in kilometers and color to use for each isochrone contour. You can specify up to four contours (by default). time - A floating point value specifying the time in minutes for the contour.distance - A floating point value specifying the distance in kilometers for the contour.color - The color for the output of the contour. Specify it as a Hex value, but without the #, such as &quot;color&quot;:&quot;ff0000&quot; for red. If no color is specified, the isochrone service will assign a default color to the output. You can only specify one metric per contour, i.e. time or distance. polygons\tA Boolean value to determine whether to return geojson polygons or linestrings as the contours. The default is false, which returns lines; when true, polygons are returned. Note: When polygons is true, any contour that forms a ring is returned as a polygon. denoise\tA floating point value from 0 to 1 (default of 1) which can be used to remove smaller contours. A value of 1 will only return the largest contour for a given time value. A value of 0.5 drops any contours that are less than half the area of the largest contour in the set of contours for that same time value. generalize\tA floating point value in meters used as the tolerance for Douglas-Peuckergeneralization. Note: Generalization of contours can lead to self-intersections, as well as intersections of adjacent contours. show_locations\tA boolean indicating whether the input locations should be returned as MultiPoint features: one feature for the exact input coordinates and one feature for the coordinates of the network node it snapped to. Default false.  ","version":"Next","tagName":"h3"},{"title":"Outputs of the Isochrone service​","type":1,"pageTitle":"Isochrone & Isodistance service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-isochrone#outputs-of-the-isochrone-service","content":" In the service response, the isochrone contours are returned as GeoJSON, which can be integrated into mapping applications.  The contours are calculated using rasters and are returned as either polygon or line features, depending on your input setting for the polygons parameter. If an isochrone request has been named using the optional &amp;id= input, then the id is returned as a name property for the feature collection within the GeoJSON response. A metric attribute lets you know whether it's a distance or time contour. A warnings array may also be included. This array may contain warning objects informing about deprecated request parameters, clamped values etc. |  See the HTTP return codes for more on messages you might receive from the service.  ","version":"Next","tagName":"h2"},{"title":"Draw isochrones on a map​","type":1,"pageTitle":"Isochrone & Isodistance service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-isochrone#draw-isochrones-on-a-map","content":" Most JavaScript-based GeoJSON renderers, including Leaflet, can use the isochrone styling information directly from the response. At present, you cannot control the opacity through the API.  When making a map, drawing the isochrone contours as lines is more straightforward than polygons, and, therefore, currently is the default and recommended method. When deciding between the output as lines and polygons, consider your use case and the additional styling considerations involved with polygons. For example, fills should be rendered as semi-transparent over the other map layers so they are visible, although you may have more flexibility when using a vector-based map. In addition, polygons from multiple contour levels do not have overlapping areas cut out or removed. In other words, the outer contours include the areas of any inner contours, causing the colors and transparencies to blend when multiple contour polygons are drawn at the same time.  ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Isochrone & Isodistance service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-isochrone#examples","content":"   &lt;VALHALLA BASE URL&gt;/isochrone?json={&quot;costing&quot;:&quot;pedestrian&quot;,&quot;costing_options&quot;:{&quot;pedestrian&quot;:{&quot;exclude_polygons&quot;:[],&quot;use_ferry&quot;:1,&quot;use_living_streets&quot;:0.5,&quot;use_tracks&quot;:0,&quot;service_penalty&quot;:15,&quot;service_factor&quot;:1,&quot;shortest&quot;:false,&quot;use_hills&quot;:0.5,&quot;walking_speed&quot;:5.1,&quot;walkway_factor&quot;:1,&quot;sidewalk_factor&quot;:1,&quot;alley_factor&quot;:2,&quot;driveway_factor&quot;:5,&quot;step_penalty&quot;:0,&quot;max_hiking_difficulty&quot;:1,&quot;use_lit&quot;:0,&quot;transit_start_end_max_distance&quot;:2145,&quot;transit_transfer_max_distance&quot;:800}},&quot;contours&quot;:[{&quot;time&quot;:1},{&quot;time&quot;:2},{&quot;time&quot;:3}],&quot;locations&quot;:[{&quot;lon&quot;:35.208714008331306,&quot;lat&quot;:31.78339608836721,&quot;type&quot;:&quot;break&quot;}],&quot;directions_options&quot;:{&quot;units&quot;:&quot;kilometers&quot;},&quot;id&quot;:&quot;valhalla_isochrones_lonlat_35.208714008331306,31.78339608836721_range_3_interval_1&quot;}`   Lookup 'Many To Many' Results in JSON Format Lookup Results in JSON Format { &quot;id&quot;: &quot;valhalla_isochrones_lonlat_35.208714008331306,31.78339608836721_range_3_interval_1&quot;, &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [ { &quot;properties&quot;: { &quot;fill&quot;: &quot;#bf4040&quot;, &quot;fillOpacity&quot;: 0.33, &quot;fill-opacity&quot;: 0.33, &quot;fillColor&quot;: &quot;#bf4040&quot;, &quot;color&quot;: &quot;#bf4040&quot;, &quot;contour&quot;: 3, &quot;opacity&quot;: 0.33, &quot;metric&quot;: &quot;time&quot; }, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ 35.209714, 31.784679 ], [ 35.208714, 31.785037 ], [ 35.207714, 31.784796 ], [ 35.207385, 31.783726 ], [ 35.206662, 31.783396 ], [ 35.206649, 31.782396 ], [ 35.207868, 31.781550 ], [ 35.208714, 31.781309 ], [ 35.210372, 31.782396 ], [ 35.210588, 31.783396 ], [ 35.209714, 31.784679 ] ], &quot;type&quot;: &quot;LineString&quot; }, &quot;type&quot;: &quot;Feature&quot; }, { &quot;properties&quot;: { &quot;fill&quot;: &quot;#bfaa40&quot;, &quot;fillOpacity&quot;: 0.33, &quot;fill-opacity&quot;: 0.33, &quot;fillColor&quot;: &quot;#bfaa40&quot;, &quot;color&quot;: &quot;#bfaa40&quot;, &quot;contour&quot;: 2, &quot;opacity&quot;: 0.33, &quot;metric&quot;: &quot;time&quot; }, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ 35.208714, 31.784654 ], [ 35.207428, 31.783396 ], [ 35.208714, 31.781960 ], [ 35.209848, 31.782396 ], [ 35.209991, 31.783396 ], [ 35.208714, 31.784654 ] ], &quot;type&quot;: &quot;LineString&quot; }, &quot;type&quot;: &quot;Feature&quot; }, { &quot;properties&quot;: { &quot;fill&quot;: &quot;#6abf40&quot;, &quot;fillOpacity&quot;: 0.33, &quot;fill-opacity&quot;: 0.33, &quot;fillColor&quot;: &quot;#6abf40&quot;, &quot;color&quot;: &quot;#6abf40&quot;, &quot;contour&quot;: 1, &quot;opacity&quot;: 0.33, &quot;metric&quot;: &quot;time&quot; }, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ 35.208714, 31.784150 ], [ 35.208124, 31.783396 ], [ 35.208714, 31.782647 ], [ 35.209365, 31.783396 ], [ 35.208714, 31.784150 ] ], &quot;type&quot;: &quot;LineString&quot; }, &quot;type&quot;: &quot;Feature&quot; } ] }  ","version":"Next","tagName":"h2"},{"title":"Time-Distance Matrix service API reference","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-matrix","content":"","keywords":"","version":"Next"},{"title":"Matrix service​","type":1,"pageTitle":"Time-Distance Matrix service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-matrix#matrix-service","content":" The time distance matrix service takes a sources and targets to list locations. This allows you to set the source (origin) locations separately from the target (destination) locations. The set of origins may be disjoint (not overlapping) with the set of destinations. In other words, the target locations do not have to include any locations from source locations. The time-distance matrix can return a row matrix, a column matrix, or a general matrix of computed time and distance, depending on your input for the sources and targets parameters. The general case is a row ordered matrix with the time and distance from each source location to each target location. A row vector is considered a one_to_many time-distance matrix where there is one source location and multiple target locations. The time and distance from the source location to all target locations is returned. A column matrix represents a many_to_one time-distance matrix where there are many sources and one target. Another special case is when the source location list is the same as the target location list. Here, a diagonal (square matrix with [0,0.00] on the diagonal elements) matrix is returned. The is special case is often used as the input to optimized routing problems.  ","version":"Next","tagName":"h2"},{"title":"Inputs of the matrix service​","type":1,"pageTitle":"Time-Distance Matrix service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-matrix#inputs-of-the-matrix-service","content":" The matrix request run locally takes the form of localhost:8002/sources_to_targets?json={}, where the JSON inputs inside the {} includes at least one location for both sources and for targets as well as the route costing type and options for the route costing model.  For example, while at your office, you want to know the times and distances to walk to several restaurants where you could have dinner, as well as the times and distances from each restaurant to the train station for your commute home. This will help you determine where to eat.  one-to-many using /sources_to_targets?  {&quot;sources&quot;:[{&quot;lat&quot;:40.744014,&quot;lon&quot;:-73.990508}],&quot;targets&quot;:[{&quot;lat&quot;:40.744014,&quot;lon&quot;:-73.990508},{&quot;lat&quot;:40.739735,&quot;lon&quot;:-73.979713},{&quot;lat&quot;:40.752522,&quot;lon&quot;:-73.985015},{&quot;lat&quot;:40.750117,&quot;lon&quot;:-73.983704},{&quot;lat&quot;:40.750552,&quot;lon&quot;:-73.993519}],&quot;costing&quot;:&quot;pedestrian&quot;}   many-to-one using /sources_to_targets?  {&quot;sources&quot;:[{&quot;lat&quot;:40.744014,&quot;lon&quot;:-73.990508},{&quot;lat&quot;:40.739735,&quot;lon&quot;:-73.979713},{&quot;lat&quot;:40.752522,&quot;lon&quot;:-73.985015},{&quot;lat&quot;:40.750117,&quot;lon&quot;:-73.983704},{&quot;lat&quot;:40.750552,&quot;lon&quot;:-73.993519}],&quot;targets&quot;:[{&quot;lat&quot;:40.750552,&quot;lon&quot;:-73.993519}],&quot;costing&quot;:&quot;pedestrian&quot;}   many-to-many using /sources_to_targets?  {&quot;sources&quot;:[{&quot;lat&quot;:40.744014,&quot;lon&quot;:-73.990508},{&quot;lat&quot;:40.739735,&quot;lon&quot;:-73.979713},{&quot;lat&quot;:40.752522,&quot;lon&quot;:-73.985015},{&quot;lat&quot;:40.750117,&quot;lon&quot;:-73.983704},{&quot;lat&quot;:40.750552,&quot;lon&quot;:-73.993519}],&quot;targets&quot;:[{&quot;lat&quot;:40.744014,&quot;lon&quot;:-73.990508},{&quot;lat&quot;:40.739735,&quot;lon&quot;:-73.979713},{&quot;lat&quot;:40.752522,&quot;lon&quot;:-73.985015},{&quot;lat&quot;:40.750117,&quot;lon&quot;:-73.983704},{&quot;lat&quot;:40.750552,&quot;lon&quot;:-73.993519}],&quot;costing&quot;:&quot;pedestrian&quot;}   ","version":"Next","tagName":"h2"},{"title":"Source and target parameters​","type":1,"pageTitle":"Time-Distance Matrix service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-matrix#source-and-target-parameters","content":" When using the sources_to_targets action, you specify sources and targets as ordered lists of one or more locations within a JSON array, depending on the type of matrix result you are expecting.  A source and target must include a latitude and longitude in decimal degrees. The coordinates can come from many input sources, such as a GPS location, a point or a click on a map, a geocoding service, and so on.  Source and target parameters description Source and target parameters\tDescriptionlat\tLatitude of the source/target in degrees. lon\tLongitude of the source/target in degrees. date_time\tExpected date/time for the user to be at the location using the ISO 8601 format (YYYY-MM-DDThh:mm) in the local time zone of departure or arrival. date_time as location input offers more granularity over setting time than the global date_time object (see below).  You can refer to the route location documentation for more information on specifying locations.  Note: date_time strings behave differently for sources_to_targets than for route. If set on the sources and there's more targets than sources, it'll behave like a &quot;Specified departure time&quot; on the sources. If set on the targets and there's less targets than sources, it'll behave like a &quot;Specified arrival time&quot; on the targets.  Also, using type in addition to the lat and lon within the location parameter has no meaning for matrices.  ","version":"Next","tagName":"h3"},{"title":"Costing parameters​","type":1,"pageTitle":"Time-Distance Matrix service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-matrix#costing-parameters","content":" The Time-Distance Matrix service uses the auto, bicycle, pedestrian and bikeshare and other costing models available in the route service. Exception: multimodal costing is not supported for the time-distance matrix service at this time. Refer to the route costing models and costing options documentation for more on how to specify this input.  ","version":"Next","tagName":"h3"},{"title":"Other request options​","type":1,"pageTitle":"Time-Distance Matrix service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-matrix#other-request-options","content":" Options with description Options\tDescriptionid\tName your matrix request. If id is specified, the naming will be sent thru to the response. matrix_locations\tFor one-to-many or many-to-one requests this specifies the minimum number of locations that satisfy the request. However, when specified, this option allows a partial result to be returned. This is basically equivalent to &quot;find the closest/best matrix_locations locations out of the full location set&quot;. date_time\tThis is the local date and time at the location. type 0 - Current departure time.1 - Specified departure time2 - Specified arrival time. value - the date and time is specified in ISO 8601 format (YYYY-MM-DDThh:mm) in the local time zone of departure or arrival. For example &quot;2016-07-03T08:06&quot; verbose\tIf true it will output a flat list of objects for distances &amp; durations explicitly specifying the source &amp; target indices. If false will return more compact, nested row-major distances &amp; durations arrays and not echo sources and targets. Default true.  ","version":"Next","tagName":"h3"},{"title":"Time-dependent matrices​","type":1,"pageTitle":"Time-Distance Matrix service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-matrix#time-dependent-matrices","content":" Most control can be achieved when setting a date_time string on each source or target. When setting the global date_time object as a shortcut instead, Valhalla will translate that to setting the date_time.value on all source locations when date_time.type = 0/1 and on all target locations when date_time.type = 2.  However, there are important limitations of the /sources_to_targets service's time awareness. Due to algorithmic complexity, we disallow time-dependence for certain combinations of date_time on locations, if  date_time.type = 0/1 or date_time on any source, when there's more sources than targetsdate_time.type = 2 or date_time on any target, when there's more or equal amount of targets than/as sources  ","version":"Next","tagName":"h3"},{"title":"Outputs of the matrix service​","type":1,"pageTitle":"Time-Distance Matrix service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-matrix#outputs-of-the-matrix-service","content":" If a matrix request has been named using the optional &amp;id= input, then the name will be returned as a string id.  These are the results of a request to the Time-Distance Matrix service.  Item description Item\tDescriptionsources_to_targets\tReturns an array of time and distance between the sources and the targets. The array is row-ordered. This means that the time and distance from the first location to all others forms the first row of the array, followed by the time and distance from the second source location to all target locations, etc. distance\tThe computed distance between each set of points. Distance will always be 0.00 for the first element of the time-distance array for one_to_many, the last element in a many_to_one, and the first and last elements of a many_to_many. time\tThe computed time between each set of points. Time will always be 0 for the first element of the time-distance array for one_to_many, the last element in a many_to_one, and the first and last elements of a many_to_many. to_index\tThe destination index into the locations array. from_index\tThe origin index into the locations array. date_time\t(optional) If the date_time was valid for an origin, date_time will return the local time at the destination. locations\tThe specified array of lat/lngs from the input request. units\tDistance units for output. Allowable unit types are mi (miles) and km (kilometers). If no unit type is specified, the units default to kilometers. warnings (optional)\tThis array may contain warning objects informing about deprecated request parameters, clamped values etc.  See the HTTP return codes for more on messages you might receive from the service.  ","version":"Next","tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"Time-Distance Matrix service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-matrix#examples","content":" 'One To Many' request:​  &lt;VALHALLA BASE URL&gt;/sources_to_targets?json={&quot;sources&quot;:[{&quot;lon&quot;:-73.995323,&quot;lat&quot;:40.738804}],&quot;targets&quot;:[{&quot;lon&quot;:-73.978844,&quot;lat&quot;:40.767673},{&quot;lon&quot;:-73.948112,&quot;lat&quot;:40.742577},{&quot;lon&quot;:-73.979706,&quot;lat&quot;:40.729568}],&quot;costing&quot;:&quot;auto&quot;,&quot;units&quot;:&quot;mi&quot;}`   Lookup 'One To Many' Results in JSON Format Lookup Results in JSON Format { &quot;algorithm&quot;: &quot;costmatrix&quot;, &quot;units&quot;: &quot;miles&quot;, &quot;sources&quot;: [ [ { &quot;lon&quot;: -73.995323, &quot;lat&quot;: 40.738804 } ] ], &quot;targets&quot;: [ [ { &quot;lon&quot;: -73.978844, &quot;lat&quot;: 40.767673 }, { &quot;lon&quot;: -73.948112, &quot;lat&quot;: 40.742577 }, { &quot;lon&quot;: -73.979706, &quot;lat&quot;: 40.729568 } ] ], &quot;sources_to_targets&quot;: [ [ { &quot;distance&quot;: 4.509, &quot;time&quot;: 831, &quot;to_index&quot;: 0, &quot;from_index&quot;: 0 }, { &quot;distance&quot;: 3.886, &quot;time&quot;: 581, &quot;to_index&quot;: 1, &quot;from_index&quot;: 0 }, { &quot;distance&quot;: 1.351, &quot;time&quot;: 246, &quot;to_index&quot;: 2, &quot;from_index&quot;: 0 } ] ] }   'Many To Many' request:​  &lt;VALHALLA BASE URL&gt;/sources_to_targets?json={&quot;sources&quot;:[{&quot;lon&quot;:-73.995323,&quot;lat&quot;:40.738804},{&quot;lon&quot;:-73.978844,&quot;lat&quot;:40.767673},{&quot;lon&quot;:-73.948112,&quot;lat&quot;:40.742577},{&quot;lon&quot;:-73.979706,&quot;lat&quot;:40.729568}],&quot;targets&quot;:[{&quot;lon&quot;:-73.995323,&quot;lat&quot;:40.738804},{&quot;lon&quot;:-73.978844,&quot;lat&quot;:40.767673},{&quot;lon&quot;:-73.948112,&quot;lat&quot;:40.742577},{&quot;lon&quot;:-73.979706,&quot;lat&quot;:40.729568}],&quot;costing&quot;:&quot;auto&quot;,&quot;units&quot;:&quot;mi&quot;}`   Lookup 'Many To Many' Results in JSON Format Lookup Results in JSON Format { &quot;algorithm&quot;: &quot;costmatrix&quot;, &quot;units&quot;: &quot;miles&quot;, &quot;sources&quot;: [ [ { &quot;lon&quot;: -73.995323, &quot;lat&quot;: 40.738804 }, { &quot;lon&quot;: -73.978844, &quot;lat&quot;: 40.767673 }, { &quot;lon&quot;: -73.948112, &quot;lat&quot;: 40.742577 }, { &quot;lon&quot;: -73.979706, &quot;lat&quot;: 40.729568 } ] ], &quot;targets&quot;: [ [ { &quot;lon&quot;: -73.995323, &quot;lat&quot;: 40.738804 }, { &quot;lon&quot;: -73.978844, &quot;lat&quot;: 40.767673 }, { &quot;lon&quot;: -73.948112, &quot;lat&quot;: 40.742577 }, { &quot;lon&quot;: -73.979706, &quot;lat&quot;: 40.729568 } ] ], &quot;sources_to_targets&quot;: [ [ { &quot;distance&quot;: 0.000, &quot;time&quot;: 0, &quot;to_index&quot;: 0, &quot;from_index&quot;: 0 }, { &quot;distance&quot;: 4.509, &quot;time&quot;: 831, &quot;to_index&quot;: 1, &quot;from_index&quot;: 0 }, { &quot;distance&quot;: 3.886, &quot;time&quot;: 581, &quot;to_index&quot;: 2, &quot;from_index&quot;: 0 }, { &quot;distance&quot;: 1.351, &quot;time&quot;: 246, &quot;to_index&quot;: 3, &quot;from_index&quot;: 0 } ], [ { &quot;distance&quot;: 3.081, &quot;time&quot;: 513, &quot;to_index&quot;: 0, &quot;from_index&quot;: 1 }, { &quot;distance&quot;: 0.000, &quot;time&quot;: 0, &quot;to_index&quot;: 1, &quot;from_index&quot;: 1 }, { &quot;distance&quot;: 3.345, &quot;time&quot;: 422, &quot;to_index&quot;: 2, &quot;from_index&quot;: 1 }, { &quot;distance&quot;: 3.795, &quot;time&quot;: 587, &quot;to_index&quot;: 3, &quot;from_index&quot;: 1 } ], [ { &quot;distance&quot;: 3.572, &quot;time&quot;: 514, &quot;to_index&quot;: 0, &quot;from_index&quot;: 2 }, { &quot;distance&quot;: 4.498, &quot;time&quot;: 666, &quot;to_index&quot;: 1, &quot;from_index&quot;: 2 }, { &quot;distance&quot;: 0.000, &quot;time&quot;: 0, &quot;to_index&quot;: 2, &quot;from_index&quot;: 2 }, { &quot;distance&quot;: 3.467, &quot;time&quot;: 487, &quot;to_index&quot;: 3, &quot;from_index&quot;: 2 } ], [ { &quot;distance&quot;: 1.338, &quot;time&quot;: 252, &quot;to_index&quot;: 0, &quot;from_index&quot;: 3 }, { &quot;distance&quot;: 4.593, &quot;time&quot;: 820, &quot;to_index&quot;: 1, &quot;from_index&quot;: 3 }, { &quot;distance&quot;: 3.087, &quot;time&quot;: 436, &quot;to_index&quot;: 2, &quot;from_index&quot;: 3 }, { &quot;distance&quot;: 0.000, &quot;time&quot;: 0, &quot;to_index&quot;: 3, &quot;from_index&quot;: 3 } ] ] }    ","version":"Next","tagName":"h2"},{"title":"Valhalla locate service API reference","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-locate","content":"","keywords":"","version":"Next"},{"title":"Inputs of a locate request​","type":1,"pageTitle":"Valhalla locate service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-locate#inputs-of-a-locate-request","content":" The locate request run locally takes the form of localhost:8002/locate?json={}, where the JSON inputs inside the {} include location information, name and options for the costing model, and output options. Here is the JSON payload for an example request:  {&quot;verbose&quot;:true,&quot;locations&quot;:[{&quot;lat&quot;:42.358528,&quot;lon&quot;:-83.271400},{&quot;lat&quot;:42.996613,&quot;lon&quot;:-78.749855}],&quot;costing&quot;:&quot;bicycle&quot;,&quot;costing_options&quot;:{&quot;bicycle&quot;:{&quot;bicycle_type&quot;:&quot;road&quot;}},&quot;directions_options&quot;:{&quot;units&quot;:&quot;miles&quot;},&quot;id&quot;:&quot;12abc3afe23984fe&quot;}   This request provides detailed information about specific streets and intersections near the two input locations. Steets which do not have a surface type condusive to road bicycles will be excluded from the results. The units used for the lengths of the street sections will be displayed in miles.  There is an option to name your request. You can do this by adding and id key to your request. The id is returned with the response so a user could match to the corresponding request.  Because the locate service is designed to work in tandem with the route service API, the inputs for the two APIs are identical. For detailed options regarding specifying locations, costing models, costing options, directions options please see the relevant sections in the routing API docs  ","version":"Next","tagName":"h2"},{"title":"Other request options​","type":1,"pageTitle":"Valhalla locate service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-locate#other-request-options","content":" Options\tDescriptionverbose\tCan be set to true or false, but defaults to false. If set to true dense attribution of the given street or intersection will be returned. id\tName your route request. If id is specified, the naming will be sent through to the response.  ","version":"Next","tagName":"h3"},{"title":"Outputs of a locate request​","type":1,"pageTitle":"Valhalla locate service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-locate#outputs-of-a-locate-request","content":" If a request has been named using the optional id key, then this id key and value will be echoed in the JSON response object.  The locate results are returned as a JSON array, with one JSON object per input location in the order specified. In verbose mode details about the streets and intersections includding mode of travel access, names, way ids, shape, side of street as well as the closest point to the input along these features will be returned. If verbose was not enabled only the closest point, way id and side of street will be returned. A warnings array may also be included. This array may contain warning objects informing about deprecated request parameters, clamped values etc. |  Here are some sample results with verbose set to false/ true:  set to false [ { &quot;input_lon&quot;: -76.495743, &quot;input_lat&quot;: 40.310555, &quot;nodes&quot;: [ { &quot;lat&quot;: 40.313206, &quot;lon&quot;: -76.494987 } ], &quot;edges&quot;: [ { &quot;way_id&quot;: 12292268, &quot;correlated_lat&quot;: 40.313206, &quot;side_of_street&quot;: &quot;neither&quot;, &quot;percent_along&quot;: 0, &quot;correlated_lon&quot;: -76.494987 }, { &quot;way_id&quot;: 12292268, &quot;correlated_lat&quot;: 40.313206, &quot;side_of_street&quot;: &quot;neither&quot;, &quot;percent_along&quot;: 1, &quot;correlated_lon&quot;: -76.494987 } ], &quot;warnings&quot;: [ &quot;hov costing is deprecated and will be turned into auto costing with hov2=true costing option&quot; ] } ]   set to true [ { &quot;input_lon&quot;: -76.495743, &quot;input_lat&quot;: 40.310555, &quot;nodes&quot;: [ { &quot;traffic_signal&quot;: false, &quot;type&quot;: &quot;street_intersection&quot;, &quot;lat&quot;: 40.313206, &quot;node_id&quot;: { &quot;id&quot;: 3080, &quot;value&quot;: 103353655794, &quot;tile_id&quot;: 750654, &quot;level&quot;: 2 }, &quot;access&quot;: { &quot;wheelchair&quot;: true, &quot;taxi&quot;: false, &quot;HOV&quot;: true, &quot;truck&quot;: true, &quot;emergency&quot;: true, &quot;pedestrian&quot;: true, &quot;car&quot;: true, &quot;bus&quot;: true, &quot;bicycle&quot;: true }, &quot;lon&quot;: -76.494987, &quot;edge_count&quot;: 1, &quot;administrative&quot;: { &quot;time_zone_posix&quot;: &quot;EST-05EDT+01,M3.2.0/02:00,M11.1.0/02:00&quot;, &quot;standard_time_zone_name&quot;: &quot;EST&quot;, &quot;iso_3166-1&quot;: &quot;US&quot;, &quot;daylight_savings_time_zone_name&quot;: &quot;EDT&quot;, &quot;country&quot;: &quot;United States of America&quot;, &quot;iso_3166-2&quot;: &quot;PA&quot;, &quot;state&quot;: &quot;Pennsylvania&quot; }, &quot;intersection_type&quot;: &quot;dead-end&quot;, &quot;density&quot;: 2, &quot;local_edge_count&quot;: 1, &quot;mode_change&quot;: false } ], &quot;edges&quot;: [ { &quot;edge_id&quot;: { &quot;id&quot;: 7660, &quot;value&quot;: 257032954354, &quot;tile_id&quot;: 750654, &quot;level&quot;: 2 }, &quot;edge_info&quot;: { &quot;shape&quot;: &quot;ivo{kAvg{{pCiMlJ{FfDgDm@c_AqxBeFO}}@`]&quot;, &quot;way_id&quot;: 12292268, &quot;names&quot;: [ &quot;Bomgardner Lane&quot; ] }, &quot;edge&quot;: { &quot;classification&quot;: { &quot;link&quot;: false, &quot;internal&quot;: false, &quot;surface&quot;: &quot;paved_smooth&quot;, &quot;classification&quot;: &quot;residential&quot; }, &quot;end_node&quot;: { &quot;id&quot;: 3081, &quot;value&quot;: 103387210226, &quot;tile_id&quot;: 750654, &quot;level&quot;: 2 }, &quot;speed&quot;: 30, &quot;traffic_signal&quot;: false, &quot;start_restriction&quot;: { &quot;moped&quot;: false, &quot;wheelchair&quot;: false, &quot;taxi&quot;: false, &quot;HOV&quot;: false, &quot;truck&quot;: false, &quot;emergency&quot;: false, &quot;pedestrian&quot;: false, &quot;car&quot;: false, &quot;bus&quot;: false, &quot;bicycle&quot;: false }, &quot;speed_limit&quot;: 0, &quot;geo_attributes&quot;: { &quot;weighted_grade&quot;: 1.67, &quot;length&quot;: 388 }, &quot;cycle_lane&quot;: &quot;none&quot;, &quot;access_restriction&quot;: false, &quot;part_of_complex_restriction&quot;: false, &quot;country_crossing&quot;: false, &quot;has_exit_sign&quot;: false, &quot;lane_count&quot;: 1, &quot;speed_type&quot;: &quot;classified&quot;, &quot;drive_on_right&quot;: true, &quot;destination_only&quot;: false, &quot;seasonal&quot;: false, &quot;tunnel&quot;: false, &quot;bridge&quot;: false, &quot;access&quot;: { &quot;moped&quot;: true, &quot;wheelchair&quot;: true, &quot;taxi&quot;: false, &quot;HOV&quot;: true, &quot;truck&quot;: true, &quot;emergency&quot;: false, &quot;pedestrian&quot;: true, &quot;car&quot;: true, &quot;bus&quot;: true, &quot;bicycle&quot;: true }, &quot;toll&quot;: false, &quot;round_about&quot;: false, &quot;bike_network&quot;: { &quot;mountain&quot;: false, &quot;local&quot;: false, &quot;regional&quot;: false, &quot;national&quot;: false }, &quot;end_restriction&quot;: { &quot;moped&quot;: false, &quot;wheelchair&quot;: false, &quot;taxi&quot;: false, &quot;HOV&quot;: false, &quot;truck&quot;: false, &quot;emergency&quot;: false, &quot;pedestrian&quot;: false, &quot;car&quot;: false, &quot;bus&quot;: false, &quot;bicycle&quot;: false }, &quot;unreachable&quot;: false, &quot;forward&quot;: true, &quot;not_thru&quot;: false, &quot;truck_route&quot;: false, &quot;use&quot;: &quot;road&quot; }, &quot;minimum_reachability&quot;: 51, &quot;score&quot;: 899846.4, &quot;traffic_segments&quot;: [], &quot;percent_along&quot;: 0, &quot;correlated_lon&quot;: -76.494987, &quot;side_of_street&quot;: &quot;neither&quot;, &quot;correlated_lat&quot;: 40.313206 }, { &quot;edge_id&quot;: { &quot;id&quot;: 7661, &quot;value&quot;: 257066508786, &quot;tile_id&quot;: 750654, &quot;level&quot;: 2 }, &quot;edge_info&quot;: { &quot;shape&quot;: &quot;ivo{kAvg{{pCiMlJ{FfDgDm@c_AqxBeFO}}@`]&quot;, &quot;way_id&quot;: 12292268, &quot;names&quot;: [ &quot;Bomgardner Lane&quot; ] }, &quot;edge&quot;: { &quot;classification&quot;: { &quot;link&quot;: false, &quot;internal&quot;: false, &quot;surface&quot;: &quot;paved_smooth&quot;, &quot;classification&quot;: &quot;residential&quot; }, &quot;end_node&quot;: { &quot;id&quot;: 3080, &quot;value&quot;: 103353655794, &quot;tile_id&quot;: 750654, &quot;level&quot;: 2 }, &quot;speed&quot;: 30, &quot;traffic_signal&quot;: false, &quot;start_restriction&quot;: { &quot;moped&quot;: false, &quot;wheelchair&quot;: false, &quot;taxi&quot;: false, &quot;HOV&quot;: false, &quot;truck&quot;: false, &quot;emergency&quot;: false, &quot;pedestrian&quot;: false, &quot;car&quot;: false, &quot;bus&quot;: false, &quot;bicycle&quot;: false }, &quot;speed_limit&quot;: 0, &quot;geo_attributes&quot;: { &quot;weighted_grade&quot;: -1.67, &quot;length&quot;: 388 }, &quot;cycle_lane&quot;: &quot;none&quot;, &quot;access_restriction&quot;: false, &quot;part_of_complex_restriction&quot;: false, &quot;country_crossing&quot;: false, &quot;has_exit_sign&quot;: false, &quot;lane_count&quot;: 1, &quot;speed_type&quot;: &quot;classified&quot;, &quot;drive_on_right&quot;: true, &quot;destination_only&quot;: false, &quot;seasonal&quot;: false, &quot;tunnel&quot;: false, &quot;bridge&quot;: false, &quot;access&quot;: { &quot;moped&quot;: true, &quot;wheelchair&quot;: true, &quot;taxi&quot;: false, &quot;HOV&quot;: true, &quot;truck&quot;: true, &quot;emergency&quot;: false, &quot;pedestrian&quot;: true, &quot;car&quot;: true, &quot;bus&quot;: true, &quot;bicycle&quot;: true }, &quot;toll&quot;: false, &quot;round_about&quot;: false, &quot;bike_network&quot;: { &quot;mountain&quot;: false, &quot;local&quot;: false, &quot;regional&quot;: false, &quot;national&quot;: false }, &quot;end_restriction&quot;: { &quot;moped&quot;: false, &quot;wheelchair&quot;: false, &quot;taxi&quot;: false, &quot;HOV&quot;: false, &quot;truck&quot;: false, &quot;emergency&quot;: false, &quot;pedestrian&quot;: false, &quot;car&quot;: false, &quot;bus&quot;: false, &quot;bicycle&quot;: false }, &quot;unreachable&quot;: false, &quot;forward&quot;: false, &quot;not_thru&quot;: true, &quot;truck_route&quot;: false, &quot;use&quot;: &quot;road&quot; }, &quot;minimum_reachability&quot;: 51, &quot;score&quot;: 899846.4, &quot;traffic_segments&quot;: [], &quot;percent_along&quot;: 1, &quot;correlated_lon&quot;: -76.494987, &quot;side_of_street&quot;: &quot;neither&quot;, &quot;correlated_lat&quot;: 40.313206 } ], &quot;warnings&quot;: [ &quot;hov costing is deprecated and will be turned into auto costing with hov2=true costing option&quot; ] } ]  ","version":"Next","tagName":"h2"},{"title":"Optimized Route service API reference","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-optimized-route","content":"","keywords":"","version":"Next"},{"title":"Features​","type":1,"pageTitle":"Optimized Route service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-optimized-route#features","content":" Get to the shortest path. Get the shortest route for a large number of points. The service returns them in an optimized order, along with the shape.Use different transportation modes. Analyze travel times and distances by car, bicycle, or foot.Take a trip or make a loop. Either return to the starting point, or end the trip at a different destination.  ","version":"Next","tagName":"h2"},{"title":"Optimized route service action​","type":1,"pageTitle":"Optimized Route service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-optimized-route#optimized-route-service-action","content":" You can request the following action from the Optimized Route service: /optimized_route?. Since an optimized route is really an extension of the many_to_many matrix (where the source locations are the same as the target locations), the first step is to compute a cost matrix by sending a matrix request. Then, we send our resulting cost matrix (resulting time or distance) to the optimizer which will return our optimized path.  Optimized type\tDescriptionoptimized_route\tReturns an optimized route stopping at each destination location exactly one time, always starting at the first location in the list and ending at the last location. This will result in a route with multiple legs.  ","version":"Next","tagName":"h2"},{"title":"Inputs of the optimized route service​","type":1,"pageTitle":"Optimized Route service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-optimized-route#inputs-of-the-optimized-route-service","content":" The optimized route request run locally takes the form of localhost:8002/optimized_route?json={}, where the JSON inputs inside the {} includes location information (at least four locations), as well as the name and options for the costing model  Here is an example of an Optimized Route scenario:  Given a list of cities and the distances and times between each pair, a salesperson wants to visit each city one time by taking the most optimized route and end at a destination (either return to origin or a different destination).  {&quot;locations&quot;:[{&quot;lat&quot;:40.042072,&quot;lon&quot;:-76.306572},{&quot;lat&quot;:39.992115,&quot;lon&quot;:-76.781559},{&quot;lat&quot;:39.984519,&quot;lon&quot;:-76.6956},{&quot;lat&quot;:39.996586,&quot;lon&quot;:-76.769028},{&quot;lat&quot;:39.984322,&quot;lon&quot;:-76.706672}],&quot;costing&quot;:&quot;auto&quot;,&quot;directions_options&quot;:{&quot;units&quot;:&quot;miles&quot;}}   There is an option to name your optimized route request. You can do this by appending the following to your request &amp;id=. The id is returned with the response so a user could match to the corresponding request.  ","version":"Next","tagName":"h2"},{"title":"Location parameters​","type":1,"pageTitle":"Optimized Route service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-optimized-route#location-parameters","content":" A location must include a latitude and longitude in decimal degrees. The coordinates can come from many input sources, such as a GPS location, a point or a click on a map, a geocoding service, and so on. External search/geocoding services can be used to find places and geocode addresses, whose coordinates can be used as input to the service.  Location parameters\tDescriptionlat\tLatitude of the location in degrees. lon\tLongitude of the location in degrees.  Refer to the route location documentation for more information on specifying locations.  ","version":"Next","tagName":"h3"},{"title":"Costing parameters​","type":1,"pageTitle":"Optimized Route service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-optimized-route#costing-parameters","content":" The Optimized Route service uses the auto, bicycle and pedestrian costing models available in the Valhalla route service. The multimodal costing is not supported for the Optimized Route service at this time. Refer to the route costing models and costing options documentation for more on how to specify this input.  ","version":"Next","tagName":"h3"},{"title":"Other request options​","type":1,"pageTitle":"Optimized Route service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-optimized-route#other-request-options","content":" Options\tDescriptionid\tName your optimized request. If id is specified, the naming will be sent thru to the response.  ","version":"Next","tagName":"h3"},{"title":"Outputs of the optimized route service​","type":1,"pageTitle":"Optimized Route service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-optimized-route#outputs-of-the-optimized-route-service","content":" If an optimized request has been named using the optional &amp;id= input, then the name will be returned as a string id.  These are the results of a request to the Optimized Route service.  Item\tDescriptionoptimized_route\tReturns an optimized route path from point 'a' to point 'n'. Given a list of locations, an optimized route with stops at each intermediate location exactly one time, always starting at the first location in the list and ending at the last location. locations\tThe specified array of lat/lngs from the input request. The first and last locations in the array will remain the same as the input request. The intermediate locations may be returned reordered in the response. Due to the reordering of the intermediate locations, an original_index is also part of the locations object within the response. This is an identifier of the location index that will allow a user to easily correlate input locations with output locations. units\tDistance units for output. Allowable unit types are mi (miles) and km (kilometers). If no unit type is specified, the units default to kilometers. warnings (optional)\tThis array may contain warning objects informing about deprecated request parameters, clamped values etc.  ","version":"Next","tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"Optimized Route service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-optimized-route#examples","content":" optimized route request​  &lt;VALHALLA BASE URL&gt;/optimized_route?json={&quot;costing&quot;:&quot;auto&quot;,&quot;locations&quot;:[{&quot;lat&quot;:37.755545371651614,&quot;lon&quot;:-122.49248879268177},{&quot;lat&quot;:37.76378748950549,&quot;lon&quot;:-122.48700002284123},{&quot;lat&quot;:37.75980958653573,&quot;lon&quot;:-122.48357478963833},{&quot;lat&quot;:37.76223015859495,&quot;lon&quot;:-122.4912040416903},{&quot;lat&quot;:37.75921109492966,&quot;lon&quot;:-122.49701367108483},{&quot;lat&quot;:37.75514144886399,&quot;lon&quot;:-122.50395875678804}]}`   Lookup Results in JSON Format Lookup Results in JSON Format { &quot;trip&quot;: { &quot;locations&quot;: [ { &quot;type&quot;: &quot;break&quot;, &quot;lat&quot;: 37.755545, &quot;lon&quot;: -122.492488, &quot;side_of_street&quot;: &quot;left&quot;, &quot;original_index&quot;: 0 }, { &quot;type&quot;: &quot;break&quot;, &quot;lat&quot;: 37.759809, &quot;lon&quot;: -122.483574, &quot;side_of_street&quot;: &quot;left&quot;, &quot;original_index&quot;: 2 }, { &quot;type&quot;: &quot;break&quot;, &quot;lat&quot;: 37.763787, &quot;lon&quot;: -122.487, &quot;side_of_street&quot;: &quot;left&quot;, &quot;original_index&quot;: 1 }, { &quot;type&quot;: &quot;break&quot;, &quot;lat&quot;: 37.76223, &quot;lon&quot;: -122.491204, &quot;side_of_street&quot;: &quot;right&quot;, &quot;original_index&quot;: 3 }, { &quot;type&quot;: &quot;break&quot;, &quot;lat&quot;: 37.759211, &quot;lon&quot;: -122.497013, &quot;side_of_street&quot;: &quot;left&quot;, &quot;original_index&quot;: 4 }, { &quot;type&quot;: &quot;break&quot;, &quot;lat&quot;: 37.755141, &quot;lon&quot;: -122.503958, &quot;side_of_street&quot;: &quot;right&quot;, &quot;original_index&quot;: 5 } ], &quot;legs&quot;: [ { &quot;maneuvers&quot;: [ { &quot;type&quot;: 3, &quot;instruction&quot;: &quot;Drive east on Moraga Street.&quot;, &quot;verbal_succinct_transition_instruction&quot;: &quot;Drive east.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Drive east on Moraga Street.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 800 meters.&quot;, &quot;street_names&quot;: [ &quot;Moraga Street&quot; ], &quot;time&quot;: 99.698, &quot;length&quot;: 0.829, &quot;cost&quot;: 220.654, &quot;begin_shape_index&quot;: 0, &quot;end_shape_index&quot;: 10, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; }, { &quot;type&quot;: 15, &quot;instruction&quot;: &quot;Turn left onto 25th Avenue.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Turn left onto 25th Avenue.&quot;, &quot;verbal_succinct_transition_instruction&quot;: &quot;Turn left.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Turn left onto 25th Avenue.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 400 meters.&quot;, &quot;street_names&quot;: [ &quot;25th Avenue&quot; ], &quot;time&quot;: 42.183, &quot;length&quot;: 0.445, &quot;cost&quot;: 109.514, &quot;begin_shape_index&quot;: 10, &quot;end_shape_index&quot;: 15, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; }, { &quot;type&quot;: 6, &quot;instruction&quot;: &quot;Your destination is on the left.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Your destination will be on the left.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Your destination is on the left.&quot;, &quot;time&quot;: 0.0, &quot;length&quot;: 0.0, &quot;cost&quot;: 0.0, &quot;begin_shape_index&quot;: 15, &quot;end_shape_index&quot;: 15, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; } ], &quot;summary&quot;: { &quot;has_time_restrictions&quot;: false, &quot;has_toll&quot;: false, &quot;has_highway&quot;: false, &quot;has_ferry&quot;: false, &quot;min_lat&quot;: 37.755411, &quot;min_lon&quot;: -122.492479, &quot;max_lat&quot;: 37.75982, &quot;max_lon&quot;: -122.483052, &quot;time&quot;: 141.882, &quot;length&quot;: 1.275, &quot;cost&quot;: 330.169 }, &quot;shape&quot;: &quot;g`l_gA|bjshFiAot@}AyaA}A_bA_BabA}A}aAo@o`@m@o`@}A}aA_BabA}A{aAssBdGwmBvFwDJsDJyIV&quot; }, { &quot;maneuvers&quot;: [ { &quot;type&quot;: 3, &quot;instruction&quot;: &quot;Drive north on 25th Avenue.&quot;, &quot;verbal_succinct_transition_instruction&quot;: &quot;Drive north. Then, in 400 meters, Turn left onto Irving Street.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Drive north on 25th Avenue. Then, in 400 meters, Turn left onto Irving Street.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 400 meters.&quot;, &quot;street_names&quot;: [ &quot;25th Avenue&quot; ], &quot;time&quot;: 34.835, &quot;length&quot;: 0.386, &quot;cost&quot;: 83.125, &quot;begin_shape_index&quot;: 0, &quot;end_shape_index&quot;: 8, &quot;verbal_multi_cue&quot;: true, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; }, { &quot;type&quot;: 15, &quot;instruction&quot;: &quot;Turn left onto Irving Street.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Turn left onto Irving Street.&quot;, &quot;verbal_succinct_transition_instruction&quot;: &quot;Turn left.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Turn left onto Irving Street.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 300 meters.&quot;, &quot;street_names&quot;: [ &quot;Irving Street&quot; ], &quot;time&quot;: 27.609, &quot;length&quot;: 0.282, &quot;cost&quot;: 83.052, &quot;begin_shape_index&quot;: 8, &quot;end_shape_index&quot;: 16, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; }, { &quot;type&quot;: 10, &quot;instruction&quot;: &quot;Turn right onto 28th Avenue.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Turn right onto 28th Avenue.&quot;, &quot;verbal_succinct_transition_instruction&quot;: &quot;Turn right. Then Your destination will be on the left.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Turn right onto 28th Avenue. Then Your destination will be on the left.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 70 meters.&quot;, &quot;street_names&quot;: [ &quot;28th Avenue&quot; ], &quot;time&quot;: 12.009, &quot;length&quot;: 0.072, &quot;cost&quot;: 28.812, &quot;begin_shape_index&quot;: 16, &quot;end_shape_index&quot;: 17, &quot;verbal_multi_cue&quot;: true, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; }, { &quot;type&quot;: 6, &quot;instruction&quot;: &quot;Your destination is on the left.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Your destination will be on the left.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Your destination is on the left.&quot;, &quot;time&quot;: 0.0, &quot;length&quot;: 0.0, &quot;cost&quot;: 0.0, &quot;begin_shape_index&quot;: 17, &quot;end_shape_index&quot;: 17, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; } ], &quot;summary&quot;: { &quot;has_time_restrictions&quot;: false, &quot;has_toll&quot;: false, &quot;has_highway&quot;: false, &quot;has_ferry&quot;: false, &quot;min_lat&quot;: 37.75982, &quot;min_lon&quot;: -122.486833, &quot;max_lat&quot;: 37.763794, &quot;max_lon&quot;: -122.483331, &quot;time&quot;: 74.454, &quot;length&quot;: 0.74, &quot;cost&quot;: 194.989 }, &quot;shape&quot;: &quot;wst_gAdgxrhFq{ApEi@@kDJ[@]@sDJo@BqkBrFb@bXJxGl@z_@`@zVHhFHxEf@`\\\\~A|aAqg@zA&quot; }, { &quot;maneuvers&quot;: [ { &quot;type&quot;: 2, &quot;instruction&quot;: &quot;Drive south on 28th Avenue.&quot;, &quot;verbal_succinct_transition_instruction&quot;: &quot;Drive south. Then Turn right onto Irving Street.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Drive south on 28th Avenue. Then Turn right onto Irving Street.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 70 meters.&quot;, &quot;street_names&quot;: [ &quot;28th Avenue&quot; ], &quot;time&quot;: 6.499, &quot;length&quot;: 0.072, &quot;cost&quot;: 7.312, &quot;begin_shape_index&quot;: 0, &quot;end_shape_index&quot;: 1, &quot;verbal_multi_cue&quot;: true, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; }, { &quot;type&quot;: 10, &quot;instruction&quot;: &quot;Turn right onto Irving Street.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Turn right onto Irving Street.&quot;, &quot;verbal_succinct_transition_instruction&quot;: &quot;Turn right.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Turn right onto Irving Street.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 400 meters.&quot;, &quot;street_names&quot;: [ &quot;Irving Street&quot; ], &quot;time&quot;: 39.258, &quot;length&quot;: 0.377, &quot;cost&quot;: 99.059, &quot;begin_shape_index&quot;: 1, &quot;end_shape_index&quot;: 5, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; }, { &quot;type&quot;: 15, &quot;instruction&quot;: &quot;Turn left onto 32nd Avenue.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Turn left onto 32nd Avenue.&quot;, &quot;verbal_succinct_transition_instruction&quot;: &quot;Turn left. Then Your destination will be on the right.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Turn left onto 32nd Avenue. Then Your destination will be on the right.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 80 meters.&quot;, &quot;street_names&quot;: [ &quot;32nd Avenue&quot; ], &quot;time&quot;: 9.32, &quot;length&quot;: 0.08, &quot;cost&quot;: 18.636, &quot;begin_shape_index&quot;: 5, &quot;end_shape_index&quot;: 6, &quot;verbal_multi_cue&quot;: true, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; }, { &quot;type&quot;: 5, &quot;instruction&quot;: &quot;Your destination is on the right.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Your destination will be on the right.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Your destination is on the right.&quot;, &quot;time&quot;: 0.0, &quot;length&quot;: 0.0, &quot;cost&quot;: 0.0, &quot;begin_shape_index&quot;: 6, &quot;end_shape_index&quot;: 6, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; } ], &quot;summary&quot;: { &quot;has_time_restrictions&quot;: false, &quot;has_toll&quot;: false, &quot;has_highway&quot;: false, &quot;has_ferry&quot;: false, &quot;min_lat&quot;: 37.762237, &quot;min_lon&quot;: -122.491075, &quot;max_lat&quot;: 37.763794, &quot;max_lon&quot;: -122.486787, &quot;time&quot;: 55.078, &quot;length&quot;: 0.529, &quot;cost&quot;: 125.008 }, &quot;shape&quot;: &quot;el|_gAbb_shFpg@{A|A|aA|A~aA~AbbA|A|aA|k@cB&quot; }, { &quot;maneuvers&quot;: [ { &quot;type&quot;: 3, &quot;instruction&quot;: &quot;Drive north on 32nd Avenue.&quot;, &quot;verbal_succinct_transition_instruction&quot;: &quot;Drive north. Then, in 300 meters, Turn left onto Lincoln Way.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Drive north on 32nd Avenue. Then, in 300 meters, Turn left onto Lincoln Way.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 300 meters.&quot;, &quot;street_names&quot;: [ &quot;32nd Avenue&quot; ], &quot;time&quot;: 26.903, &quot;length&quot;: 0.295, &quot;cost&quot;: 63.751, &quot;begin_shape_index&quot;: 0, &quot;end_shape_index&quot;: 4, &quot;verbal_multi_cue&quot;: true, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; }, { &quot;type&quot;: 15, &quot;instruction&quot;: &quot;Turn left onto Lincoln Way.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Turn left onto Lincoln Way.&quot;, &quot;verbal_succinct_transition_instruction&quot;: &quot;Turn left.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Turn left onto Lincoln Way.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 600 meters.&quot;, &quot;street_names&quot;: [ &quot;Lincoln Way&quot; ], &quot;time&quot;: 40.579, &quot;length&quot;: 0.565, &quot;cost&quot;: 58.038, &quot;begin_shape_index&quot;: 4, &quot;end_shape_index&quot;: 18, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; }, { &quot;type&quot;: 15, &quot;instruction&quot;: &quot;Turn left onto 38th Avenue.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Turn left onto 38th Avenue.&quot;, &quot;verbal_succinct_transition_instruction&quot;: &quot;Turn left.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Turn left onto 38th Avenue.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 600 meters.&quot;, &quot;street_names&quot;: [ &quot;38th Avenue&quot; ], &quot;time&quot;: 74.401, &quot;length&quot;: 0.602, &quot;cost&quot;: 153.07, &quot;begin_shape_index&quot;: 18, &quot;end_shape_index&quot;: 30, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; }, { &quot;type&quot;: 6, &quot;instruction&quot;: &quot;Your destination is on the left.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Your destination will be on the left.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Your destination is on the left.&quot;, &quot;time&quot;: 0.0, &quot;length&quot;: 0.0, &quot;cost&quot;: 0.0, &quot;begin_shape_index&quot;: 30, &quot;end_shape_index&quot;: 30, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; } ], &quot;summary&quot;: { &quot;has_time_restrictions&quot;: false, &quot;has_toll&quot;: false, &quot;has_highway&quot;: false, &quot;has_ferry&quot;: false, &quot;min_lat&quot;: 37.7592, &quot;min_lon&quot;: -122.497638, &quot;max_lat&quot;: 37.764883, &quot;max_lon&quot;: -122.491025, &quot;time&quot;: 141.884, &quot;length&quot;: 1.463, &quot;cost&quot;: 274.86 }, &quot;shape&quot;: &quot;{jy_gAbhgshF}k@bB}lBvFyCHsDJ~AzaAFdEL|Hv@nf@FxDFnD~AdbAFhEJhGx@xh@VxPdAvn@DlCfBfiApDKbDK`fBgFrEM|DMT?xfBiFhDIZAZAhDKf}AsE&quot; }, { &quot;maneuvers&quot;: [ { &quot;type&quot;: 3, &quot;instruction&quot;: &quot;Drive south on 38th Avenue.&quot;, &quot;verbal_succinct_transition_instruction&quot;: &quot;Drive south.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Drive south on 38th Avenue.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 400 meters.&quot;, &quot;street_names&quot;: [ &quot;38th Avenue&quot; ], &quot;time&quot;: 53.403, &quot;length&quot;: 0.444, &quot;cost&quot;: 76.592, &quot;begin_shape_index&quot;: 0, &quot;end_shape_index&quot;: 4, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; }, { &quot;type&quot;: 10, &quot;instruction&quot;: &quot;Turn right onto Moraga Street.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Turn right onto Moraga Street.&quot;, &quot;verbal_succinct_transition_instruction&quot;: &quot;Turn right.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Turn right onto Moraga Street.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 600 meters.&quot;, &quot;street_names&quot;: [ &quot;Moraga Street&quot; ], &quot;time&quot;: 71.757, &quot;length&quot;: 0.613, &quot;cost&quot;: 137.615, &quot;begin_shape_index&quot;: 4, &quot;end_shape_index&quot;: 12, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; }, { &quot;type&quot;: 5, &quot;instruction&quot;: &quot;Your destination is on the right.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Your destination will be on the right.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Your destination is on the right.&quot;, &quot;time&quot;: 0.0, &quot;length&quot;: 0.0, &quot;cost&quot;: 0.0, &quot;begin_shape_index&quot;: 12, &quot;end_shape_index&quot;: 12, &quot;travel_mode&quot;: &quot;drive&quot;, &quot;travel_type&quot;: &quot;car&quot; } ], &quot;summary&quot;: { &quot;has_time_restrictions&quot;: false, &quot;has_toll&quot;: false, &quot;has_highway&quot;: false, &quot;has_ferry&quot;: false, &quot;min_lat&quot;: 37.754905, &quot;min_lon&quot;: -122.503942, &quot;max_lat&quot;: 37.7592, &quot;max_lon&quot;: -122.49698, &quot;time&quot;: 125.16, &quot;length&quot;: 1.058, &quot;cost&quot;: 214.207 }, &quot;shape&quot;: &quot;_ms_gAvmsshFbOc@psBcGrmBwFzDMF|DtAb|@~A|aA|AzaA|A`bA|A|aA~A~aAl@d`@&quot; } ], &quot;summary&quot;: { &quot;has_time_restrictions&quot;: false, &quot;has_toll&quot;: false, &quot;has_highway&quot;: false, &quot;has_ferry&quot;: false, &quot;min_lat&quot;: 37.754905, &quot;min_lon&quot;: -122.503942, &quot;max_lat&quot;: 37.764883, &quot;max_lon&quot;: -122.483052, &quot;time&quot;: 538.459, &quot;length&quot;: 5.067, &quot;cost&quot;: 1139.236 }, &quot;status_message&quot;: &quot;Found route between points&quot;, &quot;status&quot;: 0, &quot;units&quot;: &quot;kilometers&quot;, &quot;language&quot;: &quot;en-US&quot; } }   ","version":"Next","tagName":"h2"},{"title":"Error checking​","type":1,"pageTitle":"Optimized Route service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/osm-valhalla-optimized-route#error-checking","content":" The service checks the return to see that all locations can be reached. If one or more cannot be reached, it returns an error and lists the location number that cannot be reached. Currently, one location is listed at this time, even if more than one have an issue.  This is an example which should return: 400::Location at index 3 is unreachable  {&quot;locations&quot;:[{&quot;lat&quot;:40.306600,&quot;lon&quot;:-76.900022},{&quot;lat&quot;:40.293246,&quot;lon&quot;:-76.936230},{&quot;lat&quot;:40.448678,&quot;lon&quot;:-76.932885},{&quot;lat&quot;:40.419753,&quot;lon&quot;:-76.999632},{&quot;lat&quot;:40.211050,&quot;lon&quot;:-76.777071},{&quot;lat&quot;:40.306600,&quot;lon&quot;:-76.900022}],&quot;costing&quot;:&quot;auto&quot;}   See the HTTP return codes for more on messages you might receive from the service. ","version":"Next","tagName":"h2"},{"title":"Routing overview","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/turn-by-turn/osm-valhalla-overview","content":"","keywords":"","version":"Next"},{"title":"​","type":1,"pageTitle":"Routing overview","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/turn-by-turn/osm-valhalla-overview#routing-settings","content":"   ","version":"Next","tagName":"h2"},{"title":"Route requests and results​","type":1,"pageTitle":"Routing overview","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/turn-by-turn/osm-valhalla-overview#route-requests-and-results","content":" When you request a route, you are sending and receiving JSON, which is a human-readable text format. In the JSON array, you need to specify the locations to visit on the route, the costing model that represents the mode of travel, such as car or bicycle, and your API key. The location coordinates, given in decimal degrees, can come from many input sources, such as a GPS location, a point or a click on a map, a geocoding service such as Mapbox Geocoding, and so on. Costing methods can have several options that can be adjusted to develop the the route path and estimate the time along the path.  The service route results provide details about the trip, including locations, a summary with basic information about the entire trip and a list of legs. Each leg has its own summary, a shape, which is an encoded polyline of the route path, and a list of maneuvers. These maneuvers provide written narrative instructions, plus verbal alerts that can be used as audio guidance in navigation apps.  The JSON returned from the route query can be drawn on a map and shown as instructions for maneuvers along the route.  ","version":"Next","tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"Routing overview","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/turn-by-turn/osm-valhalla-overview#examples","content":"   route request​  &lt;VALHALLA BASE URL&gt;/route?json={&quot;costing&quot;:&quot;pedestrian&quot;,&quot;costing_options&quot;:{&quot;pedestrian&quot;:{&quot;exclude_polygons&quot;:[],&quot;use_ferry&quot;:1,&quot;use_living_streets&quot;:0.5,&quot;use_tracks&quot;:0,&quot;service_penalty&quot;:15,&quot;service_factor&quot;:1,&quot;shortest&quot;:false,&quot;use_hills&quot;:0.5,&quot;walking_speed&quot;:5.1,&quot;walkway_factor&quot;:1,&quot;sidewalk_factor&quot;:1,&quot;alley_factor&quot;:2,&quot;driveway_factor&quot;:5,&quot;step_penalty&quot;:0,&quot;max_hiking_difficulty&quot;:1,&quot;use_lit&quot;:0,&quot;transit_start_end_max_distance&quot;:2145,&quot;transit_transfer_max_distance&quot;:800}},&quot;exclude_polygons&quot;:[],&quot;locations&quot;:[{&quot;lon&quot;:35.0121459361267,&quot;lat&quot;:31.800557317215137,&quot;type&quot;:&quot;break&quot;},{&quot;lon&quot;:35.01386761665345,&quot;lat&quot;:31.803877333444206,&quot;type&quot;:&quot;break&quot;}],&quot;directions_options&quot;:{&quot;units&quot;:&quot;kilometers&quot;},&quot;id&quot;:&quot;valhalla_directions&quot;}`   Lookup Results in JSON Format Lookup Results in JSON Format { &quot;trip&quot;: { &quot;locations&quot;: [ { &quot;type&quot;: &quot;break&quot;, &quot;lat&quot;: 31.800557, &quot;lon&quot;: 35.012145, &quot;original_index&quot;: 0 }, { &quot;type&quot;: &quot;break&quot;, &quot;lat&quot;: 31.803877, &quot;lon&quot;: 35.013867, &quot;side_of_street&quot;: &quot;left&quot;, &quot;original_index&quot;: 1 } ], &quot;legs&quot;: [ { &quot;maneuvers&quot;: [ { &quot;type&quot;: 1, &quot;instruction&quot;: &quot;Walk north on קוצ'ין/Cochin.&quot;, &quot;verbal_succinct_transition_instruction&quot;: &quot;Walk north.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Walk north on קוצ'ין, Cochin.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 100 meters.&quot;, &quot;street_names&quot;: [ &quot;קוצ'ין&quot;, &quot;Cochin&quot; ], &quot;time&quot;: 104.012, &quot;length&quot;: 0.131, &quot;cost&quot;: 108.669, &quot;begin_shape_index&quot;: 0, &quot;end_shape_index&quot;: 12, &quot;travel_mode&quot;: &quot;pedestrian&quot;, &quot;travel_type&quot;: &quot;foot&quot; }, { &quot;type&quot;: 23, &quot;instruction&quot;: &quot;Keep right to stay on קוצ'ין/Cochin.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Keep right to stay on קוצ'ין.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Keep right to stay on קוצ'ין, Cochin.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 30 meters.&quot;, &quot;street_names&quot;: [ &quot;קוצ'ין&quot;, &quot;Cochin&quot; ], &quot;time&quot;: 25.03, &quot;length&quot;: 0.031, &quot;cost&quot;: 47.374, &quot;begin_shape_index&quot;: 12, &quot;end_shape_index&quot;: 29, &quot;travel_mode&quot;: &quot;pedestrian&quot;, &quot;travel_type&quot;: &quot;foot&quot; }, { &quot;type&quot;: 23, &quot;instruction&quot;: &quot;Keep right to stay on קוצ'ין/Cochin.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Keep right to stay on קוצ'ין.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Keep right to stay on קוצ'ין, Cochin.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 100 meters.&quot;, &quot;street_names&quot;: [ &quot;קוצ'ין&quot;, &quot;Cochin&quot; ], &quot;time&quot;: 109.609, &quot;length&quot;: 0.128, &quot;cost&quot;: 130.788, &quot;begin_shape_index&quot;: 29, &quot;end_shape_index&quot;: 50, &quot;travel_mode&quot;: &quot;pedestrian&quot;, &quot;travel_type&quot;: &quot;foot&quot; }, { &quot;type&quot;: 10, &quot;instruction&quot;: &quot;Turn right to stay on קוצ'ין/Cochin.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Turn right to stay on קוצ'ין.&quot;, &quot;verbal_succinct_transition_instruction&quot;: &quot;Turn right.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Turn right to stay on קוצ'ין, Cochin.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 70 meters.&quot;, &quot;street_names&quot;: [ &quot;קוצ'ין&quot;, &quot;Cochin&quot; ], &quot;time&quot;: 70.101, &quot;length&quot;: 0.072, &quot;cost&quot;: 82.014, &quot;begin_shape_index&quot;: 50, &quot;end_shape_index&quot;: 52, &quot;travel_mode&quot;: &quot;pedestrian&quot;, &quot;travel_type&quot;: &quot;foot&quot; }, { &quot;type&quot;: 10, &quot;instruction&quot;: &quot;Turn right to stay on קוצ'ין/Cochin.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Turn right to stay on קוצ'ין.&quot;, &quot;verbal_succinct_transition_instruction&quot;: &quot;Turn right.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Turn right to stay on קוצ'ין, Cochin.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 70 meters.&quot;, &quot;street_names&quot;: [ &quot;קוצ'ין&quot;, &quot;Cochin&quot; ], &quot;time&quot;: 60.141, &quot;length&quot;: 0.071, &quot;cost&quot;: 63.148, &quot;begin_shape_index&quot;: 52, &quot;end_shape_index&quot;: 58, &quot;travel_mode&quot;: &quot;pedestrian&quot;, &quot;travel_type&quot;: &quot;foot&quot; }, { &quot;type&quot;: 15, &quot;instruction&quot;: &quot;Turn left onto מלבר/Malvar.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Turn left onto מלבר.&quot;, &quot;verbal_succinct_transition_instruction&quot;: &quot;Turn left.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Turn left onto מלבר, Malvar.&quot;, &quot;verbal_post_transition_instruction&quot;: &quot;Continue for 500 meters.&quot;, &quot;street_names&quot;: [ &quot;מלבר&quot;, &quot;Malvar&quot; ], &quot;time&quot;: 543.568, &quot;length&quot;: 0.537, &quot;cost&quot;: 825.015, &quot;begin_shape_index&quot;: 58, &quot;end_shape_index&quot;: 130, &quot;travel_mode&quot;: &quot;pedestrian&quot;, &quot;travel_type&quot;: &quot;foot&quot; }, { &quot;type&quot;: 6, &quot;instruction&quot;: &quot;Your destination is on the left.&quot;, &quot;verbal_transition_alert_instruction&quot;: &quot;Your destination will be on the left.&quot;, &quot;verbal_pre_transition_instruction&quot;: &quot;Your destination is on the left.&quot;, &quot;time&quot;: 0.0, &quot;length&quot;: 0.0, &quot;cost&quot;: 0.0, &quot;begin_shape_index&quot;: 130, &quot;end_shape_index&quot;: 130, &quot;travel_mode&quot;: &quot;pedestrian&quot;, &quot;travel_type&quot;: &quot;foot&quot; } ], &quot;summary&quot;: { &quot;has_time_restrictions&quot;: false, &quot;has_toll&quot;: false, &quot;has_highway&quot;: false, &quot;has_ferry&quot;: false, &quot;min_lat&quot;: 31.80056, &quot;min_lon&quot;: 35.010666, &quot;max_lat&quot;: 31.804619, &quot;max_lon&quot;: 35.01387, &quot;time&quot;: 912.463, &quot;length&quot;: 0.972, &quot;cost&quot;: 1257.01 }, &quot;shape&quot;: &quot;an}s{@ee~waAkPr@gEXeEd@}Dp@wD|@mDjAeDtAwCbBkCnBq@p@iAfAkBfCW^Y^W\\\\YZWXYX[R[R[LQFa@@_@H]N[RYVS\\\\Q^SNURUNUNUNULULUJWJUJ}A`@}Aj@{At@uA|@sAdAoAhAiAnAeArA_AvAy@zAoQd^cNoG}TkK?oAPmAfKg_@VaAR_AP_AqA]qA[qAUsAOsAMsAKsAGsAEuACsACiB?gBFcBN_BZ{Ah@uAz@qApAkAdBeA`C}@|CmLvb@u@xB_A~AeAhAkAr@oA^qANqA?oAMkAUgAa@s@c@YSaAaAs@iAg@oA[uAOyAE}AD}AN}AV}A~AkIR}@R{@Rw@Rw@Ps@Pq@Po@Nm@Pk@Ni@~Qkl@~@yCv@mCt@eCp@aCj@cCh@gCd@oC`@_D^oDZcElA}SZmCXeC`AmGLiB@cB?_EA{@&quot; } ], &quot;summary&quot;: { &quot;has_time_restrictions&quot;: false, &quot;has_toll&quot;: false, &quot;has_highway&quot;: false, &quot;has_ferry&quot;: false, &quot;min_lat&quot;: 31.80056, &quot;min_lon&quot;: 35.010666, &quot;max_lat&quot;: 31.804619, &quot;max_lon&quot;: 35.01387, &quot;time&quot;: 912.463, &quot;length&quot;: 0.972, &quot;cost&quot;: 1257.01 }, &quot;status_message&quot;: &quot;Found route between points&quot;, &quot;status&quot;: 0, &quot;units&quot;: &quot;kilometers&quot;, &quot;language&quot;: &quot;en-US&quot; }, &quot;id&quot;: &quot;valhalla_directions&quot; }  ","version":"Next","tagName":"h2"},{"title":"Raster","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/overview","content":"","keywords":"","version":"Next"},{"title":"Raster Overview​","type":1,"pageTitle":"Raster","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/overview#raster-overview","content":" Orthophoto images are generated from satellite imagery or aerial photography. In the case of aerial photography, the raw frames are matched and resolved into photo blocks. Then, they and geometrically corrected (using DTM), anchored to well-known points, visually improved, and assembled into a homogeneous orthophoto mosaic, which can be combined of multiple files. A discrete layer represents a geographical region and is composed of multiple orthophoto mosaics with the same resolution, color scheme, and classification. A discrete layer can be included in the best mosaic, a universal map which is a fusion of multiple discrete layers.    ","version":"Next","tagName":"h2"},{"title":"Terms​","type":1,"pageTitle":"Raster","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/overview#terms","content":" Term\tDescriptionRaster Geodetic Datum\tWorld Geodetic System of WGS 84 (also known as WGS 1984 ensemble: EPSG:4326 for 2D coordinate reference system (CRS)) Raster Map projection\tLatitude / Longitude Projection Raster Best Practice Protocol\tWMTS Raster Tiling scheme\tInspireCRS84Quad (World CRS84 TileMatrixSet), That tiling schemes consists of two 256x256 tiles at its zoom level 0, in EPSG:4326 CRS, with extent in longitude in the range [-180,180] and in latitude in the range [-90,90]. Raster Tile Size\t256*256 Raster Tile Format\tPNG / JPEG Auth token\tA JWT token (you can aquire it by contacting our product owner) for raster services passed via http QUERY_PARAM. There are different kinds of token permissions (raster catalog, map, export, etc.. services) Zoom Level\tThe layer zoom level is determined by the field mc:maxResolutionDeg, the zoom level is calculated by the tiling scheme below (Pixel Size (degrees) is maxResolutionDeg), for example, for the following mc:maxResolutionDeg 2.14577E-05 &gt;= resolution &gt; 1.07288E-05 a zoom level of 15 will be created.  ","version":"Next","tagName":"h2"},{"title":"Raster Tiling scheme In Detail​","type":1,"pageTitle":"Raster","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/overview#raster-tiling-scheme-in-detail","content":" warning Tile Size (degrees) is cut after 9 decimal points and Pixel Size (meters) is rounded to 2 decimal points.  Zoom Level Id\tMatrix Width (tiles)\tMatrix Height (tiles)\tTile Size (degrees)\tPixel Size (degrees)\tTile Size* (meters)\tPixel Size* (meters)0\t2\t1\t180\t0.703125\t20,037,508.34\t78,271.52 1\t4\t2\t90\t0.3515625\t10,018,754.17\t39,135.76 2\t8\t4\t45\t0.17578125\t5,009,377.09\t19,567.88 3\t16\t8\t22.5\t0.087890625\t2,504,688.54\t9,783.94 4\t32\t16\t11.25\t0.0439453125\t1,252,344.27\t4,891.97 5\t64\t32\t5.625\t0.02197265625\t626,172.14\t2,445.98 6\t128\t64\t2.8125\t0.010986328125\t313,086.07\t1,222.99 7\t256\t128\t1.40625\t0.0054931640625\t156,543.03\t611.50 8\t512\t256\t0.703125\t0.00274658203125\t78,271.52\t305.75 9\t1024\t512\t0.3515625\t0.001373291015625\t39,135.76\t152.87 10\t2048\t1024\t0.17578125\t0.0006866455078125\t19,567.88\t76.44 11\t4096\t2048\t0.087890625\t0.00034332275390625\t9,783.94\t38.22 12\t8192\t4096\t0.043945313\t0.000171661376953125\t4,891.97\t19.11 13\t16384\t8192\t0.021972656\t0.0000858306884765625\t2,445.98\t9.55 14\t32768\t16384\t0.010986328\t0.0000429153442382812\t1,222.99\t4.78 15\t65536\t32768\t0.005493164\t0.0000214576721191406\t611.50\t2.39 16\t131072\t65536\t0.002746582\t0.0000107288360595703\t305.75\t1.19 17\t262144\t131072\t0.001373291\t0.00000536441802978516\t152.87\t0.60 18\t524288\t262144\t0.000686646\t0.00000268220901489258\t76.44\t0.30 19\t1048576\t524288\t0.000343323\t0.00000134110450744629\t38.22\t0.15 20\t2097152\t1048576\t0.000171662\t0.000000670552253723145\t19.11\t0.075 21\t4194304\t2097152\t0.000085831\t0.000000335276126861572\t9.55\t0.037 ","version":"Next","tagName":"h2"},{"title":"Export Guide","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/Guides/raster-export-guide","content":"","keywords":"","version":"Next"},{"title":"Export Guide step-by-step​","type":1,"pageTitle":"Export Guide","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/Guides/raster-export-guide#export-guide-step-by-step","content":" The following guide will help you understand, Step-by-step the best practices of how to work with the Map Colonies Export Sevice and how to export Mapping data to offline consumers in GPKG format  Export service Reference is here  Note: In order to get the layer id (mc:id) you have the following options:  Open map-colonies catalog application and locate the required layer    Query all records via CSW GetRecords operation and search it in the result response  Query Examples  ","version":"Next","tagName":"h2"},{"title":"Flow diagram​","type":1,"pageTitle":"Export Guide","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/Guides/raster-export-guide#flow-diagram","content":" The following flow will show you one of our main use-case's    ","version":"Next","tagName":"h2"},{"title":"Query Catalog Service (Step 1)​","type":1,"pageTitle":"Export Guide","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/Guides/raster-export-guide#query-catalog-service-step-1","content":" Query RASTER CSW catalog service to find item(s) according to desired filter example are here.  warning Pay attention to set the following parameter 'outputSchema=&quot;http://schema.mapcolonies.com/raster&quot;' in order to get full catalog data  There are a few ways to acquire the productId, for example:  Specific LayerFetch All Layers (Pagination) To fetch a specific layer you need to aquire 2 properties values: productTypeproductIdTo get unique product when you already have the productType and productId you can use the following query (both can be coppied from our catalog app, for example for Best Orthophoto use the following) POST Request url:'&lt;RASTER-CATALOG-SERVICE_URL&gt;/csw' body (XML): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecords xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; service=&quot;CSW&quot; maxRecords=&quot;1&quot; startPosition=&quot;1&quot; outputSchema=&quot;http://schema.mapcolonies.com/raster&quot; version=&quot;2.0.2&quot; xmlns:mc=&quot;http://schema.mapcolonies.com/raster&quot; &gt; &lt;csw:Query typeNames=&quot;mc:MCRasterRecord&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;csw:Constraint version=&quot;1.1.0&quot;&gt; &lt;Filter xmlns=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;And&gt; &lt;PropertyIsEqualTo&gt; &lt;PropertyName&gt;mc:productType&lt;/PropertyName&gt; &lt;Literal&gt;OrthophotoBest&lt;/Literal&gt; &lt;/PropertyIsEqualTo&gt; &lt;PropertyIsEqualTo&gt; &lt;PropertyName&gt;mc:productId&lt;/PropertyName&gt; &lt;Literal&gt;ORTHOPHOTO_MOSAIC_BASE&lt;/Literal&gt; &lt;/PropertyIsEqualTo&gt; &lt;/And&gt; &lt;/Filter&gt; &lt;/csw:Constraint&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt;   You will get GetRecords XML Response with product metadata.  Response example GetRecords Response &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt; &lt;!-- pycsw 2.7.dev0 --&gt; &lt;csw:GetRecordsResponse xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:dct=&quot;http://purl.org/dc/terms/&quot; xmlns:gmd=&quot;http://www.isotc211.org/2005/gmd&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:ows=&quot;http://www.opengis.net/ows&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:mc=&quot;http://schema.mapcolonies.com/raster&quot; version=&quot;2.0.2&quot; xsi:schemaLocation=&quot;http://www.opengis.net/cat/csw/2.0.2 http://schemas.opengis.net/csw/2.0.2/CSW-discovery.xsd&quot;&gt; &lt;csw:SearchStatus timestamp=&quot;2022-02-15T15:08:58Z&quot;/&gt; &lt;csw:SearchResults numberOfRecordsMatched=&quot;2&quot; numberOfRecordsReturned=&quot;1&quot; nextRecord=&quot;2&quot; recordSchema=&quot;http://schema.mapcolonies.com/raster&quot; elementSet=&quot;full&quot;&gt; &lt;mc:MCRasterRecord&gt; &lt;mc:classification&gt;4&lt;/mc:classification&gt; &lt;mc:creationDateUTC&gt;2022-02-13T13:04:23Z&lt;/mc:creationDateUTC&gt; &lt;mc:description&gt;World Wide 2020&lt;/mc:description&gt; &lt;mc:footprint&gt;{&quot;type&quot;:&quot;Polygon&quot;,&quot;coordinates&quot;:[[[-180,-90],[-180,90],[180,90],[180,-90],[-180,-90]]]}&lt;/mc:footprint&gt; &lt;mc:minHorizontalAccuracyCE90&gt;3&lt;/mc:minHorizontalAccuracyCE90&gt; &lt;mc:id&gt;3b3164a7-280d-4392-a82f-d60a76e69092&lt;/mc:id&gt; &lt;mc:ingestionDate&gt;2022-02-13T13:04:23Z&lt;/mc:ingestionDate&gt; &lt;mc:insertDate&gt;2022-02-13T13:04:41Z&lt;/mc:insertDate&gt; &lt;mc:mimeType&gt;image/jpeg&lt;/mc:mimeType&gt; &lt;mc:links scheme=&quot;WMS&quot; name=&quot;ORTHOPHOTO_MOSAIC_BASE&quot; description=&quot;&quot;&gt;'&lt;YOUR_MAPPROXY_URL&gt;/service?REQUEST=GetCapabilities'&lt;/mc:links&gt; &lt;mc:links scheme=&quot;WMS_BASE&quot; name=&quot;ORTHOPHOTO_MOSAIC_BASE&quot; description=&quot;&quot;&gt;'&lt;YOUR_MAPPROXY_URL&gt;/wms'&lt;/mc:links&gt; &lt;mc:links scheme=&quot;WMTS&quot; name=&quot;ORTHOPHOTO_MOSAIC_BASE&quot; description=&quot;&quot;&gt;'&lt;YOUR_MAPPROXY_URL&gt;/wmts/1.0.0/WMTSCapabilities.xml'&lt;/mc:links&gt; &lt;mc:links scheme=&quot;WMTS_KVP&quot; name=&quot;ORTHOPHOTO_MOSAIC_BASE&quot; description=&quot;&quot;&gt;'&lt;YOUR_MAPPROXY_URL&gt;/service?REQUEST=GetCapabilities&amp;SERVICE=WMTS'&lt;/mc:links&gt; &lt;mc:links scheme=&quot;WMTS_BASE&quot; name=&quot;ORTHOPHOTO_MOSAIC_BASE&quot; description=&quot;&quot;&gt;'&lt;YOUR_MAPPROXY_URL&gt;/wmts'&lt;/mc:links&gt; &lt;mc:maxResolutionMeter&gt;0.1&lt;/mc:maxResolutionMeter&gt; &lt;mc:producerName&gt;IDFMU&lt;/mc:producerName&gt; &lt;mc:productBBox&gt;-180,-90,180,90&lt;/mc:productBBox&gt; &lt;mc:productId&gt;ORTHOPHOTO_MOSAIC_BASE&lt;/mc:productId&gt; &lt;mc:productName&gt;אורתופוטו מתעדכן&lt;/mc:productName&gt; &lt;mc:productType&gt;OrthophotoBest&lt;/mc:productType&gt; &lt;mc:productVersion&gt;1.0&lt;/mc:productVersion&gt; &lt;mc:region&gt;World&lt;/mc:region&gt; &lt;mc:maxResolutionDeg&gt;0.000171661376953125&lt;/mc:maxResolutionDeg&gt; &lt;mc:sensors&gt;UNDEFINED&lt;/mc:sensors&gt; &lt;mc:imagingTimeEndUTC&gt;2020-05-21&lt;/mc:imagingTimeEndUTC&gt; &lt;mc:imagingTimeBeginUTC&gt;2020-05-21&lt;/mc:imagingTimeBeginUTC&gt; &lt;mc:SRS&gt;4326&lt;/mc:SRS&gt; &lt;mc:SRSName&gt;WGS84GEO&lt;/mc:SRSName&gt; &lt;mc:transparency&gt;OPAQUE&lt;/mc:transparency&gt; &lt;mc:type&gt;RECORD_RASTER&lt;/mc:type&gt; &lt;mc:updateDateUTC&gt;2022-02-13T13:03:07Z&lt;/mc:updateDateUTC&gt; &lt;ows:BoundingBox crs=&quot;urn:x-ogc:def:crs:EPSG:6.11:4326&quot; dimensions=&quot;2&quot;&gt; &lt;ows:LowerCorner&gt;-180.0 90.0&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;180.0 90.0&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/mc:MCRasterRecord&gt; &lt;/csw:SearchResults&gt; &lt;/csw:GetRecordsResponse&gt;   ","version":"Next","tagName":"h2"},{"title":"Use Export Service (Step 2)​","type":1,"pageTitle":"Export Guide","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/Guides/raster-export-guide#use-export-service-step-2","content":" Now you need to make an export request for the desired layer.  Service Reference  Service API  POST Request  { &quot;catalogRecordID&quot;: &quot;3fa85f64-5717-4562-b3fc-2c963f66afa6&quot;, &quot;domain&quot;: &quot;RASTER&quot;, &quot;ROI&quot;: { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: { &quot;maxResolutionDeg&quot;: 0.0439453125, &quot;minResolutionDeg&quot;: 0.17578125 }, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 34.82836896556114, 32.03918441418732 ], [ 34.81210152170695, 32.03918441418732 ], [ 34.81210152170695, 32.02539369969462 ], [ 34.82836896556114, 32.02539369969462 ], [ 34.82836896556114, 32.03918441418732 ] ] ] } } ] }, &quot;artifactCRS&quot;: &quot;4326&quot;, &quot;description&quot;: &quot;export example&quot;, &quot;keywords&quot;: { &quot;foo&quot;: &quot;kuku&quot; }, &quot;parameters&quot;: { &quot;foo&quot;: &quot;kuku&quot; }, &quot;webhook&quot;: [ { &quot;events&quot;: [ &quot;TASK_COMPLETED&quot; ], &quot;url&quot;: &quot;https://webhook.com&quot; } ] }   ","version":"Next","tagName":"h2"},{"title":"Wait for callback (Step 3)​","type":1,"pageTitle":"Export Guide","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/Guides/raster-export-guide#wait-for-callback-step-3","content":" Listen on &quot;webhook url&quot; that you provided for the response via the artifacts download url as explained in Service Reference... 😄 enjoy ","version":"Next","tagName":"h2"},{"title":"Valhalla routing service API reference","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/turn-by-turn/osm-valhalla-route","content":"","keywords":"","version":"Next"},{"title":"Inputs of a route​","type":1,"pageTitle":"Valhalla routing service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/turn-by-turn/osm-valhalla-route#inputs-of-a-route","content":" The route request run locally takes the form of localhost:8002/route?json={}, where the JSON inputs inside the {} include location information, name and options for the costing model, and output options. Here is the JSON payload for an example request:  {&quot;locations&quot;:[{&quot;lat&quot;:42.358528,&quot;lon&quot;:-83.271400,&quot;street&quot;:&quot;Appleton&quot;},{&quot;lat&quot;:42.996613,&quot;lon&quot;:-78.749855,&quot;street&quot;:&quot;Ranch Trail&quot;}],&quot;costing&quot;:&quot;auto&quot;,&quot;costing_options&quot;:{&quot;auto&quot;:{&quot;country_crossing_penalty&quot;:2000.0}},&quot;units&quot;:&quot;miles&quot;,&quot;id&quot;:&quot;my_work_route&quot;}   This request provides automobile routing between the Detroit, Michigan area and Buffalo, New York, with an optional street name parameter to improve navigation at the start and end points. It attempts to avoid routing north through Canada by adding a penalty for crossing international borders. The resulting route is displayed in miles.  There is an option to name your route request. You can do this by appending the following to your request &amp;id=. The id is returned with the response so a user could match to the corresponding request.  ","version":"Next","tagName":"h2"},{"title":"Locations​","type":1,"pageTitle":"Valhalla routing service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/turn-by-turn/osm-valhalla-route#locations","content":" You specify locations as an ordered list of two or more locations within a JSON array. Locations are visited in the order specified.  A location must include a latitude and longitude in decimal degrees. The coordinates can come from many input sources, such as a GPS location, a point or a click on a map, a geocoding service, and so on. Note that the Valhalla cannot search for names or addresses or perform geocoding or reverse geocoding. External search services, such as Mapbox Geocoding, can be used to find places and geocode addresses, which must be converted to coordinates for input.  To build a route, you need to specify two break locations. In addition, you can include through, via or break_through locations to influence the route path.  Location parameters description Location parameters\tDescriptionlat\tLatitude of the location in degrees. This is assumed to be both the routing location and the display location if no display_lat and display_lon are provided. lon\tLongitude of the location in degrees. This is assumed to be both the routing location and the display location if no display_lat and display_lon are provided. type\tType of location, either break, through, via or break_through. Each type controls two characteristics: whether or not to allow a u-turn at the location and whether or not to generate guidance/legs at the location. A break is a location at which we allows u-turns and generate legs and arrival/departure maneuvers. A through location is a location at which we neither allow u-turns nor generate legs or arrival/departure maneuvers. A via location is a location at which we allow u-turns but do not generate legs or arrival/departure maneuvers. A break_through location is a location at which we do not allow u-turns but do generate legs and arrival/departure maneuvers. If no type is provided, the type is assumed to be a break. The types of the first and last locations are ignored and are treated as breaks. heading\t(optional) Preferred direction of travel for the start from the location. This can be useful for mobile routing where a vehicle is traveling in a specific direction along a road, and the route should start in that direction. The heading is indicated in degrees from north in a clockwise direction, where north is 0°, east is 90°, south is 180°, and west is 270°. heading_tolerance\t(optional) How close in degrees a given street's angle must be in order for it to be considered as in the same direction of the heading parameter. The default value is 60 degrees. street\t(optional) Street name. The street name may be used to assist finding the correct routing location at the specified latitude, longitude. This is not currently implemented. way_id\t(optional) OpenStreetMap identification number for a polyline way. The way ID may be used to assist finding the correct routing location at the specified latitude, longitude. This is not currently implemented. minimum_reachability\tMinimum number of nodes (intersections) reachable for a given edge (road between intersections) to consider that edge as belonging to a connected region. When correlating this location to the route network, try to find candidates who are reachable from this many or more nodes (intersections). If a given candidate edge reaches less than this number of nodes its considered to be a disconnected island and we'll search for more candidates until we find at least one that isn't considered a disconnected island. If this value is larger than the configured service limit it will be clamped to that limit. The default is a minimum of 50 reachable nodes. radius\tThe number of meters about this input location within which edges (roads between intersections) will be considered as candidates for said location. When correlating this location to the route network, try to only return results within this distance (meters) from this location. If there are no candidates within this distance it will return the closest candidate within reason. If this value is larger than the configured service limit it will be clamped to that limit. The default is 0 meters. rank_candidates\tWhether or not to rank the edge candidates for this location. The ranking is used as a penalty within the routing algorithm so that some edges will be penalized more heavily than others. If true candidates will be ranked according to their distance from the input and various other attributes. If false the candidates will all be treated as equal which should lead to routes that are just the most optimal path with emphasis about which edges were selected. preferred_side\tIf the location is not offset from the road centerline or is closest to an intersection this option has no effect. Otherwise the determined side of street is used to determine whether or not the location should be visited from the same, opposite or either side of the road with respect to the side of the road the given locale drives on. In Germany (driving on the right side of the road), passing a value of same will only allow you to leave from or arrive at a location such that the location will be on your right. In Australia (driving on the left side of the road), passing a value of same will force the location to be on your left. A value of opposite will enforce arriving/departing from a location on the opposite side of the road from that which you would be driving on while a value of either will make no attempt limit the side of street that is available for the route. display_lat\tLatitude of the map location in degrees. If provided the lat and lon parameters will be treated as the routing location and the display_lat and display_lon will be used to determine the side of street. Both display_lat and display_lon must be provided and valid to achieve the desired effect. display_lon\tLongitude of the map location in degrees. If provided the lat and lon parameters will be treated as the routing location and the display_lat and display_lon will be used to determine the side of street. Both display_lat and display_lon must be provided and valid to achieve the desired effect. search_cutoff\tThe cutoff at which we will assume the input is too far away from civilisation to be worth correlating to the nearest graph elements. The default is 35 km. node_snap_tolerance\tDuring edge correlation this is the tolerance used to determine whether or not to snap to the intersection rather than along the street, if the snap location is within this distance from the intersection the intersection is used instead. The default is 5 meters. street_side_tolerance\tIf your input coordinate is less than this tolerance away from the edge centerline then we set your side of street to none otherwise your side of street will be left or right depending on direction of travel. The default is 5 meters. street_side_max_distance\tThe max distance in meters that the input coordinates can be from the edge centerline for them to be used for determining the side of street. Beyond this distance the side of street is set to none. The default is 1000 meters. street_side_cutoff\tDisables the preferred_side when set to same or opposite if the edge has a road class less than that provided by street_side_cutoff. The road class must be one of the following strings: motorway, trunk, primary, secondary, tertiary, unclassified, residential, service_other. The default value is service_other so that preferred_side will not be disabled for any edges. search_filter\tA set of optional filters to exclude candidate edges based on their attribution. The following exclusion filters are supported: exclude_tunnel (boolean, defaults to false): whether to exclude roads marked as tunnelsexclude_bridge (boolean, defaults to false): whether to exclude roads marked as bridgesexclude_ramp (boolean, defaults to false): whether to exclude link roads marked as ramps, note that some turn channels are also marked as rampsexclude_closures (boolean, defaults to true): whether to exclude roads considered closed due to live traffic closure. Note: This option cannot be set if costing_options.ignore_closures is also specified. An error is returned if both options are specified. Note 2: Ignoring closures at destination and source locations does NOT work for date_time type 0/1 &amp; 2 respectivelymin_road_class (string, defaults to &quot;service_other&quot;): lowest road class allowedmax_road_class (string, defaults to &quot;motorway&quot;): highest road class allowed Road classes from highest to lowest are: motorway, trunk, primary, secondary, tertiary, unclassified, residential, service_other.  Optionally, you can include the following location information without impacting the routing. This information is carried through the request and returned as a convenience.  name = Location or business name. The name may be used in the route narration directions, such as &quot;You have arrived at &lt;business name&gt;.&quot;)city = City name.state = State name.postal_code = Postal code.country = Country name.phone = Telephone number.url = URL for the place or location.waiting: The waiting time in seconds at this location. E.g. when the route describes a pizza delivery tour, each location has a service time, which can be respected by setting waiting on the location, then the departure will be delayed by this amount in seconds. Only works for break or break_through types.side_of_street = (response only) The side of street of a break location that is determined based on the actual route when the location is offset from the street. The possible values are left and right.date_time = (response only for /route) Expected date/time for the user to be at the location using the ISO 8601 format (YYYY-MM-DDThh:mm) in the local time zone of departure or arrival. For example &quot;2015-12-29T08:00&quot;. If waiting was set on this location in the request, and it's an intermediate location, the date_time will describe the departure time at this location.  Future development work includes adding location options and information related to time at each location. This will allow routes to specify a start time or an arrive by time at each location. There is also ongoing work to improve support for through locations.  ","version":"Next","tagName":"h3"},{"title":"Costing models​","type":1,"pageTitle":"Valhalla routing service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/turn-by-turn/osm-valhalla-route#costing-models","content":" Valhalla's routing service uses dynamic, run-time costing to generate the route path. The route request must include the name of the costing model and can include optional parameters available for the chosen costing model.  Costing model description Costing model\tDescriptionauto\tStandard costing for driving routes by car, motorcycle, truck, and so on that obeys automobile driving rules, such as access and turn restrictions. Auto provides a short time path (though not guaranteed to be shortest time) and uses intersection costing to minimize turns and maneuvers or road name changes. Routes also tend to favor highways and higher classification roads, such as motorways and trunks. bicycle\tStandard costing for travel by bicycle, with a slight preference for using cycleways or roads with bicycle lanes. Bicycle routes follow regular roads when needed, but avoid roads without bicycle access. bus\tStandard costing for bus routes. Bus costing inherits the auto costing behaviors, but checks for bus access on the roads. bikeshare\tA combination of pedestrian and bicycle. Use bike share station(amenity:bicycle_rental) to change the travel mode truck\tStandard costing for trucks. Truck costing inherits the auto costing behaviors, but checks for truck access, width and height restrictions, and weight limits on the roads. hov\tDEPRECATED: use auto cost with HOV costing options. taxi\tStandard costing for taxi routes. Taxi costing inherits the auto costing behaviors, but checks for taxi lane access on the roads and favors those roads. motor_scooter\tStandard costing for travel by motor scooter or moped. By default, motor_scooter costing will avoid higher class roads unless the country overrides allows motor scooters on these roads. Motor scooter routes follow regular roads when needed, but avoid roads without motor_scooter, moped, or mofa access. motorcycle\tStandard costing for travel by motorcycle. This costing model provides options to tune the route to take roadways (road touring) vs. tracks and trails (adventure motorcycling). multimodal\tCurrently supports pedestrian and transit. In the future, multimodal will support a combination of all of the above. pedestrian\tStandard walking route that excludes roads without pedestrian access. In general, pedestrian routes are shortest distance with the following exceptions: walkways and footpaths are slightly favored, while steps or stairs and alleys are slightly avoided.  Costing options​  Costing methods can have several options that can be adjusted to develop the route path, as well as for estimating time along the path. Specify costing model options in your request using the format of costing_options.type, such as costing_options.auto.  Cost options are fixed costs in seconds that are added to both the path cost and the estimated time. Examples of costs are gate_costs and toll_booth_costs, where a fixed amount of time is added. Costs are not generally used to influence the route path; instead, use penalties to do this. Costs must be in the range of 0.0 seconds to 43200.0 seconds (12 hours), otherwise a default value will be assigned.Penalty options are fixed costs in seconds that are only added to the path cost. Penalties can influence the route path determination but do not add to the estimated time along the path. For example, add a toll_booth_penalty to create route paths that tend to avoid toll booths. Penalties must be in the range of 0.0 seconds to 43200.0 seconds (12 hours), otherwise a default value will be assigned.Factor options are used to multiply the cost along an edge or road section in a way that influences the path to favor or avoid a particular attribute. Factor options do not impact estimated time along the path, though. Factors must be in the range 0.1 to 100000.0, where factors of 1.0 have no influence on cost. Anything outside of this range will be assigned a default value. Use a factor less than 1.0 to attempt to favor paths containing preferred attributes, and a value greater than 1.0 to avoid paths with undesirable attributes. Avoidance factors are more effective than favor factors at influencing a path. A factor's impact also depends on the length of road containing the specified attribute, as longer roads have more impact on the costing than very short roads. For this reason, penalty options tend to be better at influencing paths.  A special costing option is shortest, which, when true, will solely use distance as cost and disregard all other costs, penalties and factors. It's available for all costing models except multimodal &amp; bikeshare.  Another special case is disable_hierarchy_pruning costing option. As the name indicates, disable_hierarchy_pruning = true will disable hierarchies in routing algorithms, which allows us to find the actual optimal route even in edge cases. For example, together with shortest = true they can find the actual shortest route. When disable_hierarchy_pruning is true and arc distances between source and target are not above the max limit, the actual optimal route will be calculated at the expense of performance. Note that if arc distances between locations exceed the max limit, disable_hierarchy_pruning is true will not be applied. This costing option is available for all motorized costing models, i.e auto, motorcycle, motor_scooter, bus, truck &amp; taxi. For bicycle and pedestrian hierarchies are always disabled by default.  Automobile and bus costing options​  These options are available for auto, bus, and truck costing methods.  Automobile options description Automobile options\tDescriptionmaneuver_penalty\tA penalty applied when transitioning between roads that do not have consistent naming–in other words, no road names in common. This penalty can be used to create simpler routes that tend to have fewer maneuvers or narrative guidance instructions. The default maneuver penalty is five seconds. gate_cost\tA cost applied when a gate with undefined or private access is encountered. This cost is added to the estimated time / elapsed time. The default gate cost is 30 seconds. gate_penalty\tA penalty applied when a gate with no access information is on the road. The default gate penalty is 300 seconds. private_access_penalty\tA penalty applied when a gate or bollard with access=private is encountered. The default private access penalty is 450 seconds. toll_booth_cost\tA cost applied when a toll booth is encountered. This cost is added to the estimated and elapsed times. The default cost is 15 seconds. toll_booth_penalty\tA penalty applied to the cost when a toll booth is encountered. This penalty can be used to create paths that avoid toll roads. The default toll booth penalty is 0. ferry_cost\tA cost applied when entering a ferry. This cost is added to the estimated and elapsed times. The default cost is 300 seconds (5 minutes). use_ferry\tThis value indicates the willingness to take ferries. This is a range of values between 0 and 1. Values near 0 attempt to avoid ferries and values near 1 will favor ferries. The default value is 0.5. Note that sometimes ferries are required to complete a route so values of 0 are not guaranteed to avoid ferries entirely. use_highways\tThis value indicates the willingness to take highways. This is a range of values between 0 and 1. Values near 0 attempt to avoid highways and values near 1 will favor highways. The default value is 1.0. Note that sometimes highways are required to complete a route so values of 0 are not guaranteed to avoid highways entirely. use_tolls\tThis value indicates the willingness to take roads with tolls. This is a range of values between 0 and 1. Values near 0 attempt to avoid tolls and values near 1 will not attempt to avoid them. The default value is 0.5. Note that sometimes roads with tolls are required to complete a route so values of 0 are not guaranteed to avoid them entirely. use_living_streets\tThis value indicates the willingness to take living streets. This is a range of values between 0 and 1. Values near 0 attempt to avoid living streets and values near 1 will favor living streets. The default value is 0 for trucks, 0.1 for cars, buses, motor scooters and motorcycles. Note that sometimes living streets are required to complete a route so values of 0 are not guaranteed to avoid living streets entirely. use_tracks\tThis value indicates the willingness to take track roads. This is a range of values between 0 and 1. Values near 0 attempt to avoid tracks and values near 1 will favor tracks a little bit. The default value is 0 for autos, 0.5 for motor scooters and motorcycles. Note that sometimes tracks are required to complete a route so values of 0 are not guaranteed to avoid tracks entirely. service_penalty\tA penalty applied for transition to generic service road. The default penalty is 0 trucks and 15 for cars, buses, motor scooters and motorcycles. service_factor\tA factor that modifies (multiplies) the cost when generic service roads are encountered. The default service_factor is 1. country_crossing_cost\tA cost applied when encountering an international border. This cost is added to the estimated and elapsed times. The default cost is 600 seconds. country_crossing_penalty\tA penalty applied for a country crossing. This penalty can be used to create paths that avoid spanning country boundaries. The default penalty is 0. shortest\tChanges the metric to quasi-shortest, i.e. purely distance-based costing. Note, this will disable all other costings &amp; penalties. Also note, shortest will not disable hierarchy pruning, leading to potentially sub-optimal routes for some costing models. The default is false. disable_hierarchy_pruning\tDisable hierarchies to calculate the actual optimal route. The default is false. Note: This could be quite a performance drainer so there is a upper limit of distance. If the upper limit is exceeded, this option will always be false. top_speed\tTop speed the vehicle can go. Also used to avoid roads with higher speeds than this value. top_speed must be between 10 and 252 KPH. The default value is 140 KPH. fixed_speed\tFixed speed the vehicle can go. Used to override the calculated speed. Can be useful if speed of vehicle is known. fixed_speed must be between 1 and 252 KPH. The default value is 0 KPH which disables fixed speed and falls back to the standard calculated speed based on the road attribution. ignore_closures\tIf set to true, ignores all closures, marked due to live traffic closures, during routing. Note: This option cannot be set if location.search_filter.exclude_closures is also specified in the request and will return an error if it is closure_factor\tA factor that penalizes the cost when traversing a closed edge (eg: if search_filter.exclude_closures is false for origin and/or destination location and the route starts/ends on closed edges). Its value can range from 1.0 - don't penalize closed edges, to 10.0 - apply high cost penalty to closed edges. Default value is 9.0. Note: This factor is applicable only for motorized modes of transport, i.e auto, motorcycle, motor_scooter, bus, truck &amp; taxi.  Other costing options​  The following options are available for auto, bus, taxi, and truck costing methods.  Vehicle options description Vehicle options\tDescriptionheight\tThe height of the vehicle (in meters). Default 1.9 for car, bus, taxi and 4.11 for truck. width\tThe width of the vehicle (in meters). Default 1.6 for car, bus, taxi and 2.6 for truck. exclude_unpaved\tThis value indicates whether or not the path may include unpaved roads. If exclude_unpaved is set to 1 it is allowed to start and end with unpaved roads, but is not allowed to have them in the middle of the route path, otherwise they are allowed. Default false. exclude_cash_only_tolls\tA boolean value which indicates the desire to avoid routes with cash-only tolls. Default false. include_hov2\tA boolean value which indicates the desire to include HOV roads with a 2-occupant requirement in the route when advantageous. Default false. include_hov3\tA boolean value which indicates the desire to include HOV roads with a 3-occupant requirement in the route when advantageous. Default false. include_hot\tA boolean value which indicates the desire to include tolled HOV roads which require the driver to pay a toll if the occupant requirement isn't met. Default false.  The following options are available for truck costing.  Truck options description Truck options\tDescriptionlength\tThe length of the truck (in meters). Default 21.64. weight\tThe weight of the truck (in metric tons). Default 21.77. axle_load\tThe axle load of the truck (in metric tons). Default 9.07. axle_count\tThe axle count of the truck. Default 5. hazmat\tA value indicating if the truck is carrying hazardous materials. Default false.  Bicycle costing options​  The default bicycle costing is tuned toward road bicycles with a slight preference for using cycleways or roads with bicycle lanes. Bicycle routes use regular roads where needed or where no direct bicycle lane options exist, but avoid roads without bicycle access. The costing model recognizes several factors unique to bicycle travel and offers several options for tuning bicycle routes. Several factors unique to travel by bicycle influence the resulting route.  The types of roads suitable for bicycling depend on the type of bicycle. Road bicycles (skinny or narrow tires) generally are suited to paved roads or perhaps very short sections of compacted gravel. They are not designed for riding on coarse gravel or most paths and tracks through wooded areas or farmland. Mountain bikes, on the other hand, are able to traverse a wider set of surfaces.Average travel speed can be highly variable and can depend on bicycle type, fitness and experience of the cyclist, road surface, and hills. The costing model assumes a default speed on smooth, flat roads for each supported bicycle type. This speed can be overridden by an input option. The base speed is modulated by surface type (in conjunction with the bicycle type). In addition, speed is modified based on the hilliness of a road section.Bicyclists vary in their tolerance for riding on roads. Most novice bicyclists, and even other bicyclists, prefer cycleways and dedicated cycling paths and would rather avoid all but the quietest neighborhood roads. Other cyclists may be experienced riding on roads and prefer to take roadways because they often provide the fastest way to get between two places. The bicycle costing model accounts for this with a use_roads factor to indicate a cyclist's tolerance for riding on roads.Bicyclists vary in their fitness level and experience level, and many want to avoid hilly roads, and especially roads with very steep uphill or even downhill sections. Even if the fastest path is over a mountain, many cyclists prefer a flatter path that avoids the climb and descent up and over the mountain.  The following options described above for autos also apply to bicycle costing methods: maneuver_penalty, gate_cost, gate_penalty, country_crossing_cost, country_costing_penalty, and service_penalty.  These additional options are available for bicycle costing methods.  Bicycle options description Bicycle options\tDescriptionbicycle_type\tThe type of bicycle. The default type is Hybrid. Road: a road-style bicycle with narrow tires that is generally lightweight and designed for speed on paved surfaces. Hybrid or City: a bicycle made mostly for city riding or casual riding on roads and paths with good surfaces.Cross: a cyclo-cross bicycle, which is similar to a road bicycle but with wider tires suitable to rougher surfaces.Mountain: a mountain bicycle suitable for most surfaces but generally heavier and slower on paved surfaces. cycling_speed\tCycling speed is the average travel speed along smooth, flat roads. This is meant to be the speed a rider can comfortably maintain over the desired distance of the route. It can be modified (in the costing method) by surface type in conjunction with bicycle type and (coming soon) by hilliness of the road section. When no speed is specifically provided, the default speed is determined by the bicycle type and are as follows: Road = 25 KPH (15.5 MPH), Cross = 20 KPH (13 MPH), Hybrid/City = 18 KPH (11.5 MPH), and Mountain = 16 KPH (10 MPH). use_roads\tA cyclist's propensity to use roads alongside other vehicles. This is a range of values from 0 to 1, where 0 attempts to avoid roads and stay on cycleways and paths, and 1 indicates the rider is more comfortable riding on roads. Based on the use_roads factor, roads with certain classifications and higher speeds are penalized in an attempt to avoid them when finding the best path. The default value is 0.5. use_hills\tA cyclist's desire to tackle hills in their routes. This is a range of values from 0 to 1, where 0 attempts to avoid hills and steep grades even if it means a longer (time and distance) path, while 1 indicates the rider does not fear hills and steeper grades. Based on the use_hills factor, penalties are applied to roads based on elevation change and grade. These penalties help the path avoid hilly roads in favor of flatter roads or less steep grades where available. Note that it is not always possible to find alternate paths to avoid hills (for example when route locations are in mountainous areas). The default value is 0.5. use_ferry\tThis value indicates the willingness to take ferries. This is a range of values between 0 and 1. Values near 0 attempt to avoid ferries and values near 1 will favor ferries. Note that sometimes ferries are required to complete a route so values of 0 are not guaranteed to avoid ferries entirely. The default value is 0.5. use_living_streets\tThis value indicates the willingness to take living streets. This is a range of values between 0 and 1. Values near 0 attempt to avoid living streets and values from 0.5 to 1 will currently have no effect on route selection. The default value is 0.5. Note that sometimes living streets are required to complete a route so values of 0 are not guaranteed to avoid living streets entirely. avoid_bad_surfaces\tThis value is meant to represent how much a cyclist wants to avoid roads with poor surfaces relative to the bicycle type being used. This is a range of values between 0 and 1. When the value is 0, there is no penalization of roads with different surface types; only bicycle speed on each surface is taken into account. As the value approaches 1, roads with poor surfaces for the bike are penalized heavier so that they are only taken if they significantly improve travel time. When the value is equal to 1, all bad surfaces are completely disallowed from routing, including start and end points. The default value is 0.25. bss_return_cost\tThis value is useful when bikeshare is chosen as travel mode. It is meant to give the time will be used to return a rental bike. This value will be displayed in the final directions and used to calculate the whole duation. The default value is 120 seconds. bss_return_penalty\tThis value is useful when bikeshare is chosen as travel mode. It is meant to describe the potential effort to return a rental bike. This value won't be displayed and used only inside of the algorithm. shortest\tChanges the metric to quasi-shortest, i.e. purely distance-based costing. Note, this will disable all other costings &amp; penalties. Also note, shortest will not disable hierarchy pruning, leading to potentially sub-optimal routes for some costing models. The default is false.  Motor_scooter costing options​  Standard costing for travel by motor scooter or moped. By default, motor_scooter costing will avoid higher class roads unless the country overrides allows motor scooters on these roads. Motor scooter routes follow regular roads when needed, but avoid roads without motor_scooter, moped, or mofa access. The costing model recognizes factors unique to motor_scooter travel and offers options for tuning motor_scooter routes. Factors unique to travel by motor_scooter influence the resulting route.  All of the options described above for autos also apply to motor_scooter costing methods. These additional options are available for motor_scooter costing methods.  Motor_scooter options description Motor_scooter options\tDescriptiontop_speed\tTop speed the motorized scooter can go. Used to avoid roads with higher speeds than this value. For motor_scooter this value must be between 20 and 120 KPH. The default value is 45 KPH (~28 MPH) use_primary\tA riders's propensity to use primary roads. This is a range of values from 0 to 1, where 0 attempts to avoid primary roads, and 1 indicates the rider is more comfortable riding on primary roads. Based on the use_primary factor, roads with certain classifications and higher speeds are penalized in an attempt to avoid them when finding the best path. The default value is 0.5. use_hills\tA riders's desire to tackle hills in their routes. This is a range of values from 0 to 1, where 0 attempts to avoid hills and steep grades even if it means a longer (time and distance) path, while 1 indicates the rider does not fear hills and steeper grades. Based on the use_hills factor, penalties are applied to roads based on elevation change and grade. These penalties help the path avoid hilly roads in favor of flatter roads or less steep grades where available. Note that it is not always possible to find alternate paths to avoid hills (for example when route locations are in mountainous areas). The default value is 0.5. shortest\tChanges the metric to quasi-shortest, i.e. purely distance-based costing. Note, this will disable all other costings &amp; penalties. Also note, shortest will not disable hierarchy pruning, leading to potentially sub-optimal routes for some costing models. The default is false. disable_hierarchy_pruning\tDisable hierarchies to calculate the actual optimal route. The default is false. Note: This could be quite a performance drainer so there is a upper limit of distance. If the upper limit is exceeded, this option will always be false.  Motorcycle costing options​  Standard costing for travel by motorcycle. By default, motorcycle costing will default to higher class roads. The costing model recognizes factors unique to motorcycle travel and offers options for tuning motorcycle routes.  All of the options described above for autos also apply to motorcycle costing methods. The following options are available for motorcycle costing:  Motorcycle options description Motorcycle options\tDescriptionuse_highways\tA riders's propensity to prefer the use of highways. This is a range of values from 0 to 1, where 0 attempts to avoid highways, and values toward 1 indicates the rider prefers highways. The default value is 1.0. use_trails\tA riders's desire for adventure in their routes. This is a range of values from 0 to 1, where 0 will avoid trails, tracks, unclassified or bad surfaces and values towards 1 will tend to avoid major roads and route on secondary roads. The default value is 0.0. shortest\tChanges the metric to quasi-shortest, i.e. purely distance-based costing. Note, this will disable all other costings &amp; penalties. Also note, shortest will not disable hierarchy pruning, leading to potentially sub-optimal routes for some costing models. The default is false. disable_hierarchy_pruning\tDisable hierarchies to calculate the actual optimal route. The default is false. Note: This could be quite a performance drainer so there is a upper limit of distance. If the upper limit is exceeded, this option will always be false.  Pedestrian costing options​  These options are available for pedestrian costing methods.  Pedestrian options description Pedestrian options\tDescriptionwalking_speed\tWalking speed in kilometers per hour. Must be between 0.5 and 25 km/hr. Defaults to 5.1 km/hr (3.1 miles/hour). walkway_factor\tA factor that modifies the cost when encountering roads classified as footway (no motorized vehicles allowed), which may be designated footpaths or designated sidewalks along residential roads. Pedestrian routes generally attempt to favor using these walkways and sidewalks. The default walkway_factor is 1.0. sidewalk_factor\tA factor that modifies the cost when encountering roads with dedicated sidewalks. Pedestrian routes generally attempt to favor using sidewalks. The default sidewalk_factor is 1.0. alley_factor\tA factor that modifies (multiplies) the cost when alleys are encountered. Pedestrian routes generally want to avoid alleys or narrow service roads between buildings. The default alley_factor is 2.0. driveway_factor\tA factor that modifies (multiplies) the cost when encountering a driveway, which is often a private, service road. Pedestrian routes generally want to avoid driveways (private). The default driveway factor is 5.0. step_penalty\tA penalty in seconds added to each transition onto a path with steps or stairs. Higher values apply larger cost penalties to avoid paths that contain flights of steps. use_ferry\tThis value indicates the willingness to take ferries. This is range of values between 0 and 1. Values near 0 attempt to avoid ferries and values near 1 will favor ferries. The default value is 0.5. Note that sometimes ferries are required to complete a route so values of 0 are not guaranteed to avoid ferries entirely. use_living_streets\tThis value indicates the willingness to take living streets. This is a range of values between 0 and 1. Values near 0 attempt to avoid living streets and values near 1 will favor living streets. The default value is 0.6. Note that sometimes living streets are required to complete a route so values of 0 are not guaranteed to avoid living streets entirely. use_tracks\tThis value indicates the willingness to take track roads. This is a range of values between 0 and 1. Values near 0 attempt to avoid tracks and values near 1 will favor tracks a little bit. The default value is 0.5. Note that sometimes tracks are required to complete a route so values of 0 are not guaranteed to avoid tracks entirely. use_hills\tThis is a range of values from 0 to 1, where 0 attempts to avoid hills and steep grades even if it means a longer (time and distance) path, while 1 indicates the pedestrian does not fear hills and steeper grades. Based on the use_hills factor, penalties are applied to roads based on elevation change and grade. These penalties help the path avoid hilly roads in favor of flatter roads or less steep grades where available. Note that it is not always possible to find alternate paths to avoid hills (for example when route locations are in mountainous areas). The default value is 0.5. use_lit\tThis value is a range of values from 0 to 1, where 0 indicates indifference towards lit streets, and 1 indicates that unlit streets should be avoided. Note that even with values near 1, there is no guarantee the returned route will include lit segments. The default value is 0. service_penalty\tA penalty applied for transition to generic service road. The default penalty is 0. service_factor\tA factor that modifies (multiplies) the cost when generic service roads are encountered. The default service_factor is 1. max_hiking_difficulty\tThis value indicates the maximum difficulty of hiking trails that is allowed. Values between 0 and 6 are allowed. The values correspond to sac_scale values within OpenStreetMap. The default value is 1 which means that well cleared trails that are mostly flat or slightly sloped are allowed. Higher difficulty trails can be allowed by specifying a higher value for max_hiking_difficulty. bss_rent_cost\tThis value is useful when bikeshare is chosen as travel mode. It is meant to give the time will be used to rent a bike from a bike share station. This value will be displayed in the final directions and used to calculate the whole duation. The default value is 120 seconds. bss_rent_penalty\tThis value is useful when bikeshare is chosen as travel mode. It is meant to describe the potential effort to rent a bike from a bike share station. This value won't be displayed and used only inside of the algorithm. shortest\tChanges the metric to quasi-shortest, i.e. purely distance-based costing. Note, this will disable all other costings &amp; penalties. Also note, shortest will not disable hierarchy pruning, leading to potentially sub-optimal routes for some costing models. The default is false. transit_start_end_max_distance\tA pedestrian option that can be added to the request to extend the defaults (2145 meters or approximately 1.5 miles). This is the maximum walking distance at the beginning or end of a route. transit_transfer_max_distance\tA pedestrian option that can be added to the request to extend the defaults (800 meters or 0.5 miles). This is the maximum walking distance between transfers.  Transit costing options​  These options are available for transit costing when the multimodal costing model is used.  Transit options description Transit options\tDescriptionuse_bus\tUser's desire to use buses. Range of values from 0 (try to avoid buses) to 1 (strong preference for riding buses). use_rail\tUser's desire to use rail/subway/metro. Range of values from 0 (try to avoid rail) to 1 (strong preference for riding rail). use_transfers\tUser's desire to favor transfers. Range of values from 0 (try to avoid transfers) to 1 (totally comfortable with transfers). filters\tA way to filter for one or more stops (TODO: need to re-enable), routes, or operators. Filters must contain a list of so-called Onestop IDs, which is (supposed to be) a unique identifier for GTFS data, and an action. The OneStop ID is simply the feeds's directory name and the object's GTFS ID separated by an underscore, i.e. a route with route_id: AUR in routes.txt from the feed NYC would have the OneStop ID NYC_AUR, similar with operators/agencies. ids: any number of Onestop IDsaction: either exclude to exclude all of the ids listed in the filter or include to include only the ids listed in the filter  Sample JSON payloads for multimodal requests with transit​  A multimodal request at the current date and time:  {&quot;locations&quot;:[{&quot;lat&quot;:40.730930,&quot;lon&quot;:-73.991379,&quot;street&quot;:&quot;Wanamaker Place&quot;},{&quot;lat&quot;:40.749706,&quot;lon&quot;:-73.991562,&quot;street&quot;:&quot;Penn Plaza&quot;}],&quot;costing&quot;:&quot;multimodal&quot;,&quot;units&quot;:&quot;miles&quot;}   A multimodal request departing on 2016-03-29 at 08:00:  {&quot;locations&quot;:[{&quot;lat&quot;:40.749706,&quot;lon&quot;:-73.991562,&quot;type&quot;:&quot;break&quot;,&quot;street&quot;:&quot;Penn Plaza&quot;},{&quot;lat&quot;:40.73093,&quot;lon&quot;:-73.991379,&quot;type&quot;:&quot;break&quot;,&quot;street&quot;:&quot;Wanamaker Place&quot;}],&quot;costing&quot;:&quot;multimodal&quot;,&quot;date_time&quot;:{&quot;type&quot;:1,&quot;value&quot;:&quot;2016-03-29T08:00&quot;}}   A multimodal request for a route favoring buses and a person walking at a set speed of 4.1 km/h:  {&quot;locations&quot;:[{&quot;lat&quot;:40.749706,&quot;lon&quot;:-73.991562,&quot;type&quot;:&quot;break&quot;,&quot;street&quot;:&quot;Penn Plaza&quot;},{&quot;lat&quot;:40.73093,&quot;lon&quot;:-73.991379,&quot;type&quot;:&quot;break&quot;,&quot;street&quot;:&quot;Wanamaker Place&quot;}],&quot;costing&quot;:&quot;multimodal&quot;,&quot;costing_options&quot;:{&quot;transit&quot;:{&quot;use_bus&quot;:&quot;1.0&quot;,&quot;use_rail&quot;:&quot;0.0&quot;,&quot;use_transfers&quot;:&quot;0.3&quot;},&quot;pedestrian&quot;:{&quot;walking_speed&quot;:&quot;4.1&quot;}}}   A multimodal request with a filter for certain Onestop IDs:  {&quot;locations&quot;:[{&quot;lat&quot;:40.730930,&quot;lon&quot;:-73.991379,&quot;street&quot;:&quot;Wanamaker Place&quot;},{&quot;lat&quot;:40.749706,&quot;lon&quot;:-73.991562,&quot;street&quot;:&quot;Penn Plaza&quot;}],&quot;costing&quot;:&quot;multimodal&quot;,&quot;costing_options&quot;:{&quot;transit&quot;:{&quot;filters&quot;:{&quot;routes&quot;:{&quot;ids&quot;:[&quot;NYC_AUR&quot;],&quot;action&quot;:&quot;exclude&quot;},&quot;operators&quot;:{&quot;ids&quot;:[&quot;paris_CFG&quot;,&quot;berlin_VBB&quot;],&quot;action&quot;:&quot;include&quot;}}}},&quot;units&quot;:&quot;miles&quot;}   ","version":"Next","tagName":"h3"},{"title":"Directions options​","type":1,"pageTitle":"Valhalla routing service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/turn-by-turn/osm-valhalla-route#directions-options","content":" Directions options should be specified at the top level of the JSON object.  Directions options description Directions options\tDescriptionunits\tDistance units for output. Allowable unit types are miles (or mi) and kilometers (or km). If no unit type is specified, the units default to kilometers. language\tThe language of the narration instructions based on the IETF BCP 47 language tag string. If no language is specified or the specified language is unsupported, United States-based English (en-US) is used. Currently supported language list directions_type\tAn enum with 3 values. none indicating no maneuvers or instructions should be returned.maneuvers indicating that only maneuvers be returned.instructions indicating that maneuvers with instructions should be returned (this is the default if not specified). format\tFour options are available: json is default valhalla routing directions JSON formatgpx returns the route as a GPX (GPS exchange format) XML trackosrm creates a OSRM compatible route directions JSONpbf formats the result using protocol buffers banner_instructions\tIf the format is osrm, this boolean indicates if each step should have the additional bannerInstructions attribute, which can be displayed in some navigation system SDKs. alternates\tA number denoting how many alternate routes should be provided. There may be no alternates or less alternates than the user specifies. Alternates are not yet supported on multipoint routes (that is, routes with more than 2 locations). They are also not supported on time dependent routes.  For example a bus request with the result in Spanish using the OSRM (Open Source Routing Machine) format with the additional bannerInstructions in the steps would use the following json:  {&quot;locations&quot;:[{&quot;lat&quot;:40.730930,&quot;lon&quot;:-73.991379},{&quot;lat&quot;:40.749706,&quot;lon&quot;:-73.991562}],&quot;format&quot;:&quot;osrm&quot;,&quot;costing&quot;:&quot;bus&quot;,&quot;banner_instructions&quot;:true,&quot;language&quot;:&quot;es-ES&quot;}   Other request options​  Other request options description Options\tDescriptionexclude_locations\tA set of locations to exclude or avoid within a route can be specified using a JSON array of avoid_locations. The avoid_locations have the same format as the locations list. At a minimum each avoid location must include latitude and longitude. The avoid_locations are mapped to the closest road or roads and these roads are excluded from the route path computation. exclude_polygons\tOne or multiple exterior rings of polygons in the form of nested JSON arrays, e.g. [[[lon1, lat1], [lon2,lat2]],[[lon1,lat1],[lon2,lat2]]]. Roads intersecting these rings will be avoided during path finding. If you only need to avoid a few specific roads, it's much more efficient to use exclude_locations. Valhalla will close open rings (i.e. copy the first coordinate to the last position). date_time\tThis is the local date and time at the location. type 0 - Current departure time.1 - Specified departure time2 - Specified arrival time. Not yet implemented for multimodal costing method.3 - Invariant specified time. Time does not vary over the course of the path. Not implemented for multimodal or bike share routing value - the date and time is specified in ISO 8601 format (YYYY-MM-DDThh:mm) in the local time zone of departure or arrival. For example &quot;2016-07-03T08:06&quot; id\tName your route request. If id is specified, the naming will be sent thru to the response. linear_references\tWhen present and true, the successful route response will include a key linear_references. Its value is an array of base64-encoded OpenLR location references, one for each graph edge of the road network matched by the input trace. prioritize_bidirectional\tPrioritize bidirectional a* when date_time.type = depart_at/current. By default time_dependent_forward a* is used in these cases, but bidirectional a* is much faster. Currently it does not update the time (and speeds) when searching for the route path, but the ETA on that route is recalculated based on the time-dependent speeds roundabout_exits\tA boolean indicating whether exit instructions at roundabouts should be added to the output or not. Default is true.  ","version":"Next","tagName":"h3"},{"title":"Outputs of a route​","type":1,"pageTitle":"Valhalla routing service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/turn-by-turn/osm-valhalla-route#outputs-of-a-route","content":" If a route has been named in the request using the optional &amp;id= input, then the name will be returned as a string id on the JSON object.  The route results are returned as a trip. This is a JSON object that contains details about the trip, including locations, a summary with basic information about the entire trip, and a list of legs.  Basic trip information includes:  Trip item description Trip item\tDescriptionstatus\tStatus code. status_message Status message. units\tThe specified units of length are returned, either kilometers or miles. language\tThe language of the narration instructions. If the user specified a language in the directions options and the specified language was supported - this returned value will be equal to the specified value. Otherwise, this value will be the default (en-US) language. locations\tLocation information is returned in the same form as it is entered with additional fields to indicate the side of the street. warnings (optional)\tThis array may contain warning objects informing about deprecated request parameters, clamped values etc.  The summary JSON object includes:  Summary item description Summary item\tDescriptiontime\tEstimated elapsed time to complete the trip. length\tDistance traveled for the entire trip. Units are either miles or kilometers based on the input units specified. has_toll\tFlag indicating if the the path uses one or more toll segments. has_highway\tFlag indicating if the the path uses one or more highway segments. has_ferry\tFlag indicating if the the path uses one or more ferry segments. min_lat\tMinimum latitude of a bounding box containing the route. min_lon\tMinimum longitude of a bounding box containing the route. max_lat\tMaximum latitude of a bounding box containing the route. max_lon\tMaximum longitude of a bounding box containing the route.  ","version":"Next","tagName":"h2"},{"title":"Trip legs and maneuvers​","type":1,"pageTitle":"Valhalla routing service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/turn-by-turn/osm-valhalla-route#trip-legs-and-maneuvers","content":" A trip contains one or more legs. For n number of break locations, there are n-1 legs. Through locations do not create separate legs.  Each leg of the trip includes a summary, which is comprised of the same information as a trip summary but applied to the single leg of the trip. It also includes a shape, which is an encoded polyline of the route path (with 6 digits decimal precision), and a list of maneuvers as a JSON array.  Each maneuver includes:  Maneuver item description Maneuver item\tDescriptiontype\tType of maneuver. See below for a list. instruction\tWritten maneuver instruction. Describes the maneuver, such as &quot;Turn right onto Main Street&quot;. verbal_transition_alert_instruction\tText suitable for use as a verbal alert in a navigation application. The transition alert instruction will prepare the user for the forthcoming transition. For example: &quot;Turn right onto North Prince Street&quot;. verbal_pre_transition_instruction\tText suitable for use as a verbal message immediately prior to the maneuver transition. For example &quot;Turn right onto North Prince Street, U.S. 2 22&quot;. verbal_post_transition_instruction\tText suitable for use as a verbal message immediately after the maneuver transition. For example &quot;Continue on U.S. 2 22 for 3.9 miles&quot;. street_names\tList of street names that are consistent along the entire nonobvious maneuver. begin_street_names\tWhen present, these are the street names at the beginning (transition point) of the nonobvious maneuver (if they are different than the names that are consistent along the entire nonobvious maneuver). time\tEstimated time along the maneuver in seconds. length\tManeuver length in the units specified. begin_shape_index\tIndex into the list of shape points for the start of the maneuver. end_shape_index\tIndex into the list of shape points for the end of the maneuver. toll\tTrue if the maneuver has any toll, or portions of the maneuver are subject to a toll. highway\tTrue if a highway is encountered on this maneuver. rough\tTrue if the maneuver is unpaved or rough pavement, or has any portions that have rough pavement. gate\tTrue if a gate is encountered on this maneuver. ferry\tTrue if a ferry is encountered on this maneuver. sign\tContains the interchange guide information at a road junction associated with this maneuver. See below for details. roundabout_exit_count\tThe spoke to exit roundabout after entering. depart_instruction\tWritten depart time instruction. Typically used with a transit maneuver, such as &quot;Depart: 8:04 AM from 8 St - NYU&quot;. verbal_depart_instruction\tText suitable for use as a verbal depart time instruction. Typically used with a transit maneuver, such as &quot;Depart at 8:04 AM from 8 St - NYU&quot;. arrive_instruction\tWritten arrive time instruction. Typically used with a transit maneuver, such as &quot;Arrive: 8:10 AM at 34 St - Herald Sq&quot;. verbal_arrive_instruction\tText suitable for use as a verbal arrive time instruction. Typically used with a transit maneuver, such as &quot;Arrive at 8:10 AM at 34 St - Herald Sq&quot;. transit_info\tContains the attributes that describe a specific transit route. See below for details. verbal_multi_cue\tTrue if the verbal_pre_transition_instruction has been appended with the verbal instruction of the next maneuver. travel_mode\tTravel mode. &quot;drive&quot;&quot;pedestrian&quot;&quot;bicycle&quot;&quot;transit&quot; travel_type\tTravel type for drive. &quot;car&quot; Travel type for pedestrian. &quot;foot&quot; Travel type for bicycle. &quot;road&quot; Travel type for transit. Tram or light rail = &quot;tram&quot;Metro or subway = &quot;metro&quot;Rail = &quot;rail&quot;Bus = &quot;bus&quot;Ferry = &quot;ferry&quot;Cable car = &quot;cable_car&quot;Gondola = &quot;gondola&quot;Funicular = &quot;funicular&quot; bss_maneuver_type\tUsed when travel_mode is bikeshare. Describes bike share maneuver. The default value is &quot;NoneAction &quot;NoneAction&quot;&quot;RentBikeAtBikeShare&quot;&quot;ReturnBikeAtBikeShare&quot;  For the maneuver type, the following are available: kNone = 0; kStart = 1; kStartRight = 2; kStartLeft = 3; kDestination = 4; kDestinationRight = 5; kDestinationLeft = 6; kBecomes = 7; kContinue = 8; kSlightRight = 9; kRight = 10; kSharpRight = 11; kUturnRight = 12; kUturnLeft = 13; kSharpLeft = 14; kLeft = 15; kSlightLeft = 16; kRampStraight = 17; kRampRight = 18; kRampLeft = 19; kExitRight = 20; kExitLeft = 21; kStayStraight = 22; kStayRight = 23; kStayLeft = 24; kMerge = 25; kRoundaboutEnter = 26; kRoundaboutExit = 27; kFerryEnter = 28; kFerryExit = 29; kTransit = 30; kTransitTransfer = 31; kTransitRemainOn = 32; kTransitConnectionStart = 33; kTransitConnectionTransfer = 34; kTransitConnectionDestination = 35; kPostTransitConnectionDestination = 36; kMergeRight = 37; kMergeLeft = 38;   The maneuver sign may contain four lists of interchange sign elements as follows:  exit_number_elements = list of exit number elements. If an exit number element exists, it is typically just one value.exit_branch_elements = list of exit branch elements. The exit branch element text is the subsequent road name or route number after the sign.exit_toward_elements = list of exit toward elements. The exit toward element text is the location where the road ahead goes - the location is typically a control city, but may also be a future road name or route number.exit_name_elements = list of exit name elements. The exit name element is the interchange identifier - typically not used in the US.  Each maneuver sign element includes:  Maneuver sign element item description Maneuver sign element item\tDescriptiontext\tInterchange sign text. exit number example: 91B.exit branch example: I 95 North.exit toward example: New York.exit name example: Gettysburg Pike. consecutive_count\tThe frequency of this sign element within a set a consecutive signs. This item is optional.  A maneuver transit_info includes:  Maneuver transit route item description Maneuver transit route item\tDescriptiononestop_id\tGlobal transit route identifier. short_name\tShort name describing the transit route. For example &quot;N&quot;. long_name\tLong name describing the transit route. For example &quot;Broadway Express&quot;. headsign\tThe sign on a public transport vehicle that identifies the route destination to passengers. For example &quot;ASTORIA - DITMARS BLVD&quot;. color\tThe numeric color value associated with a transit route. The value for yellow would be &quot;16567306&quot;. text_color\tThe numeric text color value associated with a transit route. The value for black would be &quot;0&quot;. description\tThe description of the the transit route. For example &quot;Trains operate from Ditmars Boulevard, Queens, to Stillwell Avenue, Brooklyn, at all times. N trains in Manhattan operate along Broadway and across the Manhattan Bridge to and from Brooklyn. Trains in Brooklyn operate along 4th Avenue, then through Borough Park to Gravesend. Trains typically operate local in Queens, and either express or local in Manhattan and Brooklyn, depending on the time. Late night trains operate via Whitehall Street, Manhattan. Late night service is local&quot;. operator_onestop_id\tGlobal operator/agency identifier. operator_name\tOperator/agency name. For example, &quot;BART&quot;, &quot;King County Marine Division&quot;, and so on. Short name is used over long name. operator_url\tOperator/agency URL. For example, &quot;http://web.mta.info/&quot;. transit_stops\tA list of the stops/stations associated with a specific transit route. See below for details.  A transit_stop includes:  Transit stop item description Transit stop item\tDescriptiontype\tType of stop (simple stop=0; station=1). name\tName of the stop or station. For example &quot;14 St - Union Sq&quot;. arrival_date_time\tArrival date and time using the ISO 8601 format (YYYY-MM-DDThh:mm). For example, &quot;2015-12-29T08:06&quot;. departure_date_time\tDeparture date and time using the ISO 8601 format (YYYY-MM-DDThh:mm). For example, &quot;2015-12-29T08:06&quot;. is_parent_stop\tTrue if this stop is a marked as a parent stop. assumed_schedule\tTrue if the times are based on an assumed schedule because the actual schedule is not known. lat\tLatitude of the transit stop in degrees. lon\tLongitude of the transit stop in degrees.  Continuing with the earlier routing example from the Detroit, Michigan area, a maneuver such as this one may be returned with that request: {&quot;begin_shape_index&quot;:0,&quot;length&quot;:0.109,&quot;end_shape_index&quot;:1,&quot;instruction&quot;:&quot;Go south on Appleton.&quot;,&quot;street_names&quot;:[&quot;Appleton&quot;],&quot;type&quot;:1,&quot;time&quot;:0}  In the future, look for additional maneuver information to enhance navigation applications, including landmark usage.  ","version":"Next","tagName":"h3"},{"title":"HTTP status codes and conditions​","type":1,"pageTitle":"Valhalla routing service API reference","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/openstreetmap/valhalla/turn-by-turn/osm-valhalla-route#http-status-codes-and-conditions","content":" The following is a table of HTTP status error code conditions that may occur for a particular request. In general, the service follows the HTTP specification. That is to say that 5xx returns are generally ephemeral server problems that should be resolved shortly or are the result of a bug. 4xx returns are used to mark requests that cannot be carried out, generally due to bad input in the request or problems with the underlying data. A 2xx return is expected when there is a successful route result or trip, as described above.  Status Code description Status Code\tStatus\tDescription200\tyour_trip_json\tA happy bit of json describing your trip result 400\tFailed to parse json request\tYou need a valid json request 400\tFailed to parse location\tYou need a valid location object in your json request 400\tFailed to parse correlated location\tThere was a problem with the location once correlated to the route network 400\tInsufficiently specified required parameter 'locations'\tYou forgot the locations parameter 400\tNo edge/node costing provided\tYou forgot the costing parameter 400\tInsufficient number of locations provided\tYou didn't provide enough locations 400\tExceeded max route locations of X\tYou are asking for too many locations 400\tLocations are in unconnected regions. Go check/edit the map at osm.org\tYou are routing between regions of no connectivity 400\tNo costing method found for 'X'\tYou are asking for a non-existent costing mode 400\tPath distance exceeds the max distance limit\tYou want to travel further than this mode allows 400\tNo suitable edges near location\tThere were no edges applicable to your mode of travel near the input location 400\tNo data found for location\tThere was no route data tile at the input location 400\tNo path could be found for input\tThere was no path found between the input locations 404\tTry any of: '/route' '/locate'\tYou asked for an invalid path 405\tTry a POST or GET request instead\tWe only support GET and POST requests 500\tFailed to parse intermediate request format\tHad a problem reading an intermediate request format 500\tFailed to parse TripPath\tHad a problem reading the computed path from Protobuf 500\tCould not build directions for TripPath\tHad a problem using the trip path to create TripDirections 500\tFailed to parse TripDirections\tHad a problem using the trip directions to serialize a json response 501\tNot implemented\tNot Implemented ","version":"Next","tagName":"h3"},{"title":"Getting started","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/Guides/raster-getting-started","content":"","keywords":"","version":"Next"},{"title":"Developer Guide step-by-step​","type":1,"pageTitle":"Getting started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/Guides/raster-getting-started#developer-guide-step-by-step","content":" The following guide will help you understand, Step-by-step the best practices of how to work with the MapColonies Raster Catalog and how to consume Raster products in a dynamic way (materials might be changed or added).  info If you only want to view the layers or their metadata or other information (Product_ID, region, etc.) you may go to the MapColonies catalog application, locate the required layer and view the information there.  ","version":"Next","tagName":"h2"},{"title":"Flow diagram​","type":1,"pageTitle":"Getting started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/Guides/raster-getting-started#flow-diagram","content":"   ","version":"Next","tagName":"h2"},{"title":"Query Catalog Service (Step 1)​","type":1,"pageTitle":"Getting started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/Guides/raster-getting-started#step-1","content":" info Query Raster CSW catalog service to find item(s) according to a desired filter. See some examples here.  Specific LayerFetch All Layers (Pagination) To fetch a specific layer you need the following values: productIdproductType Both can be coppied from our catalog app. When you have these values in hand you can make a POST request to &lt;RASTER-CATALOG-SERVICE_URL&gt;/csw with the following body (replace productId and productType with real values): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecords xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; service=&quot;CSW&quot; maxRecords=&quot;1&quot; startPosition=&quot;1&quot; outputSchema=&quot;http://schema.mapcolonies.com/raster&quot; version=&quot;2.0.2&quot; xmlns:mc=&quot;http://schema.mapcolonies.com/raster&quot; &gt; &lt;csw:Query typeNames=&quot;mc:MCRasterRecord&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;csw:Constraint version=&quot;1.1.0&quot;&gt; &lt;Filter xmlns=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;And&gt; &lt;PropertyIsEqualTo&gt; &lt;PropertyName&gt;mc:productId&lt;/PropertyName&gt; &lt;Literal&gt;productId&lt;/Literal&gt; &lt;/PropertyIsEqualTo&gt; &lt;PropertyIsEqualTo&gt; &lt;PropertyName&gt;mc:productType&lt;/PropertyName&gt; &lt;Literal&gt;productType&lt;/Literal&gt; &lt;/PropertyIsEqualTo&gt; &lt;/And&gt; &lt;/Filter&gt; &lt;/csw:Constraint&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt;   You will get an XML Response with product metadata:  Response example GetRecords Response &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt; &lt;!-- pycsw 2.7.dev0 --&gt; &lt;csw:GetRecordsResponse xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; xmlns:dct=&quot;http://purl.org/dc/terms/&quot; xmlns:gmd=&quot;http://www.isotc211.org/2005/gmd&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:ows=&quot;http://www.opengis.net/ows&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:mc=&quot;http://schema.mapcolonies.com/raster&quot; version=&quot;2.0.2&quot; xsi:schemaLocation=&quot;http://www.opengis.net/cat/csw/2.0.2 http://schemas.opengis.net/csw/2.0.2/CSW-discovery.xsd&quot;&gt; &lt;csw:SearchStatus timestamp=&quot;2022-02-15T15:08:58Z&quot;/&gt; &lt;csw:SearchResults numberOfRecordsMatched=&quot;2&quot; numberOfRecordsReturned=&quot;1&quot; nextRecord=&quot;2&quot; recordSchema=&quot;http://schema.mapcolonies.com/raster&quot; elementSet=&quot;full&quot;&gt; &lt;mc:MCRasterRecord&gt; &lt;mc:classification&gt;4&lt;/mc:classification&gt; &lt;mc:creationDateUTC&gt;2022-02-13T13:04:23Z&lt;/mc:creationDateUTC&gt; &lt;mc:description&gt;World Wide 2020&lt;/mc:description&gt; &lt;mc:footprint&gt;{&quot;type&quot;:&quot;Polygon&quot;,&quot;coordinates&quot;:[[[-180,-90],[-180,90],[180,90],[180,-90],[-180,-90]]]}&lt;/mc:footprint&gt; &lt;mc:minHorizontalAccuracyCE90&gt;3&lt;/mc:minHorizontalAccuracyCE90&gt; &lt;mc:id&gt;3b3164a7-280d-4392-a82f-d60a76e69092&lt;/mc:id&gt; &lt;mc:ingestionDate&gt;2022-02-13T13:04:23Z&lt;/mc:ingestionDate&gt; &lt;mc:insertDate&gt;2022-02-13T13:04:41Z&lt;/mc:insertDate&gt; &lt;mc:mimeType&gt;image/jpeg&lt;/mc:mimeType&gt; &lt;mc:links scheme=&quot;WMS&quot; name=&quot;ORTHOPHOTO_MOSAIC_BASE&quot; description=&quot;&quot;&gt;'&lt;YOUR_MAPPROXY_URL&gt;/service?REQUEST=GetCapabilities'&lt;/mc:links&gt; &lt;mc:links scheme=&quot;WMS_BASE&quot; name=&quot;ORTHOPHOTO_MOSAIC_BASE&quot; description=&quot;&quot;&gt;'&lt;YOUR_MAPPROXY_URL&gt;/wms'&lt;/mc:links&gt; &lt;mc:links scheme=&quot;WMTS&quot; name=&quot;ORTHOPHOTO_MOSAIC_BASE&quot; description=&quot;&quot;&gt;'&lt;YOUR_MAPPROXY_URL&gt;/wmts/1.0.0/WMTSCapabilities.xml'&lt;/mc:links&gt; &lt;mc:links scheme=&quot;WMTS_KVP&quot; name=&quot;ORTHOPHOTO_MOSAIC_BASE&quot; description=&quot;&quot;&gt;'&lt;YOUR_MAPPROXY_URL&gt;/service?REQUEST=GetCapabilities&amp;SERVICE=WMTS'&lt;/mc:links&gt; &lt;mc:links scheme=&quot;WMTS_BASE&quot; name=&quot;ORTHOPHOTO_MOSAIC_BASE&quot; description=&quot;&quot;&gt;'&lt;YOUR_MAPPROXY_URL&gt;/wmts'&lt;/mc:links&gt; &lt;mc:maxResolutionMeter&gt;0.1&lt;/mc:maxResolutionMeter&gt; &lt;mc:producerName&gt;IDFMU&lt;/mc:producerName&gt; &lt;mc:productBBox&gt;-180,-90,180,90&lt;/mc:productBBox&gt; &lt;mc:productId&gt;ORTHOPHOTO_MOSAIC_BASE&lt;/mc:productId&gt; &lt;mc:productName&gt;אורתופוטו מתעדכן&lt;/mc:productName&gt; &lt;mc:productType&gt;OrthophotoBest&lt;/mc:productType&gt; &lt;mc:productVersion&gt;1.0&lt;/mc:productVersion&gt; &lt;mc:region&gt;World&lt;/mc:region&gt; &lt;mc:maxResolutionDeg&gt;0.000171661376953125&lt;/mc:maxResolutionDeg&gt; &lt;mc:sensors&gt;UNDEFINED&lt;/mc:sensors&gt; &lt;mc:imagingTimeEndUTC&gt;2020-05-21&lt;/mc:imagingTimeEndUTC&gt; &lt;mc:imagingTimeBeginUTC&gt;2020-05-21&lt;/mc:imagingTimeBeginUTC&gt; &lt;mc:SRS&gt;4326&lt;/mc:SRS&gt; &lt;mc:SRSName&gt;WGS84GEO&lt;/mc:SRSName&gt; &lt;mc:transparency&gt;OPAQUE&lt;/mc:transparency&gt; &lt;mc:type&gt;RECORD_RASTER&lt;/mc:type&gt; &lt;mc:updateDateUTC&gt;2022-02-13T13:03:07Z&lt;/mc:updateDateUTC&gt; &lt;ows:BoundingBox crs=&quot;urn:x-ogc:def:crs:EPSG:6.11:4326&quot; dimensions=&quot;2&quot;&gt; &lt;ows:LowerCorner&gt;-180.0 90.0&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;180.0 90.0&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/mc:MCRasterRecord&gt; &lt;/csw:SearchResults&gt; &lt;/csw:GetRecordsResponse&gt;   warning Notice that you need to set 'outputSchema=&quot;http://schema.mapcolonies.com/raster&quot;' in order to get the full catalog data  ","version":"Next","tagName":"h2"},{"title":"Extract product Bounding Box (Step 2)​","type":1,"pageTitle":"Getting started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/Guides/raster-getting-started#step-2","content":" Some of our layers cover only specific parts of the world, this means that not all requests will return data. When making requests we want to make sure our map viewer knows where there's data. In order to do this we want to supply the map viewer with the layer's defined areas, in this case the product BBOX (aka ‘extent’). We can get this from the metadata response of the product. Look for the &lt;ows:BoundingBox&gt;&lt;/ows:BoundingBox&gt; element in the response from the catalog.  Another way to find the product extent is to look for the &lt;mc:footprint&gt;&lt;/mc:footprint&gt; element. In the example in the last step, the response xml file looks like this: &lt;mc:footprint&gt;{&quot;type&quot;:&quot;Polygon&quot;,&quot;coordinates&quot;:[[[-180,-90],[-180,90],[180,90],[180,-90],[-180,-90]]]}&lt;/mc:footprint&gt;  Use any tool (CesiumJS, turfJS, etc..) to convert the footprint (GeoJSON) into a bounding box.  For example using CesiumJS and turfJS:  Generate layer footprint import bbox from '@turf/bbox'; import { Rectangle } from 'cesium'; import { LayerRasterRecord } from '../models'; export const generateLayerRectangle = (layer: LayerRasterRecord): Rectangle =&gt; { return Rectangle.fromDegrees(...bbox(layer.footprint)); };   After you’ve got your product bounding box lets move to the next step.  ","version":"Next","tagName":"h2"},{"title":"Get layer URI (Step 3)​","type":1,"pageTitle":"Getting started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/Guides/raster-getting-started#step-3","content":" In the catalog response from the first step, look for the links tags.  warning Each layer has it's own links, so make sure to filter for your wanted layer  Example links for a layer &lt;mc:links scheme=&quot;WMTS&quot; name=&quot;[desired_layer_identifier]&quot; description=&quot;&quot;&gt; '&lt;RASTER-SERVING-SERVICE_URL&gt;/wmts/1.0.0/WMTSCapabilities.xml' &lt;/mc:links&gt; &lt;mc:links scheme=&quot;WMTS_KVP&quot; name=&quot;[desired_layer_identifier]&quot; description=&quot;&quot;&gt; '&lt;RASTER-SERVING-SERVICE_URL&gt;/service?REQUEST=GetCapabilities&amp;SERVICE=WMTS' &lt;/mc:links&gt; &lt;mc:links scheme=&quot;WMTS_BASE&quot; name=&quot;[desired_layer_identifier]&quot; description=&quot;&quot;&gt; '&lt;RASTER-SERVING-SERVICE_URL&gt;/wmts' &lt;/mc:links&gt;   You need to save the [desired_layer_identifier] value for later use.  ","version":"Next","tagName":"h2"},{"title":"Get Layer Capabilities (Step 4)​","type":1,"pageTitle":"Getting started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/Guides/raster-getting-started#step-4","content":" The links we saw in the previous step are to other services associated with the specific layer, we can differentiate between them by their scheme attribute. Now we need to fetch raster's MapServer specified layer metadata by sending a GetCapabilities request. Find the correct GetCapabilities URL by looking for the wanted layer's scheme=&quot;WMTS&quot; attribute in the response of Step 1 and extract the url from it.  Link for WMTS in RESTfull Format &lt;mc:links scheme=&quot;WMTS&quot; name=&quot;[desired_layer_identifier]&quot; description=&quot;&quot;&gt; '&lt;RASTER-SERVING-SERVICE_URL&gt;/wmts/1.0.0/WMTSCapabilities.xml' &lt;/mc:links&gt;   OR you can use wmts KVP capabilities  Link for WMTS in KVP Format &lt;mc:links scheme=&quot;WMTS_KVP&quot; name=&quot;[desired_layer_identifier]&quot; description=&quot;&quot;&gt; '&lt;RASTER-SERVING-SERVICE_URL&gt;/service?REQUEST=GetCapabilities&amp;SERVICE=WMTS' &lt;/mc:links&gt;   Make a GET request to this link. The response contains the details of all available layers in following format:    In the Response, look for layer where &lt;ows:Identifier&gt; is equal to the previously saved [desired_layer_identifier].  You can read more about GetCapabilities OGC format here 🌐  You need to save the style ows:Identifier, Format and TileMatrixSet values in order to consume the layer later on Step 5.  info Alternative to Step 3, you may get the layer consumption url from the &lt;ResourceURL/&gt; element under the &lt;Layer/&gt; element. This gives a WMTS url template.  ","version":"Next","tagName":"h2"},{"title":"Construct Client side layer (Step 5)​","type":1,"pageTitle":"Getting started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/Guides/raster-getting-started#step-5","content":" Now, after you got all the values that you need by querying our catalog and Map Server capabilities, lets actually use it in order to display it in real map viewer / application (clients).  warning Below examples are based on Pseudo code, you will have to adapt it in your own application to make it work.  warning Important: only query parameter token is currently supported  CesiumOpenLayers (v6.x)Leaflet (v1.x) ... ... ... const catalogLayer = new Cesium.WebMapTileServiceImageryProvider({ url : '&lt;LAYER_WMTS_URL&gt;', // from Step_3 or Step_4 /*********************************************************************************/ /******** WHEN AUTH IS REQUIRED ********/ /*********************************************************************************/ // url:new Cesium.Resource({ // url: '&lt;LAYER_WMTS_URL&gt;', // from Step_3 or Step_4 // headers: { 'X-API-KEY': RASTER_TOKEN }, // received RASTER auth token // queryParameters: { 'token': RASTER_TOKEN }, // received RASTER auth token - //}), layer : '[desired_layer_identifier]', // from Step_3 style : '&lt;LAYER_STYLE&gt;', // from Step_4 format : '&lt;LAYER_FORMAT&gt;', // from Step_4 tileMatrixSetID : '&lt;LAYER_TILE_MATRIX_SET_ID&gt;', // from Step_4 /*********************************************************************************/ /******** TILING SCHEME SHOULD BE 2 x 1 ********/ /*********************************************************************************/ tilingScheme: new Cesium.GeographicTilingScheme(), /*********************************************************************************/ /******** EXTENT SHOULD BE AS MUCH AS CLOSE TO LAYER ORIGIN FOOTPRINT ********/ /*********************************************************************************/ rectangle : &lt;LAYER_EXTENT&gt;, // from Step_2 }); map.addLayer(catalogLayer); ... ... ...   Replace all &lt;&gt; place holders with the real values that we got from all previous steps:  url - should be replaced by the URL that you got from Step 3 or Step 4.layer - should be replaced with layer Product ID.style - should be replaced with the value that you got from Step 4.format - should be replaced with the value that you got from Step 4tileMatrixSetID - how can you get it? from Response from Step 4.tilingSchemerectangle - value should be the BBOX (extent that you got from Step 2).Note - extent taken from step 2 - where bbox is calculated.  ","version":"Next","tagName":"h2"},{"title":"Leaflet (1.x)​","type":1,"pageTitle":"Getting started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/Guides/raster-getting-started#leaflet-1x","content":" note For headers api key see the following link: https://github.com/PaulLeCam/react-leaflet/issues/852#issuecomment-1495774676  ","version":"Next","tagName":"h3"},{"title":"Enrich Layer data (Step 6)​","type":1,"pageTitle":"Getting started","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/Guides/raster-getting-started#step-6","content":" In order to present catalog items in your system you can use following fields:  mc:productNamemc:description...rest Raster profile definition ","version":"Next","tagName":"h2"},{"title":"Raster Catalog Profile Information","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/catalog/raster-catalog-profile-v1","content":"Raster Catalog Profile Information typename = mc:MCRasterRecordmain_namespace = http://schema.mapcolonies.com/raster (This site doesn't exist)The Raster sub-system Catalog profile fields with information of each of them: warning New version v2 is coming! The following parameters are depracted an will be removed in v2 PYCSW Queryable/XML Element Name\tType\tDescriptionmc:creationDateUTC\tdate\tThe date (UTC time) when raw product was created supported format: dd/mm/yyyy mc:RMS\tdouble\tTolerance, standard deviation in % PYCSW Queryable/XML Element Name\tType\tDescriptionmc:id\ttext\tUnique internal catalog item id mc:productId\ttext\tUnique external product id mc:productName\ttext\tThe product name mc:productVersion\ttext\tThe product version mc:productType\tenum\tValid Values: OrthophotoBest / Orthophoto / OrthophotoHistory / RasterMapBest / RasterMap / RasterAidBest / RasterAid / RasterVector / RasterVectorBest mc:productSubType\ttext\tProductSubType values mc:links\ttext\tAvailable links for current product CSW Links Structure of links in the format name,description,protocol,url[^„,[^„,]] mc:description\ttext\tThe product description mc:creationDateUTC\tdate Deprecated: will be removed in v2 The date (UTC time) when raw product was created Supported format: dd/mm/yyyy mc:updateDateUTC\tdate\tDate (UTC time) the record got and update in catalog Supported format: dd/mm/yyyy mc:imagingTimeBeginUTC\tdate\tStart imaging date (UTC time) of raw product Supported format: dd/mm/yyyy (not later than &quot;End date&quot;) mc:imagingTimeEndUTC\tdate\tEnd imaging date (UTC time) of raw product Supported format: dd/mm/yyyy (not earlier than &quot;Begin date&quot;) mc:maxResolutionDeg\tdouble\tThe product resolution in degrees Double unsigned valid: 1.67638e-7 to 0.703125 mc:maxResolutionMeter\tdouble\tThe product resolution in meters Double unsigned valid: 0.0185 to 78271.52 mc:minHorizontalAccuracyCE90\tdouble\tEP90 / CE90 Maximum absolute plane accuracy range in meters Float unsigned valid: 0.01 to 4000 (x.xx) mc:sensors\ttext\tList of sensors used as a source for the product Comma separated list mc:footprint\tgeojson\tGeographical delineation of the product / model trace mc:SRS\tint\tReference System ID (EPSG), ex: 4326 / 3857 mc:SRSName\ttext\tName of reference system mc:transparency\ttext\tThe record transparency Valid values: TRANSPARENT / OPAQUE mc:region\ttext\tSector / countries Comma separated list mc:classification\tnumber\tProduct classification / confidentiality Classification values (3-6) mc:producerName\ttext\tManufacturer / organization that produced / supplied the product mc:RMS\tdouble Deprecated: will be removed in v2 Tolerance, standard deviation in % mc:scale\tinteger\tValid values: 0 to 100000000 mc:productBBox\ttext\tThe bounding box of the product minX,minY,maxX,maxY mc:ingestionDate\tdate\tDate (UTC time) when product data was updated or added to catalog mc:type\tenum\tType of the catalog Valid values: RECORD_RASTER / RECORD_3D / RECORD_DEM Default: RECORD_RASTER mc:insertDate\tdate\tThe date (UTC time) when item was added to catalog mc:mimeType\tenum\tType of record format Valid values: 'image/png' and 'image/jpeg' mc:keywords\ttext\tList of key words relevant for product ows:BoundingBox\tBBOX\tTwo points that represent the record extent for example:&lt;ows:BoundingBox crs=&quot;urn:x-ogc:def:crs:EPSG:6.11:4326&quot; dimensions=&quot;2&quot;&gt;&lt;ows:LowerCorner&gt;31.9042863434239 34.8076891807199&lt;/ows:LowerCorner&gt;&lt;ows:UpperCorner&gt;31.9118071956932 34.816135996859&lt;/ows:UpperCorner&gt;&lt;/ows:BoundingBox&gt;","keywords":"","version":"Next"},{"title":"Raster Catalog Profile Information - v2","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/catalog/raster-catalog-profile-v2","content":"","keywords":"","version":"Next"},{"title":"Coming new parameters for v2​","type":1,"pageTitle":"Raster Catalog Profile Information - v2","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/catalog/raster-catalog-profile-v2#coming-new-parameters-for-v2","content":" PYCSW Queryable/XML Element Name\tType\tDescriptionmc:maxHorizontalAccuracyCE90\tdouble\tEP90 / CE90 Maximum absolute plane accuracy range in meters float unsigned valid: 0.01 to 4000 mc:minResolutionMeter\tdouble\tThe min resolution of the “resolution part” product (max) resolution in meters double unsigned valid: 0.0185 to 78271.52 mc:minResolutionDeg\tdouble\tThe min resolution of the “resolution part” product (max) resolution in degrees double unsigned valid: 1.67638e-7 to 0.703125 mc:links Will include a new link for 'polygon parts' WFS capabilities  New WFS service that will include details about the parts that assembles the raster record ","version":"Next","tagName":"h2"},{"title":"Catalog Service 🗃️","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/catalog/raster-catalog-service","content":"Catalog Service 🗃️ Catalog Service for the Web (CSW) is a standard for exposing a catalog of geospatial records in XML on the Internet (over HTTP). The catalog is made up of records that describe geospatial data, geospatial services (e.g. WMTS), and related resources. warning Authentication must be integrated in order to communicate with map And catalog services. See the principles here Request\tHTTP method binding(s)GetCapabilities\tGET (KVP) / POST (XML) / SOAP DescribeRecord\tGET (KVP) / POST (XML) / SOAP GetRecords\tGET (KVP) / POST (XML) / SOAP GetRecordById\tGET (KVP) / POST (XML) / SOAP GetRepositoryItem\tGET (KVP) GetDomain\tGET (KVP) / POST (XML) / SOAP","keywords":"","version":"Next"},{"title":"Layer Parts Attributes Information","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts-profile-v1","content":"Layer Parts Attributes Information Polygon Part Queryable Attribute Name\tType\tDescriptionid\tUUID\tInternal unique identifier catalogId\tUUID\tMapcolonies raster catalog identifier for the layer productId\ttext\tMapcolonies raster layer identifier productType\ttext\tMapcolonies raster layer type footprint\tGeoJson (geometry (Polygon,4326))\tThe feature's footprint sourceId\ttext\tExternal Id of the part sourceName\ttext\tExternal Name of the part productVersion\ttext\tMapcolonies raster layer version ingestionDateUTC\tdate\tThe time the part was ingested imagingTimeBeginUTC\tdate\tStart imaging date (UTC time) of part imagingTimeEndUTC\tdate\tEnd imaging date (UTC time) of part resolutionDegree\tnumber\tPart resolution degree (1.67638e-7 to 0.703125) resolutionMeter\tnumber\tPart resolution meter (1.67638e-7 to 0.703125) sourceResolutionMeter\tnumber\tPart source resolution meter (0.0185 to 78273) horizontalAccuracyCE90\tnumber\tPart horizontal accuracy (0.01 to 4000) sensors\ttext (comma delimited)\tThe sensors used to create the part countries\ttext (comma delimited)\tAll of the countries that the part has data in cities\ttext (comma delimited)\tAll of the cities that the part has data in description\ttext\tPart description","keywords":"","version":"Next"},{"title":"Map Service 🗺️","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/map-service","content":"","keywords":"","version":"Next"},{"title":"GetCapabilities​","type":1,"pageTitle":"Map Service 🗺️","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/map-service#getcapabilities","content":" A WMTS server responding to a GetCapabilities request returns metadata about the service, including supported operations and parameters, and a list of the available layers.  An example of a GetCapabilities request is:  GET request https://ows.terrestris.de/osm/service? REQUEST=GetCapabilities&amp; SERVICE=WMTS   ","version":"Next","tagName":"h2"},{"title":"WMTS layer consumption example​","type":1,"pageTitle":"Map Service 🗺️","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/map-service#wmts-layer-consumption-example","content":" &lt;MAP_SERVER-RASTER_URL&gt;/wmts/{Layer}/{TileMatrixSet}/{TileMatrix}/{TileCol}/{TileRow}.png  {Layer} - the name of the layer (ex. Ortho_25cm)  {TileMatrixSet} - define the grid name of the layer,  tip How to get Grid name? Grid name (TileMatrixSet) can be reached by GetCapabilities response Raster - Get Started / Step 4  See &lt;TileMatrixSetLink&gt; element for supported Grid names.  {TileMatrix} - define the zoom level (Z)  {TileCol} - define the column (X)  {TileRow} - define the row (Y)  Final request example:&lt;MAP_SERVER-RASTER_URL&gt;/wmts/bluemarble-1.0-OrthophotoHistory/newGrids/2/0/2.pngWill bring a requested tile image  danger Do not change the /{TileMatrixSet}/{TileMatrix}/{TileCol}/{TileRow}.png with custom values while consuming in applications - see examples below.  ","version":"Next","tagName":"h3"},{"title":"GetTile​","type":1,"pageTitle":"Map Service 🗺️","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/map-service#gettile","content":" In response to a GetTile KVP request, or under a resource-oriented style, a Tile resource that complies with the requested parameters would be returned. A correctly formulated request will bring a tile requested image.  GET request http://cite.deegree.org/deegree-webservices-3.4-RC3/services/wmts100? service=WMTS&amp; request=GetTile&amp; version=1.0.0&amp; Layer=cite&amp; Style=default&amp; Format=image/png&amp; TileMatrixSet=InspireCrs84Quad&amp; TileMatrix=17&amp; TileRow=4&amp; TileCol=4  ","version":"Next","tagName":"h2"},{"title":"Feedback Api 💌","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/feedback","content":"","keywords":"","version":"Next"},{"title":"Example​","type":1,"pageTitle":"Feedback Api 💌","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/feedback#example","content":" Geocoding's Query Search Request curl --location '&lt;geocoding_url&gt;/search/location/query?query=school' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;'   Response 👇 Response headers​ &quot;x-request-id&quot;: &quot;4ac9cb81-8d6c-425d-b808-0c868bbaa97c&quot; Response payload​ { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.1.0&quot;, &quot;query&quot;: { &quot;query&quot;: &quot;school&quot;, &quot;disable_fuzziness&quot;: false, &quot;limit&quot;: 5 }, &quot;response&quot;: { &quot;results_count&quot;: 2, &quot;max_score&quot;: 1.2880917, &quot;match_latency_ms&quot;: 7, &quot;name&quot;: &quot;&quot;, &quot;place_types&quot;: [ &quot;education&quot; ], &quot;sub_place_types&quot;: [ &quot;school&quot; ], &quot;hierarchies&quot;: [] } }, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ [ -118.30812263653988, 33.71684417247593 ], [ -118.30861990876181, 33.71674433152869 ], [ -118.30879709771484, 33.71635922964194 ], [ -118.30619642115158, 33.71550819588987 ], [ -118.30586490633668, 33.715921827872904 ], [ -118.30587062210924, 33.716183318328746 ], [ -118.30812263653988, 33.71684417247593 ] ] ], &quot;type&quot;: &quot;Polygon&quot; }, &quot;properties&quot;: { &quot;score&quot;: 1.2880917, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;osm_schools&quot;, &quot;source&quot;: &quot;OSM&quot;, &quot;source_id&quot;: [ &quot;1a5b981b-bb0e-44dd-b9e2-424b92f2de49&quot; ] } ], &quot;names&quot;: { &quot;en&quot;: [ &quot;White Point Elementary School&quot; ], &quot;fr&quot;: [ &quot;Escuela Primaria White Point&quot; ], &quot;default&quot;: [ &quot;White Point Elementary School&quot; ], &quot;display&quot;: &quot;White Point Elementary School&quot; }, &quot;placetype&quot;: &quot;education&quot;, &quot;sub_placetype&quot;: &quot;school&quot;, &quot;regions&quot;: [ { &quot;region&quot;: &quot;USA&quot;, &quot;sub_region_names&quot;: [ &quot;Los Angeles&quot; ] } ] } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ [ 2.346441270696971, 48.88088750665477 ], [ 2.3462780852304945, 48.88018258877358 ], [ 2.347503576087604, 48.87999951892243 ], [ 2.347737155284733, 48.88070864783427 ], [ 2.346441270696971, 48.88088750665477 ] ] ], &quot;type&quot;: &quot;Polygon&quot; }, &quot;properties&quot;: { &quot;score&quot;: 1.2880917, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;osm_schools&quot;, &quot;source&quot;: &quot;OSM&quot;, &quot;source_id&quot;: [ &quot;dc02a3f9-156a-4f61-85bd-fd040cd322a3&quot; ] } ], &quot;names&quot;: { &quot;en&quot;: [ &quot;Wi School Paris 9&quot; ], &quot;fr&quot;: [ &quot;Ecole Wi Paris 9&quot; ], &quot;default&quot;: [ &quot;Wi School Paris 9&quot; ], &quot;display&quot;: &quot;Wi School Paris 9&quot; }, &quot;placetype&quot;: &quot;education&quot;, &quot;sub_placetype&quot;: &quot;school&quot;, &quot;regions&quot;: [ { &quot;region&quot;: &quot;FRANCE&quot;, &quot;sub_region_names&quot;: [ &quot;Paris&quot; ] } ] } } ] }   Notice this response listed 2 features. When sending the response to the feedback API, you need to provide two parameters: 📍 request_id - from the headdback Aer 'x-request-id'. 📍 chosen_result_id - the ID of the user's selected result (corresponding index of the result). 📍 user_id - the ID of the end user.   Lets think of the current response as the actual response in this case: 📍 If the user chose &quot;White Point Elementary School&quot;, the chosen_result_id would be 0. 📍 If the user chose &quot;Wi School Paris 9&quot;, the chosen_result_id would be 1.   Then our request to the feedback API would look like this:   Geocoding's Feedback Api Request curl --location --request POST '&lt;feedback_api_url&gt;/feedback' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'Content-Type: application/json' \\ --data-raw '{ &quot;request_id&quot;: &quot;4ac9cb81-8d6c-425d-b808-0c868bbaa97c&quot;, &quot;chosen_result_id&quot;: 1, &quot;user_id&quot;: &quot;avi@mapcolonies.net&quot; }'   And we will receive (in case request_id and chosen_result_id actually exist):   Response 👇 204  ","version":"Next","tagName":"h2"},{"title":"Export Service 📦","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/raster-export","content":"","keywords":"","version":"Next"},{"title":"Purpose​","type":1,"pageTitle":"Export Service 📦","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/raster-export#purpose","content":" The export service is responsible for packaging mapping data that can be downloaded by clients or transferred to other systems. Export can be requested for various mapping products within a specific region. The export module exposes an API and Web-based tool.  ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Export Service 📦","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/raster-export#usage","content":" You can create export tasks via the Export-Management service API.  warning Authentication must be integrated in order to communicate with export service. See the principles here  The API currently consists of two method:  POST /export-tasks - Create a new export task. If the requested task params were previously created, they are returned in the response, otherwise they will be returned via the provided webhook.GET /export-tasks/{id} - Gets an existing export task data.  ","version":"Next","tagName":"h2"},{"title":"Files structure​","type":1,"pageTitle":"Export Service 📦","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/raster-export#files-structure","content":" Under &quot;artifacts&quot; section in the response you will find the following artifacts  GPKG​  SQLite DB file that contains all the necessary tiles for more details view:  http://www.geopackage.org/spec/https://www.sqlite.org/index.html  Our specification consists of the following:  Terms &amp; AbbreviationsTiling scheme (World CRS84 TileMatrixSet)file extension: &quot;.gpkg&quot;  Metadata​  JSON file that contains the record metadata such as footprint and resolution  file extension: &quot;.JSON&quot;provided fields follow the profile convention here  ","version":"Next","tagName":"h2"},{"title":"Important Notes​","type":1,"pageTitle":"Export Service 📦","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/raster-export#important-notes","content":" The data is returned via callback request or on /export-tasks request response (structure in appendix 1)  ","version":"Next","tagName":"h3"},{"title":"Appendix​","type":1,"pageTitle":"Export Service 📦","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/raster-export#appendix","content":" Callback request structure (export-tasks)Callback Request Example (export-tasks)/export-tasks response for In-Progress ExportResponse for cached export task catalogRecordID: uuid - Raster Catalog Record DB ID - from orginal requestdomain: string - the export domain (&quot;RASTER&quot; / &quot;DEM&quot; / &quot;3D&quot;, etc.)roi: FeatureCollection - requested region of intrestartifactCRS: artifact crs (for Example: &quot;4326&quot;)description: string - the description that was sent to the create methodkeywords: Object - task metadata in key-value pairparameters: Object - task parameters in key-value pairwebhook: Object - events registered to, and to what url to call when event executedid: number - unique identifier for export requestestimatedSize: number - estimated size of the artifacts in bytesestimatedTime: number - estimated time to finish the export taskstatus: Enum - IN_PROGRESS | COMPLETED | ABORTED | PAUSED | FAILED | PENDING | EXPIRED | ARCHIVEDerrorReason: string - if export task was unsuccessful this field will describe the errorprogress: number - minimum: 0, maximum: 100artifacts: Object - Object that describes the task products and how to access themcreatedAt: string($date) - creation task time - UTC formatexpiredAt: string($date) - describes when the task will be expired at - UTC formatfinishedAt: string($date) - describes when the task reached an end state - UTC format ","version":"Next","tagName":"h3"},{"title":"Nominatim 🌍","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/nominatim_service","content":"","keywords":"","version":"Next"},{"title":"How to use​","type":1,"pageTitle":"Nominatim 🌍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/nominatim_service#how-to-use","content":" Nominatim indexes named (or numbered) features within the OpenStreetMap (OSM) dataset and a subset of other unnamed features (pubs, hotels, churches, etc).  Its API has the following endpoints for querying the data:  /search - search OSM objects by name or type/reverse - search OSM object by their location/lookup - look up address details for OSM objects by their ID  ","version":"Next","tagName":"h2"},{"title":"Nominatim UI​","type":1,"pageTitle":"Nominatim 🌍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/nominatim_service#nominatim-ui","content":" Nominatim is a search API, it does not provide a website interface on its own. nominatim-ui offers a small website for trying Nominatim and inspecting the database content.  ","version":"Next","tagName":"h2"},{"title":"I'm getting bad results​","type":1,"pageTitle":"Nominatim 🌍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/nominatim_service#im-getting-bad-results","content":" Please check the FAQ page and check if there is a solution to your problem there. If the problem persists don't hesitate to contact us.  ","version":"Next","tagName":"h2"},{"title":"\"I can't find my home address, do something about it 😡\"​","type":1,"pageTitle":"Nominatim 🌍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/nominatim_service#i-cant-find-my-home-address-do-something-about-it-","content":" First, we are sorry, but its not our fault 🤷  We import the data as is from the internet, without any change or modification to maintain authenticity. Because OpenStreetMap is free and Open Source, you can go on their website at openstreetmap.org, and make the changes yourself. Be sure to read the guidelines before making any change to avoid it being removed.   Copyright © https://nominatim.org/ ","version":"Next","tagName":"h2"},{"title":"Replication Service 📦","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/replication/info","content":"","keywords":"","version":"Next"},{"title":"Purpose​","type":1,"pageTitle":"Replication Service 📦","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/replication/info#purpose","content":" The server lets users to replicate vector data of MapColonies via a REST API, it allows both getting a single vector layer snapshot and keep track of changes in MapColonies vector DB for each layer.  ","version":"Next","tagName":"h2"},{"title":"Terminology​","type":1,"pageTitle":"Replication Service 📦","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/replication/info#terminology","content":" There are two types of replicas:  Snapshot - A complete layer (e.g buildings, roads, sites) snapshot.Delta - A time-related replica that describes what has changed in a single layer from time T1 to T2.  ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Replication Service 📦","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/replication/info#usage","content":" You can query for replicas via the replication service API.  warning You will need an API token as part of the service authentication   The API in general is split to two parts:  Metadata - you can query the service what layers are available for replication.replicas - you can query what replicas are available to download.  ","version":"Next","tagName":"h2"},{"title":"Files structure​","type":1,"pageTitle":"Replication Service 📦","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/replication/info#files-structure","content":" Snapshot​  When receiving a response from the replication service API for snapshot, The response will contain an array of files to download.  Each downloaded file is a zip.  Each zip will contain one or more GeoJSON files.  Each GeoJSON file is a FeatureCollection  File hierarchy for snapshot  snapshot.zip/ ├─ uuid1.geojson ├─ uuid2.geojson ├─ uuid3.geojson   Delta​  When receiving a response from the replication service API for delta, The response will contain an array of files to download.  Each downloaded file is a zip. Each zip will contain: zero or more GeoJSON files. Each GeoJSON file is a FeatureCollection zero or more deleted_uuid.json files.  ","version":"Next","tagName":"h2"},{"title":"File hierarchy for delta​","type":1,"pageTitle":"Replication Service 📦","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/replication/info#file-hierarchy-for-delta","content":" delta.zip/ ├─ uuid1.geojson ├─ uuid2.geojson ├─ uuid3.geojson ├─ deleted_uuid1.json ├─ deleted_uuid2.json ├─ deleted_uuid3.json   ","version":"Next","tagName":"h3"},{"title":"Delta GeoJSON file​","type":1,"pageTitle":"Replication Service 📦","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/replication/info#delta-geojson-file","content":" The GeoJSON file is following the official specification of GeoJSON (RFC-7946).  Each feature in the feature collection will have a &quot;diff&quot; key, the &quot;diff&quot; key purpose is to present the changes of the feature from its previous version.  The structure (JSON schema) of the &quot;diff&quot; key is as follows:  JSON Schema of Response { &quot;definitions&quot;: { &quot;diff&quot;: { &quot;type&quot;: &quot;object&quot;, &quot;additionalProperties&quot;: false, &quot;properties&quot;: { &quot;isGeometryChanged&quot;: { &quot;type&quot;: &quot;boolean&quot; }, &quot;changedTags&quot;: { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;string&quot; } } }, &quot;required&quot;: [ &quot;changedTags&quot;, &quot;isGeometryChanged&quot; ] } } }   If no deleted_uuid.json files are present -&gt; no features were deleted.  if no uuid.geojson files are present -&gt; no changes occurred.  ","version":"Next","tagName":"h3"},{"title":"Delta deleted_uuid.json files​","type":1,"pageTitle":"Replication Service 📦","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/replication/info#delta-deleted_uuidjson-files","content":" Each file is a valid JSON object.  deleted_uuid.json files are indicating what features have been deleted from the layer.  The structure(JSON Schema) of the deleted_uuid.json files is:  { &quot;type&quot;: &quot;array&quot;, &quot;items&quot;: { &quot;type&quot;: &quot;string&quot; } }   Each string is the unique identifier of the deleted feature.  Example of deleted_uuid.json:  [&quot;{6b973f22-46d9-4540-908f-fe5395ac0ca5}&quot;, &quot;{0e4bcbb5-aa99-4bf6-a818-fc9df28666aa}&quot;, &quot;{5652897d-e661-4e14-83fc-969bab027bb2}&quot;]   ","version":"Next","tagName":"h3"},{"title":"Important Notes​","type":1,"pageTitle":"Replication Service 📦","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/replication/info#important-notes","content":" The data is in WGS84 (following the GeoJSON spec).We aim that zip would not exceed a 500MB size threshold. ","version":"Next","tagName":"h3"},{"title":"Valhalla 🧭","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/valhalla","content":"","keywords":"","version":"Next"},{"title":"Features​","type":1,"pageTitle":"Valhalla 🧭","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/valhalla#features","content":" Flexible routing methods with dynamic costing - allowing multiple route types with the same data.Expanded guidance / route narrative information providing clear and concise instructions along the route as well as output tailored for navigation along the route.Tiled routing data structure allowing use within small memory profiles including mobile devices.Includes software to import and create routing tiles from OpenStreetMap pbf data: from small extracts to worldwide coverage.Includes turn restrictions, highway exit information, administrative information, and timezones.  ","version":"Next","tagName":"h2"},{"title":"How to use​","type":1,"pageTitle":"Valhalla 🧭","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/valhalla#how-to-use","content":" Valhalla API has the following endpoints for querying the data:  route - the service guides you between points by car, bike, foot, and multimodal combinations involving walking and riding public transit.optimized-route - computes the times and distances between many origins and destinations and provides you with an optimized path between the locations.matrix - if you want only a table of the times and distances, start with the matrix service.isochrone - get a computation of areas that are reachable within specified time periods from a location or set of locations.expansion - return a geojson representation of a graph traversal at a given location.locate - get detailed metadata about the nodes and edges in the graph.  📝 Note:Valhalla is an open-source toolkit for multimodal transportation, powered by open data. The APIs use the standard REST model of interaction with JSON serving as both the request and response formats. Please refer to a specific service's API documentation to learn about the various request/response properties. In addition to JSON request/response formats Valhalla also supports protocol buffers as request/response format.   Copyright © https://valhalla.github.io/valhalla/ ","version":"Next","tagName":"h2"},{"title":"Vector","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/vector-overview","content":"","keywords":"","version":"Next"},{"title":"Vector Overview​","type":1,"pageTitle":"Vector","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/vector-overview#vector-overview","content":" Vector data structures represent specific features on the Earth’s surface, and assign attributes to those features. Vectors are composed of discrete geometric locations (x, y values) known as vertices that define the shape of the spatial object. The organization of the vertices determines the type of vector that we are working with: point, line or polygon.    ","version":"Next","tagName":"h2"},{"title":"Types of vector objects​","type":1,"pageTitle":"Vector","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/vector-overview#types-of-vector-objects","content":" ","version":"Next","tagName":"h3"},{"title":"Points​","type":1,"pageTitle":"Vector","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/vector-overview#points","content":" Each point is defined by a single x, y coordinate. There can be many points in a vector point file. Examples of point data include: sampling locations, the location of individual trees, or the location of survey plots.  ","version":"Next","tagName":"h3"},{"title":"Lines​","type":1,"pageTitle":"Vector","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/vector-overview#lines","content":" Lines are composed of many (at least 2) points that are connected. For instance, a road or a stream may be represented by a line. This line is composed of a series of segments, each “bend” in the road or stream represents a vertex that has defined (x, y) location.  ","version":"Next","tagName":"h3"},{"title":"Polygons​","type":1,"pageTitle":"Vector","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/vector-overview#polygons","content":" A polygon consists of 3 or more vertices that are connected and closed. The outlines of survey plot boundaries, lakes, oceans, and states or countries are often represented by polygons.  ","version":"Next","tagName":"h3"},{"title":"Pros and Cons​","type":1,"pageTitle":"Vector","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/vector-overview#pros-and-cons","content":" Vector data has some important advantages:  The geometry itself contains information about what the dataset creator thought was important The geometry structures hold information in themselves - why choose point over polygon, for instance? Each geometry feature can carry multiple attributes instead of just one, e.g. a database of cities can have attributes for name, country, population, etc Data storage can be very efficient compared to rasters The downsides of vector data include:  potential loss of detail compared to raster potential bias in datasets - what didn’t get recorded? Calculations involving multiple vector layers need to do math on the geometry as well as the attributes, so can be slow compared to raster math. Vector datasets are in use in many industries besides geospatial fields. For instance, computer graphics are largely vector-based, although the data structures in use tend to join points using arcs and complex curves rather than straight lines. Computer-aided design (CAD) is also vector- based. The difference is that geospatial datasets are accompanied by information tying their features to real-world locations. ","version":"Next","tagName":"h3"},{"title":"Available catalogs","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-csw/csw-available-catalogs","content":"Available catalogs Raster3DDEM","keywords":"","version":"Next"},{"title":"CSW - Catalog Service for the Web","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-csw/ogc-csw","content":"CSW - Catalog Service for the Web Overview - source The CSW service exposes the metadata records in XML format using the OGC CSW protocol 🌐 CSW Registry Service (Offline) 📚 Standard protocol supported Operations 🌐 Examples MapColonies operations: Request\tOptionality\tSupported\tHTTP method binding(s)Harvest\toptional\tno\tGET (KVP) / POST (XML) / SOAP UnHarvest\toptional\tno GetCapabilities\tmandatory\tyes\tGET (KVP) / POST (XML) / SOAP DescribeRecord\tmandatory\tyes\tGET (KVP) / POST (XML) / SOAP GetRecords\tmandatory\tyes\tGET (KVP) / POST (XML) / SOAP GetRecordById\tmandatory\tyes\tGET (KVP) / POST (XML) / SOAP GetRepositoryItem\tmandatory\tyes\tGET (KVP) GetDomain\tmandatory\tyes\tGET (KVP) / POST (XML) / SOAP Transaction\tmandatory\tyes\tPOST (XML) / SOAP","keywords":"","version":"Next"},{"title":"Query Service 🔎","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/query","content":"","keywords":"","version":"Next"},{"title":"Example​","type":1,"pageTitle":"Query Service 🔎","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/query#example","content":" WFS protocol partitions the queryable features into different feature types, each feature type consists of a schema describing the feature. the feature type is queryable by its schema, each feature type has a default coordinate reference system and the bounding box which containis all features of this type, those are also possible parameters for querying.  Let's see an example using all three operations with different filters, the following chart describes our work flow    tip to get an auth token see this   To list all the available feature types use the GetCapabilities operation and look for the FeatureTypeList section.  Response Response &lt;FeatureTypeList&gt; &lt;FeatureType xmlns:vector=&quot;vector&quot;&gt; &lt;Name&gt;vector:buildings&lt;/Name&gt; &lt;Title&gt;buildings&lt;/Title&gt; &lt;Abstract/&gt; &lt;ows:Keywords&gt; &lt;ows:Keyword&gt;features&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;buildings&lt;/ows:Keyword&gt; &lt;/ows:Keywords&gt; &lt;DefaultCRS&gt;urn:ogc:def:crs:EPSG::4326&lt;/DefaultCRS&gt; &lt;ows:WGS84BoundingBox&gt; &lt;ows:LowerCorner&gt;34.21269226074219 29.4852237701416&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;35.87874221801758 33.35012435913086&lt;/ows:UpperCorner&gt; &lt;/ows:WGS84BoundingBox&gt; &lt;/FeatureType&gt; ... &lt;FeatureTypeList&gt;   We got a FeatureTypeList consisting of the different FeatureTypes under the WFS service. one of them is the vector:buildings FeatureType where vector is the namespace and the buildings is the unique FeatureType name under the vector namespace. it is possible to query the FeatureType by its full name vector:buildings or short unique name buildings. The default coordinate reference system and the containing features bounding box are also presented.  If you would like to view the schema of the buildings FeatureType, we could invoke the DescribeFeatureType request with typeName of buildings  For convenience we'll add outputFormat parameter as application/json to each of our requests for a json formatted response  &lt;VECTOR_QUERY_SERVICE_URL&gt;/wfs? service=wfs&amp; version={WFS_SERVICE_VERSION}&amp; request=DescribeFeatureType&amp; typeName=buildings&amp; outputFormat=application/json   Response Response in JSON { &quot;elementFormDefault&quot;: &quot;qualified&quot;, &quot;targetNamespace&quot;: &quot;vector&quot;, &quot;targetPrefix&quot;: &quot;vector&quot;, &quot;featureTypes&quot;: [ { &quot;typeName&quot;: &quot;buildings&quot;, &quot;properties&quot;: [ { &quot;name&quot;: &quot;osm_id&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 1, &quot;nillable&quot;: false, &quot;type&quot;: &quot;xsd:int&quot;, &quot;localType&quot;: &quot;int&quot; }, { &quot;name&quot;: &quot;id&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 1, &quot;nillable&quot;: false, &quot;type&quot;: &quot;xsd:int&quot;, &quot;localType&quot;: &quot;int&quot; }, { &quot;name&quot;: &quot;geom&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;gml:Polygon&quot;, &quot;localType&quot;: &quot;Polygon&quot; }, { &quot;name&quot;: &quot;relative_feature_height&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:number&quot;, &quot;localType&quot;: &quot;number&quot; }, { &quot;name&quot;: &quot;all_entity_names&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:string&quot;, &quot;localType&quot;: &quot;string&quot; }, { &quot;name&quot;: &quot;building_type&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:string&quot;, &quot;localType&quot;: &quot;string&quot; }, { &quot;name&quot;: &quot;entity&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:string&quot;, &quot;localType&quot;: &quot;string&quot; }, { &quot;name&quot;: &quot;sensitivity&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:string&quot;, &quot;localType&quot;: &quot;string&quot; }, { &quot;name&quot;: &quot;entity_id&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:string&quot;, &quot;localType&quot;: &quot;string&quot; }, { &quot;name&quot;: &quot;is_sensitive&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:boolean&quot;, &quot;localType&quot;: &quot;boolean&quot; }, { &quot;name&quot;: &quot;date&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:date-time&quot;, &quot;localType&quot;: &quot;date-time&quot; } ] } ] }   The response is the XSD (in xml response) describing the buildings FeatureType.  This is a description of a building feature, it contains these properties, each property has its own type, nillable flag value and min\\max occurs - these describing the requireness of the property and possible repeatness.  Now that we hold the structure of the buildings FeatureType we're able to query building features by a set of parameters using the GetFeature operation, let's see some examples:  let's retrieve a specific building by its featureId, featureId is unique thus the response will be at most of one single existing building feature. the buildings FeatureType FeatureId is the entityId property, notice that this property is non nillable and has a minOccurs of 1.  due to enitityId containing ' and ' at the beginning and the end of the string we need to encode those to '%7B' and '%7D' respectively  &lt;VECTOR_QUERY_SERVICE_URL&gt;/wfs? service=wfs&amp; version={WFS_SERVICE_VERSION}&amp; request=GetFeature&amp; typeNames=buildings&amp; featureId={entityId}&amp; outputFormat=application/json   Response Response in GeoJSON { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;buildings.{aafe0435-426a-4a4a-926e-f799be96cace}&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 34.9127511, 29.4993255 ], [ 34.9127592, 29.4992901 ], [ 34.9128039, 29.4992777 ], [ 34.9128446, 29.4993051 ], [ 34.9128273, 29.4993493 ], [ 34.9127785, 29.4993538 ], [ 34.9127511, 29.4993255 ] ] ] }, &quot;geometry_name&quot;: &quot;geom&quot;, &quot;properties&quot;: { &quot;osm_id&quot;: 807070935, &quot;id&quot;: 1, &quot;relative_feature_height&quot;: null, &quot;all_entity_names&quot;: null, &quot;building_type&quot;: &quot;yes&quot;, &quot;entity&quot;: null, &quot;sensitivity&quot;: &quot;רגיש&quot;, &quot;entity_id&quot;: &quot;{aafe0435-426a-4a4a-926e-f799be96cace}&quot;, &quot;is_sensitive&quot;: true, &quot;date&quot;: &quot;2022-07-26T11:16:02Z&quot; }, &quot;bbox&quot;: [ 34.9127511, 29.4992777, 34.9128446, 29.4993538 ] } ], &quot;totalFeatures&quot;: 1, &quot;numberMatched&quot;: 1, &quot;numberReturned&quot;: 1, &quot;timeStamp&quot;: &quot;2022-07-27T07:44:58.341Z&quot;, &quot;crs&quot;: { &quot;type&quot;: &quot;name&quot;, &quot;properties&quot;: { &quot;name&quot;: &quot;urn:ogc:def:crs:EPSG::4326&quot; } }, &quot;bbox&quot;: [ 34.9127511, 29.4992777, 34.9128446, 29.4993538 ] }   Other than the feature itself we also retrieve additional metadata such as the containing bounding box of each feature and the whole response, total number of features of the selected FeatureType, number matched the given parameters criteria and number returned by the invoked request.  To get at most the top 3 building features sorted by some property such as relative_feature_height we can invoke the following request, the default sort is in ascending order, to specify order append +A or +D to the sortBy parameter  &lt;VECTOR_QUERY_SERVICE_URL&gt;/wfs? service=wfs&amp; version={WFS_SERVICE_VERSION}&amp; request=GetFeature&amp; typeNames=buildings&amp; count=2&amp; sortBy=relative_feature_height+D&amp; outputFormat=application/json   Response { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;buildings.{ff4ba732-247c-45c5-b5fe-4a957118c950}&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 34.9110353, 29.4985325 ], [ 34.9110624, 29.4984171 ], [ 34.9111355, 29.4985567 ], [ 34.9110353, 29.4985325 ] ] ] }, &quot;geometry_name&quot;: &quot;geom&quot;, &quot;properties&quot;: { &quot;osm_id&quot;: 115082118, &quot;id&quot;: 2, &quot;relative_feature_height&quot;: 20.1, &quot;all_entity_names&quot;: null, &quot;building_type&quot;: &quot;yes&quot;, &quot;entity&quot;: null, &quot;sensitivity&quot;: &quot;רגיש&quot;, &quot;entity_id&quot;: &quot;{ff4ba732-247c-45c5-b5fe-4a957118c950}&quot;, &quot;is_sensitive&quot;: true, &quot;date&quot;: &quot;2022-07-26T11:14:18Z&quot; }, &quot;bbox&quot;: [ 34.9110353, 29.4984171, 34.9112991, 29.4985942 ] }, { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;buildings.{aafe0435-426a-4a4a-926e-f799be96cace}&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 34.9127511, 29.4993255 ], [ 34.9127592, 29.4992901 ], [ 34.9127785, 29.4993538 ], [ 34.9127511, 29.4993255 ] ] ] }, &quot;geometry_name&quot;: &quot;geom&quot;, &quot;properties&quot;: { &quot;osm_id&quot;: 807070935, &quot;id&quot;: 1, &quot;relative_feature_height&quot;: 3, &quot;all_entity_names&quot;: null, &quot;building_type&quot;: &quot;yes&quot;, &quot;entity&quot;: null, &quot;sensitivity&quot;: &quot;רגיש&quot;, &quot;entity_id&quot;: &quot;{aafe0435-426a-4a4a-926e-f799be96cace}&quot;, &quot;is_sensitive&quot;: true, &quot;date&quot;: &quot;2022-07-26T11:16:02Z&quot; }, &quot;bbox&quot;: [ 34.9127511, 29.4992777, 34.9128446, 29.4993538 ] } ], &quot;totalFeatures&quot;: 773014, &quot;numberMatched&quot;: 773014, &quot;numberReturned&quot;: 2, &quot;timeStamp&quot;: &quot;2022-07-27T07:58:17.787Z&quot;, &quot;crs&quot;: { &quot;type&quot;: &quot;name&quot;, &quot;properties&quot;: { &quot;name&quot;: &quot;urn:ogc:def:crs:EPSG::4326&quot; } }, &quot;bbox&quot;: [ 34.9110353, 29.4984171, 34.9128446, 29.4993538 ] }   The following GET request will look for all the building features contained or partially contained by the specified bounding box in the specified coordinate reference system (EPSG:4326) the coordinate system is optional part of the bbox parameter, if not specified the default CRS value of the FeatureType will be used (described in the GetCapabilities operation) The retrieved features will be encoded in the specified srsName coordinate system, in our case also EPSG:4326.  For simplicity we'll limit the result to only 2 features with the count parameter:  &lt;VECTOR_QUERY_SERVICE_URL&gt;/wfs? service=wfs&amp; version={WFS_SERVICE_VERSION}&amp; request=GetFeature&amp; typeNames=buildings&amp; bbox=31.995,34.718,32.046,34.787,urn:ogc:def:crs:EPSG::4326&amp; srsName=urn:ogc:def:crs:EPSG::4326&amp; count=2&amp; outputFormat=application/json   Response { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;buildings.{798ed395-8e62-480f-b4fe-dbf7026633f8}&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 34.7735756, 31.9986023 ], [ 34.7737984, 31.9983632 ], [ 34.7740616, 31.9985396 ], [ 34.7738387, 31.9987787 ], [ 34.7735756, 31.9986023 ] ] ] }, &quot;geometry_name&quot;: &quot;geom&quot;, &quot;properties&quot;: { &quot;osm_id&quot;: 331438436, &quot;id&quot;: 98591, &quot;relative_feature_height&quot;: 11, &quot;all_entity_names&quot;: null, &quot;building_type&quot;: &quot;yes&quot;, &quot;entity&quot;: null, &quot;sensitivity&quot;: &quot;רגיש&quot;, &quot;entity_id&quot;: &quot;{798ed395-8e62-480f-b4fe-dbf7026633f8}&quot;, &quot;is_sensitive&quot;: true, &quot;date&quot;: &quot;2022-07-26T11:14:26Z&quot; }, &quot;bbox&quot;: [ 34.7735756, 31.9983632, 34.7740616, 31.9987787 ] }, { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;buildings.{3e0eff0c-45e5-4001-aaf9-a38a55faa543}&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 34.7738667, 31.9983535 ], [ 34.7741028, 31.9981003 ], [ 34.7743303, 31.9982528 ], [ 34.7740943, 31.998506 ], [ 34.7738667, 31.9983535 ] ] ] }, &quot;geometry_name&quot;: &quot;geom&quot;, &quot;properties&quot;: { &quot;osm_id&quot;: 331438504, &quot;id&quot;: 98592, &quot;relative_feature_height&quot;: null, &quot;all_entity_names&quot;: null, &quot;building_type&quot;: &quot;yes&quot;, &quot;entity&quot;: null, &quot;sensitivity&quot;: &quot;ללא התייחסות&quot;, &quot;entity_id&quot;: &quot;{3e0eff0c-45e5-4001-aaf9-a38a55faa543}&quot;, &quot;is_sensitive&quot;: false, &quot;date&quot;: &quot;2022-07-26T11:14:26Z&quot; }, &quot;bbox&quot;: [ 34.7738667, 31.9981003, 34.7743303, 31.998506 ] } ], &quot;totalFeatures&quot;: 11198, &quot;numberMatched&quot;: 11198, &quot;numberReturned&quot;: 2, &quot;timeStamp&quot;: &quot;2022-07-27T08:27:45.596Z&quot;, &quot;crs&quot;: { &quot;type&quot;: &quot;name&quot;, &quot;properties&quot;: { &quot;name&quot;: &quot;urn:ogc:def:crs:EPSG::4326&quot; } }, &quot;bbox&quot;: [ 34.7735756, 31.9981003, 34.7743303, 31.9987787 ] }   For more complex criterias such as a set of multiple parameters or geographical intersections we should invoke a POST GetFetures request consisting the filter as a XML body.  let's look for all the building features that intersect in a polygon, one of the properties of a building feature is it's geom describing the building geography, we'll look by it by setting it as the request ValueReference. We can specify the srsName which is the coordinate reference system of the returned features in our case EPSG:4326. the polygon is a list of latitude-longitude pair coordinates.  We'll invoke a POST GetFeature request with the following body:  &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt; &lt;wfs:GetFeature xmlns:wfs=&quot;http://www.opengis.net/wfs/2.0&quot; xmlns:fes=&quot;http://www.opengis.net/fes/2.0&quot; xmlns:gml=&quot;http://www.opengis.net/gml/3.2&quot; xmlns:sf=&quot;http://www.openplans.org/spearfish&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; service=&quot;WFS&quot; version=&quot;2.0.0&quot; count=&quot;2&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd http://www.opengis.net/gml/3.2 http://schemas.opengis.net/gml/3.2.1/gml.xsd&quot; outputFormat=&quot;application/json&quot;&gt; &lt;wfs:Query typeNames=&quot;vector:buildings2&quot;&gt; &lt;fes:Filter&gt; &lt;fes:Intersects&gt; &lt;fes:ValueReference&gt;geom&lt;/fes:ValueReference&gt; &lt;gml:Polygon gml:id=&quot;polygon.1&quot; srsName=&quot;http://www.opengis.net/gml/srs/epsg.xml#4326&quot;&gt; &lt;gml:exterior&gt; &lt;gml:LinearRing&gt; &lt;gml:posList&gt; 34.746 32.0546 34.758 32.087 34.7985 32.086 32.053 34.792 34.746 32.0546 &lt;/gml:posList&gt; &lt;/gml:LinearRing&gt; &lt;/gml:exterior&gt; &lt;/gml:Polygon&gt; &lt;/fes:Intersects&gt; &lt;/fes:Filter&gt; &lt;/wfs:Query&gt; &lt;/wfs:GetFeature&gt;   Response { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;buildings.{de560e14-0055-4ca0-8b35-5cfa75cd85c7}&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 34.7924709, 32.087685 ], [ 34.7925809, 32.0876495 ], [ 34.7926377, 32.0877757 ], [ 34.7925276, 32.0878112 ], [ 34.7924709, 32.087685 ] ] ] }, &quot;geometry_name&quot;: &quot;geom&quot;, &quot;properties&quot;: { &quot;osm_id&quot;: 149367040, &quot;id&quot;: 515817, &quot;relative_feature_height&quot;: 45, &quot;all_entity_names&quot;: null, &quot;building_type&quot;: &quot;yes&quot;, &quot;entity&quot;: null, &quot;sensitivity&quot;: &quot;ללא התייחסות&quot;, &quot;entity_id&quot;: &quot;{de560e14-0055-4ca0-8b35-5cfa75cd85c7}&quot;, &quot;is_sensitive&quot;: false, &quot;date&quot;: &quot;2022-07-26T11:14:18Z&quot; }, &quot;bbox&quot;: [ 34.7924709, 32.0876495, 34.7926377, 32.0878112 ] }, { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;buildings.{538d6ffb-35cd-4034-97b6-7b8ebefab8f1}&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 34.7927799, 32.0876342 ], [ 34.7928929, 32.0876309 ], [ 34.7929, 32.0878021 ], [ 34.792787, 32.0878055 ], [ 34.7927799, 32.0876342 ] ] ] }, &quot;geometry_name&quot;: &quot;geom&quot;, &quot;properties&quot;: { &quot;osm_id&quot;: 149367207, &quot;id&quot;: 515818, &quot;relative_feature_height&quot;: 3, &quot;all_entity_names&quot;: null, &quot;building_type&quot;: &quot;yes&quot;, &quot;entity&quot;: null, &quot;sensitivity&quot;: &quot;רגיש&quot;, &quot;entity_id&quot;: &quot;{538d6ffb-35cd-4034-97b6-7b8ebefab8f1}&quot;, &quot;is_sensitive&quot;: true, &quot;date&quot;: &quot;2022-07-26T11:14:18Z&quot; }, &quot;bbox&quot;: [ 34.7927799, 32.0876309, 34.7929, 32.0878055 ] } ], &quot;totalFeatures&quot;: 2070, &quot;numberMatched&quot;: 2070, &quot;numberReturned&quot;: 2, &quot;timeStamp&quot;: &quot;2022-07-27T08:39:00.630Z&quot;, &quot;crs&quot;: { &quot;type&quot;: &quot;name&quot;, &quot;properties&quot;: { &quot;name&quot;: &quot;urn:ogc:def:crs:EPSG::4326&quot; } }, &quot;bbox&quot;: [ 34.7924709, 32.0876309, 34.7929, 32.0878112 ] }   if we'd like to filter buildings by a set of multiple parameters we'll achieve that by a GetFeature POST request. Say we would like to retrieve only the buildings who's relative_feature_height is greater than 10 and their is_sensitive flag is falsy.  We'll invoke a request with the following body:  Query with 2 filters &lt;wfs:GetFeature service=&quot;WFS&quot; version=&quot;2.0.0&quot; xmlns:wfs=&quot;http://www.opengis.net/wfs/2.0&quot; xmlns:fes=&quot;http://www.opengis.net/fes/2.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd&quot; count=&quot;2&quot; outputFormat=&quot;application/json&quot;&gt; &lt;wfs:Query typeNames=&quot;vector:buildings&quot;&gt; &lt;fes:Filter&gt; &lt;And&gt; &lt;fes:PropertyIsGreaterThan&gt; &lt;fes:ValueReference&gt;relative_feature_height&lt;/fes:ValueReference&gt; &lt;fes:Literal&gt;10&lt;/fes:Literal&gt; &lt;/fes:PropertyIsGreaterThan&gt; &lt;fes:PropertyIsEqualTo&gt; &lt;fes:ValueReference&gt;is_sensitive&lt;/fes:ValueReference&gt; &lt;fes:Literal&gt;false&lt;/fes:Literal&gt; &lt;/fes:PropertyIsEqualTo&gt; &lt;/And&gt; &lt;/fes:Filter&gt; &lt;/wfs:Query&gt; &lt;/wfs:GetFeature&gt;   Response Reponse in GeoJSON { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;buildings.{6544d0de-37f2-4cb7-8122-07153d659624}&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 34.3178082, 31.2941689 ], [ 34.3178674, 31.294039 ], [ 34.3180002, 31.2940832 ], [ 34.317941, 31.2942131 ], [ 34.3178082, 31.2941689 ] ] ] }, &quot;geometry_name&quot;: &quot;geom&quot;, &quot;properties&quot;: { &quot;osm_id&quot;: 306816301, &quot;id&quot;: 345546, &quot;relative_feature_height&quot;: 11.5, &quot;all_entity_names&quot;: null, &quot;building_type&quot;: &quot;yes&quot;, &quot;entity&quot;: null, &quot;sensitivity&quot;: &quot;ללא התייחסות&quot;, &quot;entity_id&quot;: &quot;{6544d0de-37f2-4cb7-8122-07153d659624}&quot;, &quot;is_sensitive&quot;: false, &quot;date&quot;: &quot;2022-07-26T11:14:25Z&quot; }, &quot;bbox&quot;: [ 34.3178082, 31.294039, 34.3180002, 31.2942131 ] }, { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;buildings.{2d2a3a5f-eae9-4806-b68d-7e346c3cdfa8}&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 34.3178424, 31.2935296 ], [ 34.317868, 31.2934804 ], [ 34.3179474, 31.2935106 ], [ 34.3179218, 31.2935598 ], [ 34.3178424, 31.2935296 ] ] ] }, &quot;geometry_name&quot;: &quot;geom&quot;, &quot;properties&quot;: { &quot;osm_id&quot;: 306815931, &quot;id&quot;: 345547, &quot;relative_feature_height&quot;: 33.612, &quot;all_entity_names&quot;: null, &quot;building_type&quot;: &quot;yes&quot;, &quot;entity&quot;: null, &quot;sensitivity&quot;: &quot;ללא התייחסות&quot;, &quot;entity_id&quot;: &quot;{2d2a3a5f-eae9-4806-b68d-7e346c3cdfa8}&quot;, &quot;is_sensitive&quot;: false, &quot;date&quot;: &quot;2022-07-26T11:14:25Z&quot; }, &quot;bbox&quot;: [ 34.3178424, 31.2934804, 34.3179474, 31.2935598 ] } ], &quot;totalFeatures&quot;: 385759, &quot;numberMatched&quot;: 385759, &quot;numberReturned&quot;: 2, &quot;timeStamp&quot;: &quot;2022-07-27T09:42:24.943Z&quot;, &quot;crs&quot;: { &quot;type&quot;: &quot;name&quot;, &quot;properties&quot;: { &quot;name&quot;: &quot;urn:ogc:def:crs:EPSG::4326&quot; } }, &quot;bbox&quot;: [ 34.3178082, 31.2934804, 34.3180002, 31.2942131 ] }  ","version":"Next","tagName":"h2"},{"title":"Query Examples","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-csw/ogc-csw-examples","content":"","keywords":"","version":"Next"},{"title":"GetCapabilities​","type":1,"pageTitle":"Query Examples","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-csw/ogc-csw-examples#getcapabilities","content":" How to Get server metadata with &quot;GetCapabilities&quot; request  GET request http://localhost:8080/csw?request=GetCapabilities&amp;service=CSW   ","version":"Next","tagName":"h2"},{"title":"Query by IsEqualTo value​","type":1,"pageTitle":"Query Examples","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-csw/ogc-csw-examples#query-by-isequalto-value","content":" How to query the catalog by specific property and his value  POST request Url: http://localhost:8080/csw Content-Type application/xml Request body: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecords xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; service=&quot;CSW&quot; maxRecords=&quot;1&quot; startPosition=&quot;1&quot; outputSchema=&quot;http://schema.mapcolonies.com/raster&quot; version=&quot;2.0.2&quot; xmlns:mc=&quot;[SUB-SYSTEM-MAIN-NAMESPACE]&quot; &gt; &lt;csw:Query typeNames=&quot;[SUB-SYSTEM-TYPENAME]&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;csw:Constraint version=&quot;1.1.0&quot;&gt; &lt;Filter xmlns=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;PropertyIsEqualTo matchCase=&quot;true&quot;&gt; &lt;!-- ****** INSERT PROFILE FIELD NAME START ********************** --&gt; &lt;PropertyName&gt;mc:productId&lt;/PropertyName&gt; &lt;!-- ****** INSERT PROFILE FIELD NAME END ********************** --&gt; &lt;!-- ****** INSERT PROFILE FIELD VALUE START ********************** --&gt; &lt;Literal&gt;MAS_6_ORT&lt;/Literal&gt; &lt;!-- ****** INSERT PROFILE FIELD VALUE END ********************** --&gt; &lt;/PropertyIsEqualTo&gt; &lt;/Filter&gt; &lt;/csw:Constraint&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt;   Above example declare a query for mc:productId field in catalog and response with the full metadata of MAS_6_ORT match result.  maxRecords attribute in &lt;csw:GetRecords&gt;&lt;/csw:GetRecords&gt;element is equals to &quot;1&quot; means response will contain only 1 result.  startPosition will display records from all result start from the first one to the maxRecords value(1 to 1 in example).  ","version":"Next","tagName":"h2"},{"title":"Query by field value​","type":1,"pageTitle":"Query Examples","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-csw/ogc-csw-examples#query-by-field-value","content":" How to query the catalog by specific property and his value  POST request Url: http://localhost:8080/csw Content-Type application/xml Request body: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecords xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; service=&quot;CSW&quot; maxRecords=&quot;1&quot; startPosition=&quot;1&quot; outputSchema=&quot;http://schema.mapcolonies.com/raster&quot; version=&quot;2.0.2&quot; xmlns:mc=&quot;[SUB-SYSTEM-MAIN-NAMESPACE]&quot; &gt; &lt;csw:Query typeNames=&quot;[SUB-SYSTEM-TYPENAME]&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;csw:Constraint version=&quot;1.1.0&quot;&gt; &lt;Filter xmlns=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;PropertyIsLike wildCard=&quot;%&quot; singleChar=&quot;_&quot; escapeChar=&quot;\\\\&quot;&gt; &lt;!-- ****** INSERT PROFILE FIELD NAME START ********************** --&gt; &lt;PropertyName&gt;mc:productId&lt;/PropertyName&gt; &lt;!-- ****** INSERT PROFILE FIELD NAME END ********************** --&gt; &lt;!-- ****** INSERT PROFILE FIELD VALUE START ********************** --&gt; &lt;Literal&gt;MAS_6_ORT&lt;/Literal&gt; &lt;!-- ****** INSERT PROFILE FIELD VALUE END ********************** --&gt; &lt;/PropertyIsLike&gt; &lt;/Filter&gt; &lt;/csw:Constraint&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt;   Above example declare a query for mc:productId field in catalog and response with the full metadata of MAS_6_ORT match result.  maxRecords attribute in &lt;csw:GetRecords&gt;&lt;/csw:GetRecords&gt;element is equals to &quot;1&quot; means response will contain only 1 result.  startPosition will display records from all result start from the first one to the maxRecords value(1 to 1 in example).  ","version":"Next","tagName":"h2"},{"title":"Query by field like value​","type":1,"pageTitle":"Query Examples","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-csw/ogc-csw-examples#query-by-field-like-value","content":" How to query the catalog by specific property to be like wild-card value  POST request Url: http://localhost:8080/csw Content-Type application/xml Request body: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecords xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; service=&quot;CSW&quot; maxRecords=&quot;5&quot; startPosition=&quot;1&quot; outputSchema=&quot;http://schema.mapcolonies.com/raster&quot; version=&quot;2.0.2&quot; xmlns:mc=&quot;[SUB-SYSTEM-MAIN-NAMESPACE]&quot; &gt; &lt;csw:Query typeNames=&quot;[SUB-SYSTEM-TYPENAME]&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;csw:Constraint version=&quot;1.1.0&quot;&gt; &lt;Filter xmlns=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;PropertyIsLike wildCard=&quot;%&quot; singleChar=&quot;_&quot; escapeChar=&quot;\\\\&quot;&gt; &lt;!-- ****** INSERT PROFILE FIELD NAME START ********************** --&gt; &lt;PropertyName&gt;mc:productId&lt;/PropertyName&gt; &lt;!-- ****** INSERT PROFILE FIELD NAME END ********************** --&gt; &lt;!-- ****** INSERT PROFILE FIELD VALUE START ********************** --&gt; &lt;Literal&gt;%MAS_6_ORT%&lt;/Literal&gt; &lt;!-- ****** INSERT PROFILE FIELD VALUE END ********************** --&gt; &lt;/PropertyIsLike&gt; &lt;/Filter&gt; &lt;/csw:Constraint&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt;   pay attention for the %MAS_6_ORT% in &lt;Literal&gt;&lt;/Literal&gt; element, now contains &quot;%&quot; after and before the value,  means CSW will look for every record that contains MAS_6_ORT value in mc:productId profile field  maxRecords equals to &quot;5&quot; means response will contain up to 5 results.  ","version":"Next","tagName":"h2"},{"title":"Number of records​","type":1,"pageTitle":"Query Examples","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-csw/ogc-csw-examples#number-of-records","content":" Get up to 5 records contains desired product version  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecords xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; service=&quot;CSW&quot; maxRecords=&quot;5&quot; startPosition=&quot;1&quot; outputSchema=&quot;http://schema.mapcolonies.com/raster&quot; version=&quot;2.0.2&quot; xmlns:mc=&quot;[SUB-SYSTEM-MAIN-NAMESPACE]&quot; &gt; &lt;csw:Query typeNames=&quot;[SUB-SYSTEM-TYPENAME]&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;csw:Constraint version=&quot;1.1.0&quot;&gt; &lt;Filter xmlns=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;PropertyIsLike wildCard=&quot;%&quot; singleChar=&quot;_&quot; escapeChar=&quot;\\\\&quot;&gt; &lt;!-- ****** INSERT PROFILE FIELD NAME START ********************** --&gt; &lt;PropertyName&gt;mc:productVersion&lt;/PropertyName&gt; &lt;!-- ****** INSERT PROFILE FIELD NAME END ********************** --&gt; &lt;!-- ****** INSERT PROFILE FIELD VALUE START ********************** --&gt; &lt;Literal&gt;4.0&lt;/Literal&gt; &lt;!-- ****** INSERT PROFILE FIELD VALUE END ********************** --&gt; &lt;/PropertyIsLike&gt; &lt;/Filter&gt; &lt;/csw:Constraint&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt;   another familiar example based on previous examples, just in that case we can see&lt;PropertyName&gt;&lt;/PropertyName&gt; element contains mc:productVersion means we query catalog records by their product version.  in this specific example we will get up to 5 records that includes productVersion of 4.0.  ","version":"Next","tagName":"h2"},{"title":"Query by Greater Or Equal​","type":1,"pageTitle":"Query Examples","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-csw/ogc-csw-examples#query-by-greater-or-equal","content":" ℹ️ ingestionDate = the date field that records will be filtered by.​  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecords xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; service=&quot;CSW&quot; startPosition=&quot;1&quot; outputSchema=&quot;http://schema.mapcolonies.com/raster&quot; version=&quot;2.0.2&quot; xmlns:mc=&quot;[SUB-SYSTEM-MAIN-NAMESPACE]&quot; &gt; &lt;csw:Query typeNames=&quot;[SUB-SYSTEM-TYPENAME]&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;csw:Constraint version=&quot;1.1.0&quot;&gt; &lt;Filter xmlns=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;PropertyIsGreaterThanOrEqualTo&gt; &lt;!-- ****** INSERT PROFILE FIELD NAME START ********************** --&gt; &lt;PropertyName&gt;mc:ingestionDate&lt;/PropertyName&gt; &lt;!-- ****** INSERT PROFILE FIELD NAME END ********************** --&gt; &lt;!-- ****** INSERT PROFILE FIELD VALUE START ********************** --&gt; &lt;Literal&gt;2020-09-03T00:00:01Z&lt;/Literal&gt; &lt;!-- ****** INSERT PROFILE FIELD VALUE END ********************** --&gt; &lt;/PropertyIsGreaterThanOrEqualTo&gt; &lt;/Filter&gt; &lt;/csw:Constraint&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt;   Response will contain up to 10 records (maxRecords=&quot;10&quot;) that their ingestion date is Greater or Equal 2020-09-03T00:00:01Z  &lt;PropertyIsGreaterThanOrEqualTo&gt;&lt;/&lt;PropertyIsGreaterThanOrEqualTo&gt;   to the record ingestion date in catalog.  ","version":"Next","tagName":"h2"},{"title":"Query by Less or Equal​","type":1,"pageTitle":"Query Examples","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-csw/ogc-csw-examples#query-by-less-or-equal","content":" &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecords xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; service=&quot;CSW&quot; maxRecords=&quot;10&quot; startPosition=&quot;1&quot; outputSchema=&quot;http://schema.mapcolonies.com/raster&quot; version=&quot;2.0.2&quot; xmlns:mc=&quot;[SUB-SYSTEM-MAIN-NAMESPACE]&quot; &gt; &lt;csw:Query typeNames=&quot;[SUB-SYSTEM-TYPENAME]&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;csw:Constraint version=&quot;1.1.0&quot;&gt; &lt;Filter xmlns=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;PropertyIsLessThanOrEqualTo&gt; &lt;PropertyName&gt;mc:ingestionDate&lt;/PropertyName&gt; &lt;Literal&gt;2022-09-03T00:00:01Z&lt;/Literal&gt; &lt;/PropertyIsLessThanOrEqualTo&gt; &lt;/Filter&gt; &lt;/csw:Constraint&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt;   Response will contain up to 10 records (maxRecords=&quot;10&quot;) that their ingestion date is Less or Equal 2022-09-03T00:00:01Z  &lt;PropertyIsLessThanOrEqualTo&gt;&lt;/&lt;PropertyIsLessThanOrEqualTo&gt;   to the record ingestion date in catalog.  ","version":"Next","tagName":"h2"},{"title":"Query by multi fields​","type":1,"pageTitle":"Query Examples","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-csw/ogc-csw-examples#query-by-multi-fields","content":" Use &lt;And&gt;&lt;/And&gt; element to includes 2 or more conditions for Query catalog by multi fields:  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecords xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; service=&quot;CSW&quot; maxRecords=&quot;10&quot; startPosition=&quot;1&quot; outputSchema=&quot;http://schema.mapcolonies.com/raster&quot; version=&quot;2.0.2&quot; xmlns:mc=&quot;[SUB-SYSTEM-MAIN-NAMESPACE]&quot; &gt; &lt;csw:Query typeNames=&quot;[SUB-SYSTEM-TYPENAME]&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;csw:Constraint version=&quot;1.1.0&quot;&gt; &lt;Filter xmlns=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;And&gt; &lt;PropertyIsLike wildCard=&quot;%&quot; singleChar=&quot;_&quot; escapeChar=&quot;\\\\&quot;&gt; &lt;PropertyName&gt;mc:productVersion&lt;/PropertyName&gt; &lt;Literal&gt;4.0&lt;/Literal&gt; &lt;/PropertyIsLike&gt; &lt;PropertyIsLessThanOrEqualTo&gt; &lt;PropertyName&gt;mc:ingestionDate&lt;/PropertyName&gt; &lt;Literal&gt;2022-09-03T00:00:01Z&lt;/Literal&gt; &lt;/PropertyIsLessThanOrEqualTo&gt; &lt;/And&gt; &lt;/Filter&gt; &lt;/csw:Constraint&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt;   Response will contain up to 10 records (maxRecords=&quot;10&quot;) that includes product version &quot;4.0&quot; and their ingestion date is Less than the desired date 2022-09-03T00:00:01Z .  ","version":"Next","tagName":"h2"},{"title":"Query by BBOX​","type":1,"pageTitle":"Query Examples","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-csw/ogc-csw-examples#query-by-bbox","content":" &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecords xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; service=&quot;CSW&quot; maxRecords=&quot;10&quot; startPosition=&quot;1&quot; outputSchema=&quot;http://schema.mapcolonies.com/raster&quot; version=&quot;2.0.2&quot; xmlns:mc=&quot;[SUB-SYSTEM-MAIN-NAMESPACE]&quot; &gt; &lt;csw:Query typeNames=&quot;[SUB-SYSTEM-TYPENAME]&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;csw:Constraint version=&quot;1.1.0&quot;&gt; &lt;Filter xmlns=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;BBOX&gt; &lt;PropertyName&gt;ows:BoundingBox&lt;/PropertyName&gt; &lt;gml:Envelope xmlns:gml=&quot;http://www.opengis.net/gml&quot;&gt; &lt;gml:lowerCorner&gt;-180 -90&lt;/gml:lowerCorner&gt; &lt;gml:upperCorner&gt;180 90&lt;/gml:upperCorner&gt; &lt;/gml:Envelope&gt; &lt;/BBOX&gt; &lt;/Filter&gt; &lt;/csw:Constraint&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt;   Response will contain up to 10 records ('maxRecords=&quot;10&quot;') that their BBOX includes in the desired extent (in example: -180, -190, 180, 90)  ","version":"Next","tagName":"h2"},{"title":"Query by BBOX and region​","type":1,"pageTitle":"Query Examples","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-csw/ogc-csw-examples#query-by-bbox-and-region","content":" &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecords xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; service=&quot;CSW&quot; maxRecords=&quot;10&quot; startPosition=&quot;1&quot; outputSchema=&quot;http://schema.mapcolonies.com/raster&quot; version=&quot;2.0.2&quot; xmlns:mc=&quot;[SUB-SYSTEM-MAIN-NAMESPACE]&quot; &gt; &lt;csw:Query typeNames=&quot;[SUB-SYSTEM-TYPENAME]&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;csw:Constraint version=&quot;1.1.0&quot;&gt; &lt;Filter xmlns=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;And&gt; &lt;PropertyIsLike wildCard=&quot;%&quot; singleChar=&quot;_&quot; escapeChar=&quot;\\\\&quot;&gt; &lt;PropertyName&gt;mc:region&lt;/PropertyName&gt; &lt;Literal&gt;%ירדן%&lt;/Literal&gt; &lt;/PropertyIsLike&gt; &lt;BBOX&gt; &lt;PropertyName&gt;ows:BoundingBox&lt;/PropertyName&gt; &lt;gml:Envelope xmlns:gml=&quot;http://www.opengis.net/gml&quot;&gt; &lt;gml:lowerCorner&gt;-180 -90&lt;/gml:lowerCorner&gt; &lt;gml:upperCorner&gt;180 90&lt;/gml:upperCorner&gt; &lt;/gml:Envelope&gt; &lt;/BBOX&gt; &lt;/And&gt; &lt;/Filter&gt; &lt;/csw:Constraint&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt;   Response will contain up to 10 records ('maxRecords=&quot;10&quot;') that their BBOX includes in the desired extent and their region is contains the word “ירדן” (&lt;Literal&gt;%ירדן%&lt;/Literal&gt;)  ","version":"Next","tagName":"h2"},{"title":"Query by productType, ingestionDate and maxResolutionDeg ordered by DESC ingestionDate​","type":1,"pageTitle":"Query Examples","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-csw/ogc-csw-examples#query-by-producttype-ingestiondate-and-maxresolutiondeg-ordered-by-desc-ingestiondate","content":" &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;csw:GetRecords xmlns:csw=&quot;http://www.opengis.net/cat/csw/2.0.2&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot; service=&quot;CSW&quot; maxRecords=&quot;100&quot; startPosition=&quot;1&quot; outputSchema=&quot;http://schema.mapcolonies.com/raster&quot; version=&quot;2.0.2&quot; xmlns:mc=&quot;http://schema.mapcolonies.com/raster&quot; &gt; &lt;csw:Query typeNames=&quot;mc:MCRasterRecord&quot;&gt; &lt;csw:ElementSetName&gt;full&lt;/csw:ElementSetName&gt; &lt;csw:Constraint version=&quot;1.1.0&quot;&gt; &lt;Filter xmlns=&quot;http://www.opengis.net/ogc&quot;&gt; &lt;And&gt; &lt;PropertyIsEqualTo&gt; &lt;PropertyName&gt;mc:productType&lt;/PropertyName&gt; &lt;Literal&gt;Orthophoto&lt;/Literal&gt; &lt;/PropertyIsEqualTo&gt; &lt;PropertyIsGreaterThan&gt; &lt;PropertyName&gt;mc:ingestionDate&lt;/PropertyName&gt; &lt;Literal&gt;2023-10-15T00:00:01Z&lt;/Literal&gt; &lt;/PropertyIsGreaterThan&gt; &lt;PropertyIsLessThanOrEqualTo&gt; &lt;PropertyName&gt;mc:maxResolutionDeg&lt;/PropertyName&gt; &lt;Literal&gt;5.36441E-06&lt;/Literal&gt; &lt;/PropertyIsLessThanOrEqualTo&gt; &lt;/And&gt; &lt;/Filter&gt; &lt;/csw:Constraint&gt; &lt;ogc:SortBy&gt; &lt;ogc:SortProperty&gt; &lt;ogc:PropertyName&gt;mc:ingestionDate&lt;/ogc:PropertyName&gt; &lt;ogc:SortOrder&gt;DESC&lt;/ogc:SortOrder&gt; &lt;/ogc:SortProperty&gt; &lt;/ogc:SortBy&gt; &lt;/csw:Query&gt; &lt;/csw:GetRecords&gt;   Response will contain up to 100 records ('maxRecords=&quot;100&quot;') that their productType is 'Orthophoto', maxResolutionDeg is less than '5.36441E-06' ordered by DESC ingestionDate after '2023-10-15T00:00:01Z' ","version":"Next","tagName":"h2"},{"title":"WFS - Web Feature Service","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-wfs","content":"","keywords":"","version":"Next"},{"title":"GetCapabilities​","type":1,"pageTitle":"WFS - Web Feature Service","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-wfs#getcapabilities","content":" The GetCapabilities operation is a GET request to a WFS server for a list of the operations, services or capabilities supported by that service  &lt;WFS_SERVICE_URL&gt;/wfs? service=wfs&amp; version={WFS_SERVICE_VERSION}&amp; request=GetCapabilities   ","version":"Next","tagName":"h2"},{"title":"DescribeFeatureType​","type":1,"pageTitle":"WFS - Web Feature Service","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-wfs#describefeaturetype","content":" The DescribeFeatureType request provides information about all or an individual feature type. Specifically, the operation will request a list of features and attributes for the given feature type, or list the feature types available on the service.  Parameter\tIs Required\tDescription\tDefault ValuetypeNames\tNo\tName of the feature types to describe (use typeName for WFS 1.1.0 and earlier)\tan empty value which will list all the feature types provided by the service exceptions\tNo\tFormat for reporting exceptions, choose one of (text/xml, application/json, text/javascript)\ttext/xml outputFormat\tNo\tThe output format (application/json can be choose)\tapplication/xml  The following GET request will return a list of all feature types, sorted by namespace  &lt;WFS_SERVICE_URL&gt;/wfs? service=wfs&amp; version={WFS_SERVICE_VERSION}&amp; request=DescribeFeatureType   The following GET request will list information about a specific feature type named namespace:featuretype, the response will be formatted in application/json format  &lt;WFS_SERVICE_URL&gt;/wfs? service=wfs&amp; version={WFS_SERVICE_VERSION}&amp; request=DescribeFeatureType&amp; typeNames=namespace:featuretype&amp; outputFormat=application/json   ","version":"Next","tagName":"h2"},{"title":"GetFeature​","type":1,"pageTitle":"WFS - Web Feature Service","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-wfs#getfeature","content":" The GetFeature request queries the server with a set of parameters describing the geographic features to be returned, the request can also be sorted and/or limited.  Parameter\tIs Required\tDescription\tDefault ValuetypeNames\tYes\tName of the feature type to query from (use typeName for WFS 1.1.0 and earlier)\t- exceptions\tNo\tFormat for reporting exceptions, choose one of (text/xml, application/json, text/javascript)\ttext/xml outputFormat\tNo\tDefines the scheme description language used to describe feature types (one of gml2, gml3, shapefile, application/json, text/javascript, csv)\tgml2 for WFS v1.0.0 and gml3 for WFS v1.1.0 and v2.0.0 featureId\tNo\tThe Id of a specific feature\t- count\tNo\tThe maximum number of features to be returned. Use maxFeatures parameter for WFS versions earlier than 2.0.0\t- startIndex\tNo\tThe index from which the server shall begin presenting results in the response\t- sortBy\tNo\tAn attribute to sort the features by (append a +A or +D to the request for ascending or descending order. Default sort is in ascending order.)\t- propertyName\tNo\tSelect specific attributes to be retrieved from the feature. A single attribute, or multiple attributes separated by commas can be selected. If some properties in the feature are not-nillable or if they have minOccurs greater than zero they will be included in the result even if not requested\t- bbox\tNo\tSearch for features that are contained (or partially contained) inside a coordinates box. The format of the BBOX parameter is bbox=a1,b1,a2,b2,[crs] where a1, b1, a2, b2 represent the coordinate values. The optional crs parameter is used to name the CRS for the bbox coordinates. bottom corner coordinate (left or right) to be provided first\t- srsName\tNo\tThe coordinate reference system for the returned features to be encoded in\t- resultType\tNo\tThe possible values for this parameter are &quot;results&quot; and &quot;hits&quot;. If the value is set to &quot;results&quot; the server shall generate a complete response document containing resources that satisfy the operation. If the value is set to &quot;hits&quot; the server shall generate an empty response document containing no resource instances and the root element of the response container shall contain the count of the total number of resources that the operation found and the value for the number of resources presented in the response document shall be set to zero.\t-  The following GET request will get at most the top N features of feature type named namespace:featuretype sorted by attributeA, the response will be formatted in application/json  &lt;WFS_SERVICE_URL&gt;/wfs? service=wfs&amp; version={WFS_SERVICE_VERSION}&amp; request=GetFeature&amp; typeNames=namespace:featuretype&amp; outputFormat=application/json&amp; count=N&amp; sortBy=attributeA   The following GET request will search for all the features contained or partially contained by the specified bounding box in the specified coordinate reference system (EPSG:4326). The retrieved features will be encoded in EPSG:4326 as well as requested by the srsName parameter value.  &lt;WFS_SERVICE_URL&gt;/wfs? service=wfs&amp; version={WFS_SERVICE_VERSION}&amp; request=GetFeature&amp; typeNames=namespace:featuretype&amp; bbox=51.607317,5.106151,51.629884,5.228022,urn:ogc:def:crs:EPSG::4326&amp; srsName=urn:ogc:def:crs:EPSG::4326   The following GET request will retrieve a specific feature by provided featureId FID  &lt;WFS_SERVICE_URL&gt;/wfs? service=wfs&amp; version={WFS_SERVICE_VERSION}&amp; request=GetFeature&amp; typeNames=namespace:featuretype&amp; featureId=FID  ","version":"Next","tagName":"h2"},{"title":"WMTS - Web Map Tile Service","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-wmts","content":"WMTS - Web Map Tile Service WMTS OGC standard 🌐 WMTS OGC standard 📚 OGC e-learning 🌐 Operation\tDescriptionGetCapabilities\tRetrieves metadata about the service, including supported operations and parameters, and a list of the available layers. GetTile\tRetrieves a map image for a specified area and content. GetFeatureInfo (optional)\tRetrieves the underlying data, including geometry and attribute values, for a pixel location on a map.","keywords":"","version":"Next"},{"title":"Layer Parts Service 🧩","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts","content":"","keywords":"","version":"Next"},{"title":"General​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#general","content":" ","version":"Next","tagName":"h2"},{"title":"Understanding Layer Parts on Layer (records) management - Updates​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#understanding-layer-parts-on-layer-records-management---updates","content":" This system utilizes polygons and layers to represent the precise area of a product and track all updates received over time. Polygons define the exact boundaries, while layers provide a structured way to integrate these updates. Let's delve deeper into how this system functions.  ","version":"Next","tagName":"h3"},{"title":"Polygons​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#polygons","content":" Represent the precise area of a product and all its subsequent updates. Contain additional metadata like update date, accuracy, and photo sensor information.  ","version":"Next","tagName":"h3"},{"title":"Layers​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#layers","content":" Composed of continuous geographic regions defined by several polygons. Each polygon holds its own metadata. Updates are merged with overlapping layers below. Polygons within existing layers that overlap the new update (completely or partially) are re-calculated.    Practical Example B is a new layer containing 3 layer parts about to be merged into an existing layer. As you can see in the “After” figure on the right, the new layer parts contains the merged layer parts of A and B. Each part hold its own metadata and related attributes LayerParts attributes  ","version":"Next","tagName":"h3"},{"title":"WFS implementation​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#wfs-implementation","content":" Raster layer parts service uses the WFS protocol which is a READ-ONLY Web Feature Service. it provides facilities for searching and retrieving feature data with the GetCapabilities, DescribeFeatureType and GetFeature operations all other operations are invalid.  For the full capabilities provided by the service see GetCapabilities  WFS partitions the queryable data into feature types each feature type has its own attributes describing the structure of the data itself. For the description of a feature type see DescribeFeatureType  Finally, Features can be retrieved with the GetFeature operation. the request returns a collection of geographic feature instances filtered according to a criteria set by the requesting client.    important In layer parts, each feature represents a single polygon  Authentication Authentication must be integrated in order to communicate with Map and Catalog services. See the principles here  ","version":"Next","tagName":"h3"},{"title":"Overview​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#overview","content":" WFS protocol partitions the queryable features into different feature types. Each feature types actually represent other catalog layer Raster Catalog.  Each feature type consists of same layer parts schema describing the feature. the feature type is queryable by its schema, each feature type has a default coordinate reference system and the bounding box which contains all features of this type, those are also possible parameters for querying.  Let's see an example using all three operations with different filters, the following chart describes our work flow    ","version":"Next","tagName":"h2"},{"title":"The typeNames Convention​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#the-typenames-convention","content":" Each typeName represent a Layer from the catalog. The name string includes several parts as in the layer conventions:  &lt;productId&gt;-&lt;productType&gt;   productId represent a layer's product id, for example: ORTHOPHOTO_MOSAIC_BASEproductType represent layer's product type, for example: OrthophotoBest  So, for our example, the feature type name will be: ORTHOPHOTO_MOSAIC_BASE-OrthophotoBest.  ","version":"Next","tagName":"h3"},{"title":"GetCapabilities​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#getcapabilities","content":" ","version":"Next","tagName":"h2"},{"title":"List WFS capabilities and find available FeaturesTypes​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#list-wfs-capabilities-and-find-available-featurestypes","content":" To list all the available feature types use the GetCapabilities operation and look for the FeatureTypeList section.  &lt;LAYER_PARTS_QUERY_SERVICE_URL&gt;/wfs? service=wfs&amp; version=2.0.0&amp; request=GetCapabilities   Response Response &lt;FeatureTypeList&gt; &lt;FeatureType xmlns:layerParts=&quot;http://layerParts&quot;&gt; &lt;Name&gt;layerParts:ORTHOPHOTO_BEST-OrthophotoBest&lt;/Name&gt; &lt;Title&gt;orthophoto_best_orthophotobest&lt;/Title&gt; &lt;Abstract/&gt; &lt;ows:Keywords&gt; &lt;ows:Keyword&gt;features&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;orthophoto_best_orthophotobest&lt;/ows:Keyword&gt; &lt;/ows:Keywords&gt; &lt;DefaultCRS&gt;urn:ogc:def:crs:EPSG::4326&lt;/DefaultCRS&gt; &lt;ows:WGS84BoundingBox&gt; &lt;ows:LowerCorner&gt;-180.0 -90.0&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;180.0 90.0&lt;/ows:UpperCorner&gt; &lt;/ows:WGS84BoundingBox&gt; &lt;/FeatureType&gt; &lt;/FeatureTypeList&gt;     We got a FeatureTypeList consisting of the different FeatureTypes that each one hold and represent some catalog layer under the WFS service. one of them is the layerParts:ORTHOPHOTO_BEST-OrthophotoBest.FeatureType where layerParts is the namespace and the ORTHOPHOTO_BEST-OrthophotoBest is the unique FeatureType name under the layerParts namespace - it include layer's productId + productType. it is possible to query the FeatureType by its full name layerPartss:ORTHOPHOTO_BEST-OrthophotoBest or short unique name ORTHOPHOTO_BEST-OrthophotoBest. The default coordinate reference system and the containing features bounding box are also presented.  ","version":"Next","tagName":"h3"},{"title":"DescribeFeatureType​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#describefeaturetype","content":" ","version":"Next","tagName":"h2"},{"title":"Explore featureType 'ORTHOPHOTO_BEST-OrthophotoBest' layer​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#explore-featuretype-orthophoto_best-orthophotobest-layer","content":" If you would like to view the schema of the ORTHOPHOTO_BEST-OrthophotoBest FeatureType, we could invoke the DescribeFeatureType request with typeName of ORTHOPHOTO_BEST-OrthophotoBest  The response is the XSD (in xml response) describing the ORTHOPHOTO_BEST-OrthophotoBest FeatureType.  For convenience we'll add outputFormat parameter as application/json to each of our requests for a json formatted response  &lt;LAYER_PARTS_QUERY_SERVICE_URL&gt;/wfs? service=wfs&amp; version=2.0.0&amp; request=DescribeFeatureType&amp; typeName=ORTHOPHOTO_BEST-OrthophotoBest&amp; outputFormat=application/json   Response { &quot;elementFormDefault&quot;: &quot;qualified&quot;, &quot;targetNamespace&quot;: &quot;http://layerParts&quot;, &quot;targetPrefix&quot;: &quot;layerParts&quot;, &quot;featureTypes&quot;: [ { &quot;typeName&quot;: &quot;ORTHOPHOTO_BEST-OrthophotoBest&quot;, &quot;properties&quot;: [ { &quot;name&quot;: &quot;id&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:string&quot;, &quot;localType&quot;: &quot;string&quot; }, { &quot;name&quot;: &quot;catalogId&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:string&quot;, &quot;localType&quot;: &quot;string&quot; }, { &quot;name&quot;: &quot;productId&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:string&quot;, &quot;localType&quot;: &quot;string&quot; }, { &quot;name&quot;: &quot;productType&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:string&quot;, &quot;localType&quot;: &quot;string&quot; }, { &quot;name&quot;: &quot;sourceId&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:string&quot;, &quot;localType&quot;: &quot;string&quot; }, { &quot;name&quot;: &quot;sourceName&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:string&quot;, &quot;localType&quot;: &quot;string&quot; }, { &quot;name&quot;: &quot;productVersion&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:string&quot;, &quot;localType&quot;: &quot;string&quot; }, { &quot;name&quot;: &quot;ingestionDateUtc&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:date-time&quot;, &quot;localType&quot;: &quot;date-time&quot; }, { &quot;name&quot;: &quot;imagingTimeBeginUtc&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:date-time&quot;, &quot;localType&quot;: &quot;date-time&quot; }, { &quot;name&quot;: &quot;imagingTimeEndUtc&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:date-time&quot;, &quot;localType&quot;: &quot;date-time&quot; }, { &quot;name&quot;: &quot;resolutionDegree&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:number&quot;, &quot;localType&quot;: &quot;number&quot; }, { &quot;name&quot;: &quot;resolutionMeter&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:number&quot;, &quot;localType&quot;: &quot;number&quot; }, { &quot;name&quot;: &quot;sourceResolutionMeter&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:number&quot;, &quot;localType&quot;: &quot;number&quot; }, { &quot;name&quot;: &quot;horizontalAccuracyCe90&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:number&quot;, &quot;localType&quot;: &quot;number&quot; }, { &quot;name&quot;: &quot;sensors&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:string&quot;, &quot;localType&quot;: &quot;string&quot; }, { &quot;name&quot;: &quot;countries&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:string&quot;, &quot;localType&quot;: &quot;string&quot; }, { &quot;name&quot;: &quot;cities&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:string&quot;, &quot;localType&quot;: &quot;string&quot; }, { &quot;name&quot;: &quot;description&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;xsd:string&quot;, &quot;localType&quot;: &quot;string&quot; }, { &quot;name&quot;: &quot;footprint&quot;, &quot;maxOccurs&quot;: 1, &quot;minOccurs&quot;: 0, &quot;nillable&quot;: true, &quot;type&quot;: &quot;gml:Polygon&quot;, &quot;localType&quot;: &quot;Polygon&quot; } ] } ] }   This is a description of a ORTHOPHOTO_BEST-OrthophotoBest feature that include all layer parts of the ORTHOPHOTO_BEST-OrthophotoBest catalog layer, it contains these properties. Each property has its own type, nillable flag value and min\\max occurs.  ","version":"Next","tagName":"h3"},{"title":"GetFeature​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#getfeature","content":" Now that we hold the structure of the ORTHOPHOTO_BEST-OrthophotoBest FeatureType we're able to query layer's layer parts features by a set of parameters using the GetFeature operation, let's see some examples:  ","version":"Next","tagName":"h2"},{"title":"Limit response feature count​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#limit-response-feature-count","content":" let's retrieve 2 of layer parts for provided featureType ORTHOPHOTO_BEST-OrthophotoBest, that include actually total of 4 features using GET request:  &lt;LAYER_PARTS_QUERY_SERVICE_URL&gt;/wfs? service=wfs&amp; version=2.0.0&amp; request=GetFeature&amp; count=2&amp; typeName=ORTHOPHOTO_BEST-OrthophotoBest&amp; outputFormat=application/json   Response { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;ORTHOPHOTO_BEST-OrthophotoBest.30210f5d-ba98-480f-b13a-01705890eb8f&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ -180, 90 ], [ 180, 90 ], [ 180, -90 ], [ -180, -90 ], [ -180, 90 ] ], [ [ 34.2117, 31.4159 ], [ 34.2117, 31.2279 ], [ 34.4294, 31.2279 ], [ 34.4294, 31.4159 ], [ 34.2117, 31.4159 ] ], [ [ 34.6064, 31.6234 ], [ 34.3887, 31.6234 ], [ 34.3887, 31.4354 ], [ 34.6064, 31.4354 ], [ 34.6064, 31.6234 ] ], [ [ 35.0607, 32.1202 ], [ 35.0607, 31.9323 ], [ 35.2784, 31.9323 ], [ 35.2784, 32.1202 ], [ 35.0607, 32.1202 ] ], [ [ 35.1511, 32.1381 ], [ 35.3664, 32.1381 ], [ 35.3664, 32.3249 ], [ 35.1511, 32.3249 ], [ 35.1511, 32.1381 ] ], [ [ 35.6989, 33.7644 ], [ 35.6989, 33.5765 ], [ 35.9166, 33.5765 ], [ 35.9166, 33.7644 ], [ 35.6989, 33.7644 ] ], [ [ 35.7645, 33.9586 ], [ 35.7645, 33.7706 ], [ 35.9822, 33.7706 ], [ 35.9822, 33.9586 ], [ 35.7645, 33.9586 ] ] ] }, &quot;geometry_name&quot;: &quot;footprint&quot;, &quot;properties&quot;: { &quot;id&quot;: &quot;30210f5d-ba98-480f-b13a-01705890eb8f&quot;, &quot;catalogId&quot;: &quot;a1b6dd1c-c77c-42e6-a00a-306b67bcdebf&quot;, &quot;productId&quot;: &quot;ORTHOPHOTO_BEST&quot;, &quot;productType&quot;: &quot;OrthophotoBest&quot;, &quot;sourceId&quot;: &quot;BlueMarble&quot;, &quot;sourceName&quot;: &quot;O_BlueMarble_rgb_2km&quot;, &quot;productVersion&quot;: &quot;1.0&quot;, &quot;ingestionDateUtc&quot;: &quot;2024-09-15T12:27:40.974Z&quot;, &quot;imagingTimeBeginUtc&quot;: &quot;2001-01-01T05:00:00Z&quot;, &quot;imagingTimeEndUtc&quot;: &quot;2001-01-01T05:00:00Z&quot;, &quot;resolutionDegree&quot;: 0.02197265625, &quot;resolutionMeter&quot;: 2000, &quot;sourceResolutionMeter&quot;: 2500, &quot;horizontalAccuracyCe90&quot;: 2000, &quot;sensors&quot;: &quot;MAXAR&quot;, &quot;countries&quot;: &quot;ITALY&quot;, &quot;cities&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot; }, &quot;bbox&quot;: [ -180, -90, 180, 90 ] }, { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;ORTHOPHOTO_BEST-OrthophotoBest.d8017862-26a8-4747-a503-2096ffaf36ee&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 34.3887, 31.4354 ], [ 34.6064, 31.4354 ], [ 34.6064, 31.6234 ], [ 34.3887, 31.6234 ], [ 34.3887, 31.4354 ] ] ] }, &quot;geometry_name&quot;: &quot;footprint&quot;, &quot;properties&quot;: { &quot;id&quot;: &quot;d8017862-26a8-4747-a503-2096ffaf36ee&quot;, &quot;catalogId&quot;: &quot;a1b6dd1c-c77c-42e6-a00a-306b67bcdebf&quot;, &quot;productId&quot;: &quot;ORTHOPHOTO_BEST&quot;, &quot;productType&quot;: &quot;OrthophotoBest&quot;, &quot;sourceId&quot;: &quot;MAS_6_ORT_247568-26.0&quot;, &quot;sourceName&quot;: &quot;O_aza_w84geo_Tiff_10cm&quot;, &quot;productVersion&quot;: &quot;2.0&quot;, &quot;ingestionDateUtc&quot;: &quot;2024-09-15T12:27:40.974Z&quot;, &quot;imagingTimeBeginUtc&quot;: &quot;2022-08-20T23:08:10Z&quot;, &quot;imagingTimeEndUtc&quot;: &quot;2022-08-20T23:08:10Z&quot;, &quot;resolutionDegree&quot;: 0.00000536441802978516, &quot;resolutionMeter&quot;: 0.6, &quot;sourceResolutionMeter&quot;: 0.1, &quot;horizontalAccuracyCe90&quot;: 1.5, &quot;sensors&quot;: &quot;OTHER&quot;, &quot;countries&quot;: &quot;ICELAND&quot;, &quot;cities&quot;: &quot;&quot;, &quot;description&quot;: &quot;some description&quot; }, &quot;bbox&quot;: [ 34.3887, 31.4354, 34.6064, 31.6234 ] } ], &quot;totalFeatures&quot;: 7, &quot;numberMatched&quot;: 7, &quot;numberReturned&quot;: 2, &quot;timeStamp&quot;: &quot;2024-11-12T11:28:53.799Z&quot;, &quot;crs&quot;: { &quot;type&quot;: &quot;name&quot;, &quot;properties&quot;: { &quot;name&quot;: &quot;urn:ogc:def:crs:EPSG::4326&quot; } }, &quot;bbox&quot;: [ -180, -90, 180, 90 ] }   ","version":"Next","tagName":"h3"},{"title":"Pagination​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#pagination","content":" let's get only part of the feature, using count to mention the amount for paging, and startIndex as the offset  We'll invoke a POST GetFeature request  &lt;LAYER_PARTS_QUERY_SERVICE_URL&gt;/wfs   with the following body:  &lt;wfs:GetFeature service=&quot;WFS&quot; version=&quot;2.0.0&quot; xmlns:wfs=&quot;http://www.opengis.net/wfs/2.0&quot; xmlns:fes=&quot;http://www.opengis.net/fes/2.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd&quot; count=&quot;4&quot; startIndex=&quot;3&quot; outputFormat=&quot;application/json&quot;&gt; &lt;wfs:Query typeNames=&quot;layer_parts:ORTHOPHOTO_BEST-OrthophotoBest&quot;&gt; &lt;fes:Filter&gt; &lt;fes:PropertyIsEqualTo&gt; &lt;fes:ValueReference&gt;productId&lt;/fes:ValueReference&gt; &lt;fes:Literal&gt;ORTHOPHOTO_BEST&lt;/fes:Literal&gt; &lt;/fes:PropertyIsEqualTo&gt; &lt;/fes:Filter&gt; &lt;/wfs:Query&gt; &lt;/wfs:GetFeature&gt;   Response { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;ORTHOPHOTO_BEST-OrthophotoBest.ce2c1c30-6f0f-46cf-a2d1-b14b52088ad0&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 35.3664, 32.1381 ], [ 35.1511, 32.1381 ], [ 35.1511, 32.3249 ], [ 35.3664, 32.3249 ], [ 35.3664, 32.1381 ] ] ] }, &quot;geometry_name&quot;: &quot;footprint&quot;, &quot;properties&quot;: { &quot;id&quot;: &quot;ce2c1c30-6f0f-46cf-a2d1-b14b52088ad0&quot;, &quot;catalogId&quot;: &quot;a1b6dd1c-c77c-42e6-a00a-306b67bcdebf&quot;, &quot;productId&quot;: &quot;ORTHOPHOTO_BEST&quot;, &quot;productType&quot;: &quot;OrthophotoBest&quot;, &quot;sourceId&quot;: &quot;MAS_5_ORT_240115-11.1&quot;, &quot;sourceName&quot;: &quot;O_ayosh_w84geo_Apr17-Jun22_gpkg_0.07&quot;, &quot;productVersion&quot;: &quot;4.0&quot;, &quot;ingestionDateUtc&quot;: &quot;2024-09-15T12:27:40.974Z&quot;, &quot;imagingTimeBeginUtc&quot;: &quot;2021-06-11T02:00:00Z&quot;, &quot;imagingTimeEndUtc&quot;: &quot;2021-06-11T02:00:00Z&quot;, &quot;resolutionDegree&quot;: 0.00000536441802978516, &quot;resolutionMeter&quot;: 0.7, &quot;sourceResolutionMeter&quot;: 0.07, &quot;horizontalAccuracyCe90&quot;: 4, &quot;sensors&quot;: &quot;OTHER&quot;, &quot;countries&quot;: &quot;&quot;, &quot;cities&quot;: &quot;&quot;, &quot;description&quot;: &quot;some description&quot; }, &quot;bbox&quot;: [ 35.1511, 32.1381, 35.3664, 32.3249 ] } ], &quot;totalFeatures&quot;: 7, &quot;numberMatched&quot;: 7, &quot;numberReturned&quot;: 1, &quot;timeStamp&quot;: &quot;2024-11-12T11:39:18.579Z&quot;, &quot;links&quot;: [ { &quot;title&quot;: &quot;previous page&quot;, &quot;type&quot;: &quot;application/json&quot;, &quot;rel&quot;: &quot;previous&quot;, &quot;href&quot;: &quot;https://layer-parts.mapcolonies.net/api/raster/v1/wfs?FILTER=%28%3Cfes%3AFilter%20xmlns%3Axs%3D%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%22%20xmlns%3Afes%3D%22http%3A%2F%2Fwww.opengis.net%2Ffes%2F2.0%22%20xmlns%3Agml%3D%22http%3A%2F%2Fwww.opengis.net%2Fgml%2F3.2%22%3E%3Cfes%3APropertyIsEqualTo%20matchAction%3D%22Any%22%20matchCase%3D%22true%22%3E%3Cfes%3AValueReference%3EproductId%3C%2Ffes%3AValueReference%3E%3Cfes%3ALiteral%3EORTHOPHOTO_BEST%3C%2Ffes%3ALiteral%3E%3C%2Ffes%3APropertyIsEqualTo%3E%3C%2Ffes%3AFilter%3E%29&amp;REQUEST=GetFeature&amp;RESULTTYPE=RESULTS&amp;OUTPUTFORMAT=application%2Fjson&amp;VERSION=2.0.0&amp;TYPENAMES=%28layer_parts%3AORTHOPHOTO_BEST-OrthophotoBest%29&amp;SERVICE=WFS&amp;COUNT=3&amp;STARTINDEX=0&quot; } ], &quot;crs&quot;: { &quot;type&quot;: &quot;name&quot;, &quot;properties&quot;: { &quot;name&quot;: &quot;urn:ogc:def:crs:EPSG::4326&quot; } }, &quot;bbox&quot;: [ 35.1511, 32.1381, 35.3664, 32.3249 ] }   ","version":"Next","tagName":"h3"},{"title":"Sorting​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#sorting","content":" To get layer's layer parts features sorted by some property such as productVersion we can invoke the following GET request.  &lt;LAYER_PARTS_QUERY_SERVICE_URL&gt;/wfs? service=wfs&amp; version=2.0.0&amp; request=GetFeature&amp; typeNames=ORTHOPHOTO_BEST-OrthophotoBest&amp; sortBy=productVersion&amp; outputFormat=application/json   Response { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;ORTHOPHOTO_BEST-OrthophotoBest.30210f5d-ba98-480f-b13a-01705890eb8f&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ -180, 90 ], [ 180, 90 ], [ 180, -90 ], [ -180, -90 ], [ -180, 90 ] ], [ [ 34.2117, 31.4159 ], [ 34.2117, 31.2279 ], [ 34.4294, 31.2279 ], [ 34.4294, 31.4159 ], [ 34.2117, 31.4159 ] ], [ [ 34.6064, 31.6234 ], [ 34.3887, 31.6234 ], [ 34.3887, 31.4354 ], [ 34.6064, 31.4354 ], [ 34.6064, 31.6234 ] ], [ [ 35.0607, 32.1202 ], [ 35.0607, 31.9323 ], [ 35.2784, 31.9323 ], [ 35.2784, 32.1202 ], [ 35.0607, 32.1202 ] ], [ [ 35.1511, 32.1381 ], [ 35.3664, 32.1381 ], [ 35.3664, 32.3249 ], [ 35.1511, 32.3249 ], [ 35.1511, 32.1381 ] ], [ [ 35.6989, 33.7644 ], [ 35.6989, 33.5765 ], [ 35.9166, 33.5765 ], [ 35.9166, 33.7644 ], [ 35.6989, 33.7644 ] ], [ [ 35.7645, 33.9586 ], [ 35.7645, 33.7706 ], [ 35.9822, 33.7706 ], [ 35.9822, 33.9586 ], [ 35.7645, 33.9586 ] ] ] }, &quot;geometry_name&quot;: &quot;footprint&quot;, &quot;properties&quot;: { &quot;id&quot;: &quot;30210f5d-ba98-480f-b13a-01705890eb8f&quot;, &quot;catalogId&quot;: &quot;a1b6dd1c-c77c-42e6-a00a-306b67bcdebf&quot;, &quot;productId&quot;: &quot;ORTHOPHOTO_BEST&quot;, &quot;productType&quot;: &quot;OrthophotoBest&quot;, &quot;sourceId&quot;: &quot;BlueMarble&quot;, &quot;sourceName&quot;: &quot;O_BlueMarble_rgb_2km&quot;, &quot;productVersion&quot;: &quot;1.0&quot;, &quot;ingestionDateUtc&quot;: &quot;2024-09-15T12:27:40.974Z&quot;, &quot;imagingTimeBeginUtc&quot;: &quot;2001-01-01T05:00:00Z&quot;, &quot;imagingTimeEndUtc&quot;: &quot;2001-01-01T05:00:00Z&quot;, &quot;resolutionDegree&quot;: 0.02197265625, &quot;resolutionMeter&quot;: 2000, &quot;sourceResolutionMeter&quot;: 2500, &quot;horizontalAccuracyCe90&quot;: 2000, &quot;sensors&quot;: &quot;MAXAR&quot;, &quot;countries&quot;: &quot;MEXICO&quot;, &quot;cities&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot; }, &quot;bbox&quot;: [ -180, -90, 180, 90 ] }, { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;ORTHOPHOTO_BEST-OrthophotoBest.d8017862-26a8-4747-a503-2096ffaf36ee&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 34.3887, 31.4354 ], [ 34.6064, 31.4354 ], [ 34.6064, 31.6234 ], [ 34.3887, 31.6234 ], [ 34.3887, 31.4354 ] ] ] }, &quot;geometry_name&quot;: &quot;footprint&quot;, &quot;properties&quot;: { &quot;id&quot;: &quot;d8017862-26a8-4747-a503-2096ffaf36ee&quot;, &quot;catalogId&quot;: &quot;a1b6dd1c-c77c-42e6-a00a-306b67bcdebf&quot;, &quot;productId&quot;: &quot;ORTHOPHOTO_BEST&quot;, &quot;productType&quot;: &quot;OrthophotoBest&quot;, &quot;sourceId&quot;: &quot;MAS_6_ORT_247568-26.0&quot;, &quot;sourceName&quot;: &quot;O_aza_w84geo_Tiff_10cm&quot;, &quot;productVersion&quot;: &quot;2.0&quot;, &quot;ingestionDateUtc&quot;: &quot;2024-09-15T12:27:40.974Z&quot;, &quot;imagingTimeBeginUtc&quot;: &quot;2022-08-20T23:08:10Z&quot;, &quot;imagingTimeEndUtc&quot;: &quot;2022-08-20T23:08:10Z&quot;, &quot;resolutionDegree&quot;: 0.00000536441802978516, &quot;resolutionMeter&quot;: 0.6, &quot;sourceResolutionMeter&quot;: 0.1, &quot;horizontalAccuracyCe90&quot;: 1.5, &quot;sensors&quot;: &quot;OTHER&quot;, &quot;countries&quot;: &quot;POLAND&quot;, &quot;cities&quot;: &quot;&quot;, &quot;description&quot;: &quot;some description&quot; }, &quot;bbox&quot;: [ 34.3887, 31.4354, 34.6064, 31.6234 ] }, { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;ORTHOPHOTO_BEST-OrthophotoBest.ba8a77d6-e022-4922-9c87-0098e84f9bc9&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 34.2117, 31.2279 ], [ 34.4294, 31.2279 ], [ 34.4294, 31.4159 ], [ 34.2117, 31.4159 ], [ 34.2117, 31.2279 ] ] ] }, &quot;geometry_name&quot;: &quot;footprint&quot;, &quot;properties&quot;: { &quot;id&quot;: &quot;ba8a77d6-e022-4922-9c87-0098e84f9bc9&quot;, &quot;catalogId&quot;: &quot;a1b6dd1c-c77c-42e6-a00a-306b67bcdebf&quot;, &quot;productId&quot;: &quot;ORTHOPHOTO_BEST&quot;, &quot;productType&quot;: &quot;OrthophotoBest&quot;, &quot;sourceId&quot;: &quot;MAS_6_ORT_247568-26.0&quot;, &quot;sourceName&quot;: &quot;O_aza_w84geo_Tiff_10cm&quot;, &quot;productVersion&quot;: &quot;3.0&quot;, &quot;ingestionDateUtc&quot;: &quot;2024-09-15T12:27:40.974Z&quot;, &quot;imagingTimeBeginUtc&quot;: &quot;2021-05-15T23:09:00Z&quot;, &quot;imagingTimeEndUtc&quot;: &quot;2021-05-15T23:09:00Z&quot;, &quot;resolutionDegree&quot;: 0.00000536441802978516, &quot;resolutionMeter&quot;: 0.6, &quot;sourceResolutionMeter&quot;: 0.1, &quot;horizontalAccuracyCe90&quot;: 0.6, &quot;sensors&quot;: &quot;OTHER&quot;, &quot;countries&quot;: &quot;FRANCE, SPAIN&quot;, &quot;cities&quot;: &quot;&quot;, &quot;description&quot;: &quot;some description&quot; }, &quot;bbox&quot;: [ 34.2117, 31.2279, 34.4294, 31.4159 ] }, { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;ORTHOPHOTO_BEST-OrthophotoBest.ce2c1c30-6f0f-46cf-a2d1-b14b52088ad0&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 35.3664, 32.1381 ], [ 35.1511, 32.1381 ], [ 35.1511, 32.3249 ], [ 35.3664, 32.3249 ], [ 35.3664, 32.1381 ] ] ] }, &quot;geometry_name&quot;: &quot;footprint&quot;, &quot;properties&quot;: { &quot;id&quot;: &quot;ce2c1c30-6f0f-46cf-a2d1-b14b52088ad0&quot;, &quot;catalogId&quot;: &quot;a1b6dd1c-c77c-42e6-a00a-306b67bcdebf&quot;, &quot;productId&quot;: &quot;ORTHOPHOTO_BEST&quot;, &quot;productType&quot;: &quot;OrthophotoBest&quot;, &quot;sourceId&quot;: &quot;MAS_5_ORT_240115-11.1&quot;, &quot;sourceName&quot;: &quot;O_ayosh_w84geo_Apr17-Jun22_gpkg_0.07&quot;, &quot;productVersion&quot;: &quot;4.0&quot;, &quot;ingestionDateUtc&quot;: &quot;2024-09-15T12:27:40.974Z&quot;, &quot;imagingTimeBeginUtc&quot;: &quot;2021-06-11T02:00:00Z&quot;, &quot;imagingTimeEndUtc&quot;: &quot;2021-06-11T02:00:00Z&quot;, &quot;resolutionDegree&quot;: 0.00000536441802978516, &quot;resolutionMeter&quot;: 0.7, &quot;sourceResolutionMeter&quot;: 0.07, &quot;horizontalAccuracyCe90&quot;: 4, &quot;sensors&quot;: &quot;OTHER&quot;, &quot;countries&quot;: &quot;&quot;, &quot;cities&quot;: &quot;&quot;, &quot;description&quot;: &quot;some description&quot; }, &quot;bbox&quot;: [ 35.1511, 32.1381, 35.3664, 32.3249 ] }, { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;ORTHOPHOTO_BEST-OrthophotoBest.791358a5-a19b-4164-80cb-4408403f1ab2&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 35.2784, 31.9323 ], [ 35.0607, 31.9323 ], [ 35.0607, 32.1202 ], [ 35.2784, 32.1202 ], [ 35.2784, 31.9323 ] ] ] }, &quot;geometry_name&quot;: &quot;footprint&quot;, &quot;properties&quot;: { &quot;id&quot;: &quot;791358a5-a19b-4164-80cb-4408403f1ab2&quot;, &quot;catalogId&quot;: &quot;a1b6dd1c-c77c-42e6-a00a-306b67bcdebf&quot;, &quot;productId&quot;: &quot;ORTHOPHOTO_BEST&quot;, &quot;productType&quot;: &quot;OrthophotoBest&quot;, &quot;sourceId&quot;: &quot;MAS_5_ORT_240115-11.2&quot;, &quot;sourceName&quot;: &quot;O_ayosh_w84geo_Apr17-Jun22_gpkg_0.08&quot;, &quot;productVersion&quot;: &quot;5.0&quot;, &quot;ingestionDateUtc&quot;: &quot;2024-09-15T12:27:40.974Z&quot;, &quot;imagingTimeBeginUtc&quot;: &quot;2021-05-12T04:00:00Z&quot;, &quot;imagingTimeEndUtc&quot;: &quot;2021-05-12T04:00:00Z&quot;, &quot;resolutionDegree&quot;: 0.00000536441802978516, &quot;resolutionMeter&quot;: 0.7, &quot;sourceResolutionMeter&quot;: 0.07, &quot;horizontalAccuracyCe90&quot;: 4, &quot;sensors&quot;: &quot;OTHER&quot;, &quot;countries&quot;: &quot;&quot;, &quot;cities&quot;: &quot;&quot;, &quot;description&quot;: &quot;some description&quot; }, &quot;bbox&quot;: [ 35.0607, 31.9323, 35.2784, 32.1202 ] }, { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;ORTHOPHOTO_BEST-OrthophotoBest.c87a6448-c9b8-42e5-8b94-5d988c1732be&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 35.9822, 33.7706 ], [ 35.7645, 33.7706 ], [ 35.7645, 33.9586 ], [ 35.9822, 33.9586 ], [ 35.9822, 33.7706 ] ] ] }, &quot;geometry_name&quot;: &quot;footprint&quot;, &quot;properties&quot;: { &quot;id&quot;: &quot;c87a6448-c9b8-42e5-8b94-5d988c1732be&quot;, &quot;catalogId&quot;: &quot;a1b6dd1c-c77c-42e6-a00a-306b67bcdebf&quot;, &quot;productId&quot;: &quot;ORTHOPHOTO_BEST&quot;, &quot;productType&quot;: &quot;OrthophotoBest&quot;, &quot;sourceId&quot;: &quot;MAS_6_ORT_247268-6.0&quot;, &quot;sourceName&quot;: &quot;O_lebnon_w84geo_rgb_Tiff_30cm&quot;, &quot;productVersion&quot;: &quot;6.0&quot;, &quot;ingestionDateUtc&quot;: &quot;2024-09-15T12:27:40.974Z&quot;, &quot;imagingTimeBeginUtc&quot;: &quot;2021-07-11T04:00:00Z&quot;, &quot;imagingTimeEndUtc&quot;: &quot;2021-07-11T04:00:00Z&quot;, &quot;resolutionDegree&quot;: 0.00000536441802978516, &quot;resolutionMeter&quot;: 0.6, &quot;sourceResolutionMeter&quot;: 0.3, &quot;horizontalAccuracyCe90&quot;: 6, &quot;sensors&quot;: &quot;WORLDVIEW2&quot;, &quot;countries&quot;: &quot;LITHUANIA&quot;, &quot;cities&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot; }, &quot;bbox&quot;: [ 35.7645, 33.7706, 35.9822, 33.9586 ] }, { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;ORTHOPHOTO_BEST-OrthophotoBest.d1b24130-1b9c-4daa-aa23-093bb58b0814&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 35.9166, 33.5765 ], [ 35.6989, 33.5765 ], [ 35.6989, 33.7644 ], [ 35.9166, 33.7644 ], [ 35.9166, 33.5765 ] ] ] }, &quot;geometry_name&quot;: &quot;footprint&quot;, &quot;properties&quot;: { &quot;id&quot;: &quot;d1b24130-1b9c-4daa-aa23-093bb58b0814&quot;, &quot;catalogId&quot;: &quot;a1b6dd1c-c77c-42e6-a00a-306b67bcdebf&quot;, &quot;productId&quot;: &quot;ORTHOPHOTO_BEST&quot;, &quot;productType&quot;: &quot;OrthophotoBest&quot;, &quot;sourceId&quot;: &quot;MAS_6_ORT_247268-6.0&quot;, &quot;sourceName&quot;: &quot;O_lebnon_w84geo_rgb_Tiff_30cm&quot;, &quot;productVersion&quot;: &quot;7.0&quot;, &quot;ingestionDateUtc&quot;: &quot;2024-09-15T12:27:40.974Z&quot;, &quot;imagingTimeBeginUtc&quot;: &quot;2021-09-01T04:00:00Z&quot;, &quot;imagingTimeEndUtc&quot;: &quot;2021-09-01T04:00:00Z&quot;, &quot;resolutionDegree&quot;: 0.00000536441802978516, &quot;resolutionMeter&quot;: 0.6, &quot;sourceResolutionMeter&quot;: 0.03, &quot;horizontalAccuracyCe90&quot;: 8.5, &quot;sensors&quot;: &quot;OTHER&quot;, &quot;countries&quot;: &quot;GREECE&quot;, &quot;cities&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot; }, &quot;bbox&quot;: [ 35.6989, 33.5765, 35.9166, 33.7644 ] } ], &quot;totalFeatures&quot;: 7, &quot;numberMatched&quot;: 7, &quot;numberReturned&quot;: 7, &quot;timeStamp&quot;: &quot;2024-11-12T11:43:00.892Z&quot;, &quot;crs&quot;: { &quot;type&quot;: &quot;name&quot;, &quot;properties&quot;: { &quot;name&quot;: &quot;urn:ogc:def:crs:EPSG::4326&quot; } }, &quot;bbox&quot;: [ -180, -90, 180, 90 ] }   ","version":"Next","tagName":"h3"},{"title":"Query by geographical limits​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#query-by-geographical-limits","content":" For more complex criteria such as a set of multiple parameters or geographical intersections we should invoke a POST GetFetures request consisting the filter as a XML body.  let's look for all the layer parts features that intersect in a polygon, one of the properties of a layer part feature is it's footprint describing the layer part geography, we'll look by it by setting it as the request ValueReference. We can specify the srsName which is the coordinate reference system of the returned features in our case EPSG:4326. the polygon is a list of longitude-latitude pair coordinates.  We'll invoke a POST GetFeature request with the following body:  &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt; &lt;wfs:GetFeature xmlns:wfs=&quot;http://www.opengis.net/wfs/2.0&quot; xmlns:fes=&quot;http://www.opengis.net/fes/2.0&quot; xmlns:gml=&quot;http://www.opengis.net/gml/3.2&quot; xmlns:sf=&quot;http://www.openplans.org/spearfish&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; service=&quot;WFS&quot; version=&quot;2.0.0&quot; count=&quot;2&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd http://www.opengis.net/gml/3.2 http://schemas.opengis.net/gml/3.2.1/gml.xsd&quot; outputFormat=&quot;application/json&quot;&gt; &lt;wfs:Query typeNames=&quot;layer_parts:ORTHOPHOTO_BEST-OrthophotoBest&quot;&gt; &lt;fes:Filter&gt; &lt;fes:Intersects&gt; &lt;fes:ValueReference&gt;footprint&lt;/fes:ValueReference&gt; &lt;gml:Polygon gml:id=&quot;polygon.1&quot; srsName=&quot;http://www.opengis.net/gml/srs/epsg.xml#4326&quot;&gt; &lt;gml:exterior&gt; &lt;gml:LinearRing&gt; &lt;gml:posList&gt; 35.34244 32.2543 34.92215 32.2543 34.9221 31.8823 35.34244 31.8823 35.34244 32.2543 &lt;/gml:posList&gt; &lt;/gml:LinearRing&gt; &lt;/gml:exterior&gt; &lt;/gml:Polygon&gt; &lt;/fes:Intersects&gt; &lt;/fes:Filter&gt; &lt;/wfs:Query&gt; &lt;/wfs:GetFeature&gt;   Response { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;ORTHOPHOTO_BEST-OrthophotoBest.30210f5d-ba98-480f-b13a-01705890eb8f&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ -180, 90 ], [ 180, 90 ], [ 180, -90 ], [ -180, -90 ], [ -180, 90 ] ], [ [ 34.2117, 31.4159 ], [ 34.2117, 31.2279 ], [ 34.4294, 31.2279 ], [ 34.4294, 31.4159 ], [ 34.2117, 31.4159 ] ], [ [ 34.6064, 31.6234 ], [ 34.3887, 31.6234 ], [ 34.3887, 31.4354 ], [ 34.6064, 31.4354 ], [ 34.6064, 31.6234 ] ], [ [ 35.0607, 32.1202 ], [ 35.0607, 31.9323 ], [ 35.2784, 31.9323 ], [ 35.2784, 32.1202 ], [ 35.0607, 32.1202 ] ], [ [ 35.1511, 32.1381 ], [ 35.3664, 32.1381 ], [ 35.3664, 32.3249 ], [ 35.1511, 32.3249 ], [ 35.1511, 32.1381 ] ], [ [ 35.6989, 33.7644 ], [ 35.6989, 33.5765 ], [ 35.9166, 33.5765 ], [ 35.9166, 33.7644 ], [ 35.6989, 33.7644 ] ], [ [ 35.7645, 33.9586 ], [ 35.7645, 33.7706 ], [ 35.9822, 33.7706 ], [ 35.9822, 33.9586 ], [ 35.7645, 33.9586 ] ] ] }, &quot;geometry_name&quot;: &quot;footprint&quot;, &quot;properties&quot;: { &quot;id&quot;: &quot;30210f5d-ba98-480f-b13a-01705890eb8f&quot;, &quot;catalogId&quot;: &quot;a1b6dd1c-c77c-42e6-a00a-306b67bcdebf&quot;, &quot;productId&quot;: &quot;ORTHOPHOTO_BEST&quot;, &quot;productType&quot;: &quot;OrthophotoBest&quot;, &quot;sourceId&quot;: &quot;BlueMarble&quot;, &quot;sourceName&quot;: &quot;O_BlueMarble_rgb_2km&quot;, &quot;productVersion&quot;: &quot;1.0&quot;, &quot;ingestionDateUtc&quot;: &quot;2024-09-15T12:27:40.974Z&quot;, &quot;imagingTimeBeginUtc&quot;: &quot;2001-01-01T05:00:00Z&quot;, &quot;imagingTimeEndUtc&quot;: &quot;2001-01-01T05:00:00Z&quot;, &quot;resolutionDegree&quot;: 0.02197265625, &quot;resolutionMeter&quot;: 2000, &quot;sourceResolutionMeter&quot;: 2500, &quot;horizontalAccuracyCe90&quot;: 2000, &quot;sensors&quot;: &quot;MAXAR&quot;, &quot;countries&quot;: &quot;FRANCE&quot;, &quot;cities&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot; }, &quot;bbox&quot;: [ -180, -90, 180, 90 ] }, { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;ORTHOPHOTO_BEST-OrthophotoBest.ce2c1c30-6f0f-46cf-a2d1-b14b52088ad0&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 35.3664, 32.1381 ], [ 35.1511, 32.1381 ], [ 35.1511, 32.3249 ], [ 35.3664, 32.3249 ], [ 35.3664, 32.1381 ] ] ] }, &quot;geometry_name&quot;: &quot;footprint&quot;, &quot;properties&quot;: { &quot;id&quot;: &quot;ce2c1c30-6f0f-46cf-a2d1-b14b52088ad0&quot;, &quot;catalogId&quot;: &quot;a1b6dd1c-c77c-42e6-a00a-306b67bcdebf&quot;, &quot;productId&quot;: &quot;ORTHOPHOTO_BEST&quot;, &quot;productType&quot;: &quot;OrthophotoBest&quot;, &quot;sourceId&quot;: &quot;MAS_5_ORT_240115-11.1&quot;, &quot;sourceName&quot;: &quot;O_ayosh_w84geo_Apr17-Jun22_gpkg_0.07&quot;, &quot;productVersion&quot;: &quot;4.0&quot;, &quot;ingestionDateUtc&quot;: &quot;2024-09-15T12:27:40.974Z&quot;, &quot;imagingTimeBeginUtc&quot;: &quot;2021-06-11T02:00:00Z&quot;, &quot;imagingTimeEndUtc&quot;: &quot;2021-06-11T02:00:00Z&quot;, &quot;resolutionDegree&quot;: 0.00000536441802978516, &quot;resolutionMeter&quot;: 0.7, &quot;sourceResolutionMeter&quot;: 0.07, &quot;horizontalAccuracyCe90&quot;: 4, &quot;sensors&quot;: &quot;OTHER&quot;, &quot;countries&quot;: &quot;UNITED STATES&quot;, &quot;cities&quot;: &quot;&quot;, &quot;description&quot;: &quot;some description&quot; }, &quot;bbox&quot;: [ 35.1511, 32.1381, 35.3664, 32.3249 ] } ], &quot;totalFeatures&quot;: 3, &quot;numberMatched&quot;: 3, &quot;numberReturned&quot;: 2, &quot;timeStamp&quot;: &quot;2024-11-12T11:52:18.694Z&quot;, &quot;crs&quot;: { &quot;type&quot;: &quot;name&quot;, &quot;properties&quot;: { &quot;name&quot;: &quot;urn:ogc:def:crs:EPSG::4326&quot; } }, &quot;bbox&quot;: [ -180, -90, 180, 90 ] }   ","version":"Next","tagName":"h3"},{"title":"Combining multiple filters​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#combining-multiple-filters","content":" if we'd like to filter parts by a set of multiple parameters we'll achieve that by a GetFeature POST request. Say we would like to retrieve only the layer parts who's resolutionDegree is greater than 0.060 and their sensors type is other.  We'll invoke a request with the following body:  Query with 2 filters &lt;wfs:GetFeature service=&quot;WFS&quot; version=&quot;2.0.0&quot; xmlns:wfs=&quot;http://www.opengis.net/wfs/2.0&quot; xmlns:fes=&quot;http://www.opengis.net/fes/2.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd&quot; count=&quot;4&quot; outputFormat=&quot;application/json&quot;&gt; &lt;wfs:Query typeNames=&quot;layer_parts:ORTHOPHOTO_BEST-OrthophotoBest&quot;&gt; &lt;fes:Filter&gt; &lt;And&gt; &lt;fes:PropertyIsEqualTo&gt; &lt;fes:ValueReference&gt;sensors&lt;/fes:ValueReference&gt; &lt;fes:Literal&gt;OTHER&lt;/fes:Literal&gt; &lt;/fes:PropertyIsEqualTo&gt; &lt;fes:PropertyIsGreaterThan&gt; &lt;fes:ValueReference&gt;resolutionMeter&lt;/fes:ValueReference&gt; &lt;fes:Literal&gt;0.06&lt;/fes:Literal&gt; &lt;/fes:PropertyIsGreaterThan&gt; &lt;/And&gt; &lt;/fes:Filter&gt; &lt;/wfs:Query&gt; &lt;/wfs:GetFeature&gt;   Response { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;ORTHOPHOTO_BEST-OrthophotoBest.ce2c1c30-6f0f-46cf-a2d1-b14b52088ad0&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 35.3664, 32.1381 ], [ 35.1511, 32.1381 ], [ 35.1511, 32.3249 ], [ 35.3664, 32.3249 ], [ 35.3664, 32.1381 ] ] ] }, &quot;geometry_name&quot;: &quot;footprint&quot;, &quot;properties&quot;: { &quot;id&quot;: &quot;ce2c1c30-6f0f-46cf-a2d1-b14b52088ad0&quot;, &quot;catalogId&quot;: &quot;a1b6dd1c-c77c-42e6-a00a-306b67bcdebf&quot;, &quot;productId&quot;: &quot;ORTHOPHOTO_BEST&quot;, &quot;productType&quot;: &quot;OrthophotoBest&quot;, &quot;sourceId&quot;: &quot;MAS_5_ORT_240115-11.1&quot;, &quot;sourceName&quot;: &quot;O_ayosh_w84geo_Apr17-Jun22_gpkg_0.07&quot;, &quot;productVersion&quot;: &quot;4.0&quot;, &quot;ingestionDateUtc&quot;: &quot;2024-09-15T12:27:40.974Z&quot;, &quot;imagingTimeBeginUtc&quot;: &quot;2021-06-11T02:00:00Z&quot;, &quot;imagingTimeEndUtc&quot;: &quot;2021-06-11T02:00:00Z&quot;, &quot;resolutionDegree&quot;: 0.00000536441802978516, &quot;resolutionMeter&quot;: 0.7, &quot;sourceResolutionMeter&quot;: 0.07, &quot;horizontalAccuracyCe90&quot;: 4, &quot;sensors&quot;: &quot;OTHER&quot;, &quot;countries&quot;: &quot;&quot;, &quot;cities&quot;: &quot;&quot;, &quot;description&quot;: &quot;some description&quot; }, &quot;bbox&quot;: [ 35.1511, 32.1381, 35.3664, 32.3249 ] }, { &quot;type&quot;: &quot;Feature&quot;, &quot;id&quot;: &quot;ORTHOPHOTO_BEST-OrthophotoBest.791358a5-a19b-4164-80cb-4408403f1ab2&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 35.2784, 31.9323 ], [ 35.0607, 31.9323 ], [ 35.0607, 32.1202 ], [ 35.2784, 32.1202 ], [ 35.2784, 31.9323 ] ] ] }, &quot;geometry_name&quot;: &quot;footprint&quot;, &quot;properties&quot;: { &quot;id&quot;: &quot;791358a5-a19b-4164-80cb-4408403f1ab2&quot;, &quot;catalogId&quot;: &quot;a1b6dd1c-c77c-42e6-a00a-306b67bcdebf&quot;, &quot;productId&quot;: &quot;ORTHOPHOTO_BEST&quot;, &quot;productType&quot;: &quot;OrthophotoBest&quot;, &quot;sourceId&quot;: &quot;MAS_5_ORT_240115-11.2&quot;, &quot;sourceName&quot;: &quot;O_ayosh_w84geo_Apr17-Jun22_gpkg_0.08&quot;, &quot;productVersion&quot;: &quot;5.0&quot;, &quot;ingestionDateUtc&quot;: &quot;2024-09-15T12:27:40.974Z&quot;, &quot;imagingTimeBeginUtc&quot;: &quot;2021-05-12T04:00:00Z&quot;, &quot;imagingTimeEndUtc&quot;: &quot;2021-05-12T04:00:00Z&quot;, &quot;resolutionDegree&quot;: 0.00000536441802978516, &quot;resolutionMeter&quot;: 0.7, &quot;sourceResolutionMeter&quot;: 0.07, &quot;horizontalAccuracyCe90&quot;: 4, &quot;sensors&quot;: &quot;OTHER&quot;, &quot;countries&quot;: &quot;&quot;, &quot;cities&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot; }, &quot;bbox&quot;: [ 35.0607, 31.9323, 35.2784, 32.1202 ] } ], &quot;totalFeatures&quot;: 2, &quot;numberMatched&quot;: 2, &quot;numberReturned&quot;: 2, &quot;timeStamp&quot;: &quot;2024-11-12T11:54:38.023Z&quot;, &quot;crs&quot;: { &quot;type&quot;: &quot;name&quot;, &quot;properties&quot;: { &quot;name&quot;: &quot;urn:ogc:def:crs:EPSG::4326&quot; } }, &quot;bbox&quot;: [ 35.0607, 31.9323, 35.3664, 32.3249 ] }   ","version":"Next","tagName":"h3"},{"title":"Get feature count​","type":1,"pageTitle":"Layer Parts Service 🧩","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/Raster/services/LayerParts/layer-parts#get-feature-count","content":" By default, resultType is set to results. If a user wants to get the total number of parts in a feature, resultType=hits should be used.  numberMatched: Indicates how many hits (total parts amount) there are.next: Provides the link to fetch the response itself.  Pagination The link does not include pagination parameters and will return all results for the layer. This should be avoided and either manually add the count parameter or make a separate request with pagination.  Here’s an example of GET request:  &lt;LAYER_PARTS_QUERY_SERVICE_URL&gt;/wfs? service=wfs&amp; version=2.0.0&amp; request=GetFeature&amp; typeNames=ORTHOPHOTO_BEST-OrthophotoBest&amp; resultType=hits   Response &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;wfs:FeatureCollection xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:fes=&quot;http://www.opengis.net/fes/2.0&quot; xmlns:wfs=&quot;http://www.opengis.net/wfs/2.0&quot; xmlns:gml=&quot;http://www.opengis.net/gml/3.2&quot; xmlns:ows=&quot;http://www.opengis.net/ows/1.1&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; next=&quot;https://layer-parts-int/api/raster/v1/wfs?RESULTTYPE=results&amp;REQUEST=GetFeature&amp;OUTPUTFORMAT=application%2Fjson&amp;VERSION=2.0.0&amp;TYPENAMES=ORTHOPHOTO_BEST-OrthophotoBest&amp;SERVICE=wfs&amp;STARTINDEX=0&quot; numberMatched=&quot;21&quot; numberReturned=&quot;0&quot; timeStamp=&quot;2025-01-27T15:27:43.495Z&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd&quot;/&gt;  ","version":"Next","tagName":"h3"},{"title":"Geocoding 📍","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/info","content":"","keywords":"","version":"Next"},{"title":"TL;DR​","type":1,"pageTitle":"Geocoding 📍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/info#tldr","content":" Search for places, control tiles, routes and items. Ability to convert from WGS 84 Coordinates to Control Tile or US Army MGRS.  ","version":"Next","tagName":"h2"},{"title":"Terminology​","type":1,"pageTitle":"Geocoding 📍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/info#terminology","content":" ","version":"Next","tagName":"h2"},{"title":"What is the Control layer?​","type":1,"pageTitle":"Geocoding 📍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/info#what-is-the-control-layer","content":" MapColonies has its own Control Reference System. Like the US Army MGRS, we divided our user's area of interest to Tiles. Each tile is 10kmX10km and has Sub-Tiles which are 1kmX1km. Each tile has 100 sub-tiles. A tile's name is exactly 3-letters, while a Sub-Tile is a 2-digit number.   JSON Tile Response 👇 The following is a Tile search response. See these Control Tile search examples for more info. { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;query&quot;: { &quot;tile&quot;: &quot;RIT&quot;, &quot;disable_fuzziness&quot;: true, &quot;limit&quot;: 5 }, &quot;response&quot;: { &quot;results_count&quot;: 1, &quot;max_score&quot;: 2.0481892, &quot;match_latency_ms&quot;: 77 } }, &quot;bbox&quot;: [12.42879133518656, 41.84943698365008, 12.539507865186607, 41.94185043165008], &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ [ 12.539507865186607, 41.851751203650096 ], [ 12.536787075186538, 41.94185043165008 ], [ 12.42879133518656, 41.93952837265009 ], [ 12.431625055186686, 41.84943698365008 ], [ 12.539507865186607, 41.851751203650096] ] ], &quot;type&quot;: &quot;Polygon&quot; }, &quot;properties&quot;: { &quot;TILE_NAME&quot;: &quot;RIT&quot;, &quot;LAYER_NAME&quot;: &quot;CONTROL.TILES&quot;, &quot;TYPE&quot;: &quot;TILE&quot;, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;CONTROL.TILES&quot;, &quot;source&quot;: &quot;control_gil_v5_test&quot;, &quot;source_id&quot;: [] } ], &quot;names&quot;: { &quot;default&quot;: [ &quot;RIT&quot; ], &quot;display&quot;: &quot;Tile RIT&quot; }, &quot;score&quot;: 2.0481892 } } ] }   JSON Sub Tile Response 👇 The following is a Sub-Tile search response. See this Control Sub-Tile search example for more info. { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;query&quot;: { &quot;tile&quot;: &quot;RIT&quot;, &quot;sub_tile&quot;: &quot;65&quot;, &quot;disable_fuzziness&quot;: true, &quot;limit&quot;: 5 }, &quot;response&quot;: { &quot;results_count&quot;: 1, &quot;max_score&quot;: 3.588634, &quot;match_latency_ms&quot;: 5 } }, &quot;bbox&quot;: [12.429043189602453, 41.93031190061167, 12.439646505602468, 41.939432381611695], &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ [ 12.439530324602458, 41.93031190061167 ], [12.439646505602468, 41.9393328566117 ], [ 12.429158378602494, 41.939432381611695 ], [ 12.429043189602453, 41.930411390611695 ], [ 12.439530324602458, 41.93031190061167 ] ] ], &quot;type&quot;: &quot;Polygon&quot; }, &quot;properties&quot;: { &quot;SUB_TILE_ID&quot;: &quot;65&quot;, &quot;TILE_NAME&quot;: &quot;RIT&quot;, &quot;LAYER_NAME&quot;: &quot;CONTROL.SUB_TILES&quot;, &quot;TYPE&quot;: &quot;SUB_TILE&quot;, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;CONTROL.SUB_TILES&quot;, &quot;source&quot;: &quot;control_gil_v5_test&quot;, &quot;source_id&quot;: [] } ], &quot;names&quot;: { &quot;default&quot;: [ &quot;65&quot; ], &quot;display&quot;: &quot;Tile RIT Sub Tile 65&quot; }, &quot;score&quot;: 3.588634 } } ] }   ","version":"Next","tagName":"h3"},{"title":"Understanding the Control language​","type":1,"pageTitle":"Geocoding 📍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/info#understanding-the-control-language","content":" Routes are roads and streams. Each Route has Control Points. Control Points are points scattered on the route. They are usefull when an end-user reports his location on the route. It is used to &quot;pin-point&quot; the end-user's location. A route's name is a string (in any length). For main roads, the route's name will be unique. For minor roads the name might be reused in other areas of interest. Route's Control point is a 3-digit number.  JSON Route Response 👇 { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;query&quot;: { &quot;command_name&quot;: &quot;olimpiade&quot;, &quot;disable_fuzziness&quot;: false, &quot;limit&quot;: 5 }, &quot;response&quot;: { &quot;results_count&quot;: 1, &quot;max_score&quot;: 3.2834144, &quot;match_latency_ms&quot;: 16 } }, &quot;bbox&quot;: [12.472759211857749, 41.932073169074016, 12.475880836863752, 41.93239148035457], &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ 12.472759211857749, 41.932073169074016 ], [ 12.475880836863752, 41.93239148035457 ] ], &quot;type&quot;: &quot;LineString&quot; }, &quot;properties&quot;: { &quot;OBJECT_COMMAND_NAME&quot;: &quot;olimpiade&quot;, &quot;LAYER_NAME&quot;: &quot;CONTROL.ROUTES&quot;, &quot;ENTITY_HEB&quot;: &quot;route&quot;, &quot;TYPE&quot;: &quot;ROUTE&quot;, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;CONTROL.ROUTES&quot;, &quot;source&quot;: &quot;control_gil_v5_test&quot;, &quot;source_id&quot;: [] } ], &quot;names&quot;: { &quot;default&quot;: [ &quot;olimpiade&quot; ], &quot;display&quot;: &quot;Route olimpiade&quot; }, &quot;score&quot;: 3.2834144 } } ] }   Items are simply buildings or Control items in the field. An item's name is a 4-digit number. Notice that it is not unique and might be reused in different tiles! Though, it is unique in the current viewed Control Tile.   JSON Item Response 👇 { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;query&quot;: { &quot;command_name&quot;: &quot;1234&quot;, &quot;limit&quot;: 5, &quot;disable_fuzziness&quot;: true }, &quot;response&quot;: { &quot;results_count&quot;: 1, &quot;max_score&quot;: 2.664375, &quot;match_latency_ms&quot;: 5 } }, &quot;bbox&quot;: [12.432648028923637, 41.93189198298137, 12.43637599267521, 41.93386161853829], &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ [ 12.432792582620323, 41.9327692706986 ], [ 12.432648028923637, 41.93209008126263 ], [ 12.43295235249525, 41.93189198298137 ], [ 12.435105441764364, 41.93235609798671 ], [ 12.435516278586334, 41.93274663116725 ], [ 12.43637599267521, 41.93308056343986 ], [ 12.436026020567567, 41.93386161853829 ], [ 12.432792582620323, 41.9327692706986 ] ] ], &quot;type&quot;: &quot;Polygon&quot; }, &quot;properties&quot;: { &quot;OBJECT_COMMAND_NAME&quot;: &quot;1234&quot;, &quot;TILE_NAME&quot;: &quot;RIT&quot;, &quot;SUB_TILE_ID&quot;: &quot;37&quot;, &quot;LAYER_NAME&quot;: &quot;CONTROL.ITEMS&quot;, &quot;ENTITY_HEB&quot;: &quot;hotel&quot;, &quot;TYPE&quot;: &quot;ITEM&quot;, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;CONTROL.ITEMS&quot;, &quot;source&quot;: &quot;control_gil_v5_test&quot;, &quot;source_id&quot;: [] } ], &quot;names&quot;: { &quot;default&quot;: [ &quot;1234&quot; ], &quot;display&quot;: &quot;Item 1234&quot; }, &quot;score&quot;: 2.664375 } } ] }   ","version":"Next","tagName":"h3"},{"title":"Location Name Based Search:​","type":1,"pageTitle":"Geocoding 📍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/info#location-name-based-search","content":" We have created a location search engine. In the query parameter simply search for a place that you want to find. For example, if you search for White House, Washington DC you will get matching results for your query. You can also search for supported regions and sources in order to filter the results for a specific region or source (by default it will return all regions and sources).   JSON Route Response 👇 { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;query&quot;: { &quot;query&quot;: &quot;JFK Airport New York&quot;, &quot;disable_fuzziness&quot;: false, &quot;limit&quot;: 1 }, &quot;response&quot;: { &quot;results_count&quot;: 1, &quot;max_score&quot;: 2.2699702, &quot;match_latency_ms&quot;: 18, &quot;nlp_anlyser_latency_ms&quot;: 4, &quot;place_type_latency_ms&quot;: 1, &quot;hierarchies_latency_ms&quot;: 0, &quot;name&quot;: &quot;New York&quot;, &quot;place_types&quot;: [ &quot;transportation&quot; ], &quot;sub_place_types&quot;: [ &quot;port&quot; ], &quot;hierarchies&quot;: [] } }, &quot;bbox&quot;: [-73.82407909454082, 40.61908910045176, -73.7467963777506, 40.665205399216404], &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ -73.81278266814672, 40.66039916690434 ], [ -73.8177430790069, 40.66160065836647 ], [ -73.82178645734075, 40.66043068890016 ], [ -73.82341214553732, 40.658185554886586 ], [ -73.82407909454082, 40.65496001884071 ], [ -73.8229536180974, 40.650532558586235 ], [ -73.82211993184252, 40.647939195437345 ], [ -73.81290769732489, 40.643985699842915 ], [ -73.79214887014153, 40.63414837731818 ], [ -73.78339516446982, 40.62987771430167 ], [ -73.7898562329419, 40.62275933562921 ], [ -73.78443726476769, 40.620069953803636 ], [ -73.7791433570518, 40.627188619100366 ], [ -73.77639219241223, 40.62706207167477 ], [ -73.77159849644941, 40.62336045339214 ], [ -73.77209870820208, 40.619975033140975 ], [ -73.77047302000595, 40.61908910045176 ], [ -73.76547094984971, 40.628422477310664 ], [ -73.75338249916041, 40.63291467256053 ], [ -73.74733827381596, 40.63601474373485 ], [ -73.7467963777506, 40.64208793530722 ], [ -73.752548854642, 40.64749646458006 ], [ -73.76213624656812, 40.65309424493557 ], [ -73.78181122379466, 40.66270746643491 ], [ -73.79106514121902, 40.66438330508498 ], [ -73.7957754685564, 40.665205399216404 ], [ -73.79856831750864, 40.66283394629252 ], [ -73.80390390953731, 40.66175885985783 ], [ -73.8073637074931, 40.66039916690434 ], [ -73.8109068740743, 40.66074699797244 ], [ -73.81278266814672, 40.66039916690434 ] ] ] }, &quot;properties&quot;: { &quot;score&quot;: 2.6857595, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;osm_airports&quot;, &quot;source&quot;: &quot;OSM&quot;, &quot;source_id&quot;: [&quot;03ed6d97-fc81-4340-b68a-11993554eef1&quot;] } ], &quot;names&quot;: { &quot;en&quot;: [&quot;JFK International Airport&quot;, &quot;John F Kennedy International Airport&quot;], &quot;fr&quot;: [&quot;Aeropuerto JFK&quot;], &quot;default&quot;: [&quot;JFK International Airport&quot;], &quot;display&quot;: &quot;JFK International Airport&quot; }, &quot;placetype&quot;: &quot;transportation&quot;, &quot;sub_placetype&quot;: &quot;airport&quot;, &quot;regions&quot;: [ { &quot;region&quot;: &quot;USA&quot;, &quot;sub_region_names&quot;: [ &quot;New York&quot; ] } ] } } ] }   JSON Route's Control Point Response 👇 { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;query&quot;: { &quot;command_name&quot;: &quot;olimpiade&quot;, &quot;control_point&quot;: &quot;111&quot;, &quot;disable_fuzziness&quot;: true, &quot;limit&quot;: 5 }, &quot;response&quot;: { &quot;results_count&quot;: 1, &quot;max_score&quot;: 1.89712, &quot;match_latency_ms&quot;: 7 } }, &quot;bbox&quot;: [12.475638293442415, 41.932360642739155, 12.475638293442415, 41.932360642739155], &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ 12.475638293442415, 41.932360642739155 ], &quot;type&quot;: &quot;Point&quot; }, &quot;properties&quot;: { &quot;OBJECT_COMMAND_NAME&quot;: &quot;111&quot;, &quot;TIED_TO&quot;: &quot;olimpiade&quot;, &quot;ENTITY_HEB&quot;: &quot;control point&quot;, &quot;LAYER_NAME&quot;: &quot;CONTROL_GIL_GDB.CTR_CONTROL_POINT_CROSS_N&quot;, &quot;TYPE&quot;: &quot;ITEM&quot;, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;CONTROL_GIL_GDB.CTR_CONTROL_POINT_CROSS_N&quot;, &quot;source&quot;: &quot;control_gil_v5_test&quot;, &quot;source_id&quot;: [] } ], &quot;names&quot;: { &quot;default&quot;: [ &quot;111&quot; ], &quot;display&quot;: &quot;Route olimpiade Control Point 111&quot; }, &quot;score&quot;: 1.89712 } } ] }   ","version":"Next","tagName":"h2"},{"title":"Conversions​","type":1,"pageTitle":"Geocoding 📍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/info#conversions","content":" You can convert WGS84 coordinates to two grids, the MapColonies Control Grid and US Army MGRS. In order to choose your target grid you pass the target_grid query parameter.   Conversion example 👇 Request curl --location '&lt;geocoding_url&gt;/lookup/coordinates?lat=52.57326537485767&amp;lon=12.948781146422107&amp;target_grid=control' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;' Response { &quot;type&quot;: &quot;Feature&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.1.0&quot;, &quot;query&quot;: { &quot;lat&quot;: 52.57326537485767, &quot;lon&quot;: 12.948781146422107, &quot;target_grid&quot;: &quot;control&quot; }, &quot;response&quot;: { &quot;max_score&quot;: 1, &quot;results_count&quot;: 1, &quot;match_latency_ms&quot;: 0 } }, &quot;bbox&quot;: [12.93694771534361, 52.51211561266182, 13.080296161196031, 52.60444267653175], &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 12.93694771534361, 52.51211561266182 ], [ 12.93694771534361, 52.60444267653175 ], [ 13.080296161196031, 52.60444267653175 ], [ 13.080296161196031, 52.51211561266182 ], [ 12.93694771534361, 52.51211561266182 ] ] ] }, &quot;properties&quot;: { &quot;name&quot;: &quot;BRN&quot;, &quot;tileName&quot;: &quot;BRN&quot;, &quot;subTileNumber&quot;: [ &quot;06&quot;, &quot;97&quot;, &quot;97&quot; ] } }   Military Grid Reference System (MGRS)​  In Geocoding API, you can convert a Military Grid Reference System (MGRS) tile string to its GeoJSON Geometry.  MGRS Wikipedia definition 👇 The Military Grid Reference System (MGRS) is the geocoordinate standard used by NATO militaries for locating points on Earth. ...The MGRS is used as geocode for the entire Earth. An example of an MGRS coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts: 4Q (grid zone designator, GZD)FJ (the 100,000-meter square identifier)1234 5678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution) definition is right to October 10th, 2024. Read more in Wikipedia - Military Grid Reference System   ","version":"Next","tagName":"h2"},{"title":"Common Query Params​","type":1,"pageTitle":"Geocoding 📍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/info#common-query-params","content":" Almost all of our routes consists of the same common query parameters: geo_context, geo_context_mode, limit and disable_fuzziness.   Query Parameter\tType\tDefault Value\tUsage Example\tUsage Explanationgeo_context\tBounding Box, WGS84 Circle, UTM Circle\tundefined\tClick here\tVia this param you can provide the search engine for geo context of the search. geo_context_mode\tEnum(filter,bias)\tundefined\tfilter value example bias value example\tVia this param you tell the search engine what to do with geo_context. You can filter results (which will result with every feature that matches the query and intersects with geo_context shape) or you can bias the results. So features that intersect with the geo_context will appear first. limit\tNumber\t5\tClick here\tBy default, we will return our top 5 features that match the query. You can change the limit and set it from 1 to 15 maximum results. If there are few results, the response may contain less than limit, but the importance is limiting the maximum returned values. disable_fuzziness\tBoolean\tfalse\tClick here\tFuzziness is on by default. If you want exact match, you may set disable_fuzziness: true.  ","version":"Next","tagName":"h2"},{"title":"Generic Response Object​","type":1,"pageTitle":"Geocoding 📍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/info#generic-response-object","content":" As part of Geocoding's architecture, we created a generic response object. All /search routes will return the same expected response object and properties. 📝 Note: Responses in the different routes may have more properties than described in the generic response object.  { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;string&quot;, // Geocoding current Version &quot;query&quot;: { // params sent to the API as part of the request &quot;limit&quot;: 5, // limit the amount of returned results. (5 by default) &quot;disable_fuzziness&quot;: false // disable the search with fuzziness (false by default) }, &quot;response&quot;: { &quot;results_count&quot;: &quot;number&quot;, // amount of returned results &quot;max_score&quot;: &quot;number&quot;, // max score for query match &quot;match_latency_ms&quot;: &quot;number&quot;, // latancy until match } }, &quot;bbox&quot;: [&quot;number&quot;, &quot;number&quot;, &quot;number&quot;, &quot;number&quot;], //the bounding box of the returned results &quot;features&quot;: [ //array of valid GeoJSON feature { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: {...}, //valid GeoJSON geometry &quot;properties&quot;: { &quot;matches&quot;: [ // Data's origin. From where we got the data { &quot;layer&quot;: &quot;string&quot;, &quot;source&quot;: &quot;string&quot;, &quot;source_id&quot;: [ &quot;string&quot; ] } ], &quot;names&quot;: { //names of the feature. &quot;default&quot;: [ &quot;string&quot; ], // Feature may have multiple names &quot;display&quot;: &quot;string&quot; // Our display name recommandation }, &quot;score&quot;: &quot;number&quot; // match score to the query } } ] }   ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Geocoding 📍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/info#usage","content":" warning You will need an API token as part of the service authentication.   warning All routes require x-api-key and x-user-id. x-api-key's value should be the token provided by our team. You may also send token query parameter. x-user-id's value should be the user's id that queried our service.   note All returned responses by Geocoding API are valid GeoJSON documents. See RFC 7946: The GeoJSON Format🌐 for more info about the GeoJSON specification.   While interacting with Geocoding API, for BI purposes and to better understand our users's needs and interests, for each response sent from Geocoding API, we require the users to provide 'feedback' on our response by using Geocoding's Feedback API. If you're not familiar with Geocoding's Feedback API, please read here.   danger Users that won't comply are at risk of being blocked from using Geocoding API service.  ","version":"Next","tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"Geocoding 📍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/info#examples","content":" Type\tLinksControl Tiles\t- Exact tile search - Tile search by MGRS tile - Exact Sub-Tile Search Control Routes\t- Simple route search - Exact Route's Control Point search Control Item\t- Item search Location\t- Simple Query - geo_context: [bbox] and geo_context_mode: 'filter' - geo_context: [bbox] and geo_context_mode: 'bias' - Filter response to specific source - Filter response to specific region Conversion\t- WGS84 to MapColonies Control Grid Tile example - WGS84 to US Army MGRS example MGRS\tMGRS shape conversion  ","version":"Next","tagName":"h2"},{"title":"Tile examples​","type":1,"pageTitle":"Geocoding 📍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/info#tile-examples","content":" Exact Tile Search​  Tile Search Request curl --location '&lt;geocoding_url&gt;/search/control/tiles?tile=RIT&amp;disable_fuzziness=true' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;'   Response 👇 { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;query&quot;: { &quot;tile&quot;: &quot;RIT&quot;, &quot;disable_fuzziness&quot;: true, &quot;limit&quot;: 5 }, &quot;response&quot;: { &quot;results_count&quot;: 1, &quot;max_score&quot;: 2.0481892, &quot;match_latency_ms&quot;: 77 } }, &quot;bbox&quot;: [12.42879133518656, 41.84943698365008, 12.539507865186607, 41.94185043165008], &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ [ 12.539507865186607, 41.851751203650096 ], [ 12.536787075186538, 41.94185043165008 ], [ 12.42879133518656, 41.93952837265009 ], [ 12.431625055186686, 41.84943698365008 ], [ 12.539507865186607, 41.851751203650096] ] ], &quot;type&quot;: &quot;Polygon&quot; }, &quot;properties&quot;: { &quot;TILE_NAME&quot;: &quot;RIT&quot;, &quot;LAYER_NAME&quot;: &quot;CONTROL.TILES&quot;, &quot;TYPE&quot;: &quot;TILE&quot;, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;CONTROL.TILES&quot;, &quot;source&quot;: &quot;control_gil_v5_test&quot;, &quot;source_id&quot;: [] } ], &quot;names&quot;: { &quot;default&quot;: [ &quot;RIT&quot; ], &quot;display&quot;: &quot;Tile RIT&quot; }, &quot;score&quot;: 2.0481892 } } ] }   Tile search by MGRS tile​  Tile Search Request curl --location '&lt;geocoding_url&gt;/search/control/tiles?mgrs=33TTG9574836243' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;'   Response 👇 { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;query&quot;: { &quot;mgrs&quot;: &quot;33TTG9574836243&quot;, &quot;disable_fuzziness&quot;: false, &quot;limit&quot;: 5 }, &quot;response&quot;: { &quot;results_count&quot;: 1, &quot;max_score&quot;: 2.0481892, &quot;match_latency_ms&quot;: 77 } }, &quot;bbox&quot;: [12.42879133518656, 41.84943698365008, 12.539507865186607, 41.94185043165008], &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ [ 12.539507865186607, 41.851751203650096 ], [ 12.536787075186538, 41.94185043165008 ], [ 12.42879133518656, 41.93952837265009 ], [ 12.431625055186686, 41.84943698365008 ], [ 12.539507865186607, 41.851751203650096] ] ], &quot;type&quot;: &quot;Polygon&quot; }, &quot;properties&quot;: { &quot;TILE_NAME&quot;: &quot;RIT&quot;, &quot;LAYER_NAME&quot;: &quot;CONTROL.TILES&quot;, &quot;TYPE&quot;: &quot;TILE&quot;, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;CONTROL.TILES&quot;, &quot;source&quot;: &quot;control_gil_v5_test&quot;, &quot;source_id&quot;: [] } ], &quot;names&quot;: { &quot;default&quot;: [ &quot;RIT&quot; ], &quot;display&quot;: &quot;Tile RIT&quot; }, &quot;score&quot;: 2.0481892 } } ] }   Exact Sub Tile Search​  📝 Note:disable_fuzziness query parameter is set to true. This is just for example purpose. You may remove it.  Sub-Tile Search Request curl --location '&lt;geocoding_url&gt;/search/control/tiles?tile=RIT&amp;sub_tile=65&amp;disable_fuzziness=true' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;'   Response 👇 { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;query&quot;: { &quot;tile&quot;: &quot;RIT&quot;, &quot;sub_tile&quot;: &quot;65&quot;, &quot;disable_fuzziness&quot;: true, &quot;limit&quot;: 5 }, &quot;response&quot;: { &quot;results_count&quot;: 1, &quot;max_score&quot;: 3.588634, &quot;match_latency_ms&quot;: 5 } }, &quot;bbox&quot;: [12.429043189602453, 41.93031190061167, 12.439646505602468, 41.939432381611695], &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ [ 12.439530324602458, 41.93031190061167 ], [12.439646505602468, 41.9393328566117 ], [ 12.429158378602494, 41.939432381611695 ], [ 12.429043189602453, 41.930411390611695 ], [ 12.439530324602458, 41.93031190061167 ] ] ], &quot;type&quot;: &quot;Polygon&quot; }, &quot;properties&quot;: { &quot;SUB_TILE_ID&quot;: &quot;65&quot;, &quot;TILE_NAME&quot;: &quot;RIT&quot;, &quot;LAYER_NAME&quot;: &quot;CONTROL.SUB_TILES&quot;, &quot;TYPE&quot;: &quot;SUB_TILE&quot;, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;CONTROL.SUB_TILES&quot;, &quot;source&quot;: &quot;control_gil_v5_test&quot;, &quot;source_id&quot;: [] } ], &quot;names&quot;: { &quot;default&quot;: [ &quot;65&quot; ], &quot;display&quot;: &quot;Tile RIT Sub Tile 65&quot; }, &quot;score&quot;: 3.588634 } } ] }   ","version":"Next","tagName":"h3"},{"title":"Route examples​","type":1,"pageTitle":"Geocoding 📍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/info#route-examples","content":" Simple Route search​  Route Search Request curl --location '&lt;geocoding_url&gt;/search/control/routes?command_name=olimpiade' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;'   Response 👇 { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;query&quot;: { &quot;command_name&quot;: &quot;olimpiade&quot;, &quot;disable_fuzziness&quot;: false, &quot;limit&quot;: 5 }, &quot;response&quot;: { &quot;results_count&quot;: 1, &quot;max_score&quot;: 3.2834144, &quot;match_latency_ms&quot;: 16 } }, &quot;bbox&quot;: [12.472759211857749, 41.932073169074016, 12.475880836863752, 41.93239148035457], &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ 12.472759211857749, 41.932073169074016 ], [ 12.475880836863752, 41.93239148035457 ] ], &quot;type&quot;: &quot;LineString&quot; }, &quot;properties&quot;: { &quot;OBJECT_COMMAND_NAME&quot;: &quot;olimpiade&quot;, &quot;LAYER_NAME&quot;: &quot;CONTROL.ROUTES&quot;, &quot;ENTITY_HEB&quot;: &quot;route&quot;, &quot;TYPE&quot;: &quot;ROUTE&quot;, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;CONTROL.ROUTES&quot;, &quot;source&quot;: &quot;control_gil_v5_test&quot;, &quot;source_id&quot;: [] } ], &quot;names&quot;: { &quot;default&quot;: [ &quot;olimpiade&quot; ], &quot;display&quot;: &quot;Route olimpiade&quot; }, &quot;score&quot;: 3.2834144 } } ] }   Exact Route's Control Point search​  📝 Note:disable_fuzziness query parameter is set to true. This is just for example purpose. You may remove it.  Route Search Request curl --location '&lt;geocoding_url&gt;/search/control/routes?command_name=olimpiade&amp;disable_fuzziness=true&amp;control_point=111' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;'   Response 👇 { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;query&quot;: { &quot;command_name&quot;: &quot;olimpiade&quot;, &quot;control_point&quot;: &quot;111&quot;, &quot;disable_fuzziness&quot;: true, &quot;limit&quot;: 5 }, &quot;response&quot;: { &quot;results_count&quot;: 1, &quot;max_score&quot;: 1.89712, &quot;match_latency_ms&quot;: 7 } }, &quot;bbox&quot;: [12.475638293442415, 41.932360642739155, 12.475638293442415, 41.932360642739155], &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ 12.475638293442415, 41.932360642739155 ], &quot;type&quot;: &quot;Point&quot; }, &quot;properties&quot;: { &quot;OBJECT_COMMAND_NAME&quot;: &quot;111&quot;, &quot;TIED_TO&quot;: &quot;olimpiade&quot;, &quot;ENTITY_HEB&quot;: &quot;control point&quot;, &quot;LAYER_NAME&quot;: &quot;CONTROL_GIL_GDB.CTR_CONTROL_POINT_CROSS_N&quot;, &quot;TYPE&quot;: &quot;ITEM&quot;, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;CONTROL_GIL_GDB.CTR_CONTROL_POINT_CROSS_N&quot;, &quot;source&quot;: &quot;control_gil_v5_test&quot;, &quot;source_id&quot;: [] } ], &quot;names&quot;: { &quot;default&quot;: [ &quot;111&quot; ], &quot;display&quot;: &quot;Route olimpiade Control Point 111&quot; }, &quot;score&quot;: 1.89712 } } ] }   ","version":"Next","tagName":"h3"},{"title":"Item examples​","type":1,"pageTitle":"Geocoding 📍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/info#item-examples","content":" Item search​  📝 Note:limit query parameter is set to 1. This is just for example purpose. You may remove it.  Item Search Request curl --location '&lt;geocoding_url&gt;/search/control/items?command_name=1234&amp;limit=1' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;'   Response 👇 { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.1.0&quot;, &quot;query&quot;: { &quot;command_name&quot;: &quot;1234&quot;, &quot;limit&quot;: 1, &quot;disable_fuzziness&quot;: false }, &quot;response&quot;: { &quot;results_count&quot;: 1, &quot;max_score&quot;: 2.664375, &quot;match_latency_ms&quot;: 5 } }, &quot;bbox&quot;: [12.432648028923637, 41.93189198298137, 12.43637599267521, 41.93386161853829], &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ [ 12.432792582620323, 41.9327692706986 ], [ 12.432648028923637, 41.93209008126263 ], [ 12.43295235249525, 41.93189198298137 ], [ 12.435105441764364, 41.93235609798671 ], [ 12.435516278586334, 41.93274663116725 ], [ 12.43637599267521, 41.93308056343986 ], [ 12.436026020567567, 41.93386161853829 ], [ 12.432792582620323, 41.9327692706986 ] ] ], &quot;type&quot;: &quot;Polygon&quot; }, &quot;properties&quot;: { &quot;OBJECT_COMMAND_NAME&quot;: &quot;1234&quot;, &quot;TILE_NAME&quot;: &quot;RIT&quot;, &quot;SUB_TILE_ID&quot;: &quot;37&quot;, &quot;LAYER_NAME&quot;: &quot;CONTROL.ITEMS&quot;, &quot;ENTITY_HEB&quot;: &quot;hotel&quot;, &quot;TYPE&quot;: &quot;ITEM&quot;, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;CONTROL.ITEMS&quot;, &quot;source&quot;: &quot;control_gil_v5_test&quot;, &quot;source_id&quot;: [] } ], &quot;names&quot;: { &quot;default&quot;: [ &quot;1234&quot; ], &quot;display&quot;: &quot;Item 1234&quot; }, &quot;score&quot;: 2.664375 } } ] }   ","version":"Next","tagName":"h3"},{"title":"Location Search Examples​","type":1,"pageTitle":"Geocoding 📍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/info#location-search-examples","content":" Simple Query example​  Query Search Request curl --location '&lt;geocoding_url&gt;/search/location/query?query=school' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;'   Response 👇 { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;query&quot;: { &quot;query&quot;: &quot;school&quot;, &quot;disable_fuzziness&quot;: false, &quot;limit&quot;: 5 }, &quot;response&quot;: { &quot;results_count&quot;: 2, &quot;max_score&quot;: 1.2880917, &quot;match_latency_ms&quot;: 7, &quot;name&quot;: &quot;&quot;, &quot;place_types&quot;: [ &quot;education&quot; ], &quot;sub_place_types&quot;: [ &quot;school&quot; ], &quot;hierarchies&quot;: [] } }, &quot;bbox&quot;: [-118.30879709771484, 33.71550819588987, 2.347737155284733, 48.88088750665477], &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ [ -118.30812263653988, 33.71684417247593 ], [ -118.30861990876181, 33.71674433152869 ], [ -118.30879709771484, 33.71635922964194 ], [ -118.30619642115158, 33.71550819588987 ], [ -118.30586490633668, 33.715921827872904 ], [ -118.30587062210924, 33.716183318328746 ], [ -118.30812263653988, 33.71684417247593 ] ] ], &quot;type&quot;: &quot;Polygon&quot; }, &quot;properties&quot;: { &quot;score&quot;: 1.2880917, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;osm_schools&quot;, &quot;source&quot;: &quot;OSM&quot;, &quot;source_id&quot;: [ &quot;1a5b981b-bb0e-44dd-b9e2-424b92f2de49&quot; ] } ], &quot;names&quot;: { &quot;en&quot;: [ &quot;White Point Elementary School&quot; ], &quot;fr&quot;: [ &quot;Escuela Primaria White Point&quot; ], &quot;default&quot;: [ &quot;White Point Elementary School&quot; ], &quot;display&quot;: &quot;White Point Elementary School&quot; }, &quot;placetype&quot;: &quot;education&quot;, &quot;sub_placetype&quot;: &quot;school&quot;, &quot;regions&quot;: [ { &quot;region&quot;: &quot;USA&quot;, &quot;sub_region_names&quot;: [ &quot;Los Angeles&quot; ] } ] } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ [ 2.346441270696971, 48.88088750665477 ], [ 2.3462780852304945, 48.88018258877358 ], [ 2.347503576087604, 48.87999951892243 ], [ 2.347737155284733, 48.88070864783427 ], [ 2.346441270696971, 48.88088750665477 ] ] ], &quot;type&quot;: &quot;Polygon&quot; }, &quot;properties&quot;: { &quot;score&quot;: 1.2880917, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;osm_schools&quot;, &quot;source&quot;: &quot;OSM&quot;, &quot;source_id&quot;: [ &quot;dc02a3f9-156a-4f61-85bd-fd040cd322a3&quot; ] } ], &quot;names&quot;: { &quot;en&quot;: [ &quot;Wi School Paris 9&quot; ], &quot;fr&quot;: [ &quot;Ecole Wi Paris 9&quot; ], &quot;default&quot;: [ &quot;Wi School Paris 9&quot; ], &quot;display&quot;: &quot;Wi School Paris 9&quot; }, &quot;placetype&quot;: &quot;education&quot;, &quot;sub_placetype&quot;: &quot;school&quot;, &quot;regions&quot;: [ { &quot;region&quot;: &quot;FRANCE&quot;, &quot;sub_region_names&quot;: [ &quot;Paris&quot; ] } ] } } ] }   Query example with geo_context: [bbox] and geo_context_mode: 'filter'​  used geo_context: {&quot;bbox&quot;: [2.34509596673945, 48.87896264245859, 2.3502230438252525, 48.881502327359925]}  Query Search Request curl --location '&lt;geocoding_url&gt;/search/location/query?query=school&amp;geo_context=%7B%22bbox%22%3A%20%5B2.34509596673945%2C%2048.87896264245859%2C%202.3502230438252525%2C%2048.881502327359925%5D%7D&amp;geo_context_mode=filter' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;'   Response 👇 { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;query&quot;: { &quot;query&quot;: &quot;school&quot;, &quot;disable_fuzziness&quot;: false, &quot;geo_context&quot;: { &quot;bbox&quot;: [2.34509596673945, 48.87896264245859, 2.3502230438252525, 48.881502327359925] }, &quot;geo_context_mode&quot;: &quot;filter&quot;, &quot;limit&quot;: 5 }, &quot;response&quot;: { &quot;results_count&quot;: 1, &quot;max_score&quot;: 1.2880917, &quot;match_latency_ms&quot;: 7, &quot;name&quot;: &quot;&quot;, &quot;place_types&quot;: [ &quot;education&quot; ], &quot;sub_place_types&quot;: [ &quot;school&quot; ], &quot;hierarchies&quot;: [] } }, &quot;bbox&quot;: [2.3462780852304945, 48.87999951892243, 2.347737155284733, 48.88088750665477], &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ [ -118.30812263653988, 33.71684417247593 ], [ -118.30861990876181, 33.71674433152869 ], [ -118.30879709771484, 33.71635922964194 ], [ -118.30619642115158, 33.71550819588987 ], [ -118.30586490633668, 33.715921827872904 ], [ -118.30587062210924, 33.716183318328746 ], [ -118.30812263653988, 33.71684417247593 ] ] ], &quot;type&quot;: &quot;Polygon&quot; }, &quot;properties&quot;: { &quot;score&quot;: 1.2880917, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;osm_schools&quot;, &quot;source&quot;: &quot;OSM&quot;, &quot;source_id&quot;: [ &quot;1a5b981b-bb0e-44dd-b9e2-424b92f2de49&quot; ] } ], &quot;names&quot;: { &quot;en&quot;: [ &quot;White Point Elementary School&quot; ], &quot;fr&quot;: [ &quot;Escuela Primaria White Point&quot; ], &quot;default&quot;: [ &quot;White Point Elementary School&quot; ], &quot;display&quot;: &quot;White Point Elementary School&quot; }, &quot;placetype&quot;: &quot;education&quot;, &quot;sub_placetype&quot;: &quot;school&quot;, &quot;regions&quot;: [ { &quot;region&quot;: &quot;USA&quot;, &quot;sub_region_names&quot;: [ &quot;Los Angeles&quot; ] } ] } } ] }   Query example with geo_context: [bbox] and geo_context_mode: 'bias'​  used geo_context: {&quot;bbox&quot;: [2.34509596673945, 48.87896264245859, 2.3502230438252525, 48.881502327359925]}  Query Search Request curl --location '&lt;geocoding_url&gt;/search/location/query?query=school&amp;geo_context=%7B%22bbox%22%3A%20%5B2.34509596673945%2C%2048.87896264245859%2C%202.3502230438252525%2C%2048.881502327359925%5D%7D&amp;geo_context_mode=bias' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;'   note Notice how &quot;Wi School Paris&quot; appears before &quot;White Point Elementary School&quot;   Response 👇 { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;query&quot;: { &quot;query&quot;: &quot;school&quot;, &quot;disable_fuzziness&quot;: false, &quot;geo_context&quot;: { &quot;bbox&quot;: [2.34509596673945, 48.87896264245859, 2.3502230438252525, 48.881502327359925] }, &quot;geo_context_mode&quot;: &quot;bias&quot;, &quot;limit&quot;: 5 }, &quot;response&quot;: { &quot;results_count&quot;: 2, &quot;max_score&quot;: 1.2880917, &quot;match_latency_ms&quot;: 7, &quot;name&quot;: &quot;&quot;, &quot;place_types&quot;: [ &quot;education&quot; ], &quot;sub_place_types&quot;: [ &quot;school&quot; ], &quot;hierarchies&quot;: [] } }, &quot;bbox&quot;: [-118.30879709771484, 33.71550819588987, 2.347737155284733, 48.88088750665477], &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ [ 2.346441270696971, 48.88088750665477 ], [ 2.3462780852304945, 48.88018258877358 ], [ 2.347503576087604, 48.87999951892243 ], [ 2.347737155284733, 48.88070864783427 ], [ 2.346441270696971, 48.88088750665477 ] ] ], &quot;type&quot;: &quot;Polygon&quot; }, &quot;properties&quot;: { &quot;score&quot;: 1.2880917, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;osm_schools&quot;, &quot;source&quot;: &quot;OSM&quot;, &quot;source_id&quot;: [ &quot;dc02a3f9-156a-4f61-85bd-fd040cd322a3&quot; ] } ], &quot;names&quot;: { &quot;en&quot;: [ &quot;Wi School Paris 9&quot; ], &quot;fr&quot;: [ &quot;Ecole Wi Paris 9&quot; ], &quot;default&quot;: [ &quot;Wi School Paris 9&quot; ], &quot;display&quot;: &quot;Wi School Paris 9&quot; }, &quot;placetype&quot;: &quot;education&quot;, &quot;sub_placetype&quot;: &quot;school&quot;, &quot;regions&quot;: [ { &quot;region&quot;: &quot;FRANCE&quot;, &quot;sub_region_names&quot;: [ &quot;Paris&quot; ] } ] } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ [ -118.30812263653988, 33.71684417247593 ], [ -118.30861990876181, 33.71674433152869 ], [ -118.30879709771484, 33.71635922964194 ], [ -118.30619642115158, 33.71550819588987 ], [ -118.30586490633668, 33.715921827872904 ], [ -118.30587062210924, 33.716183318328746 ], [ -118.30812263653988, 33.71684417247593 ] ] ], &quot;type&quot;: &quot;Polygon&quot; }, &quot;properties&quot;: { &quot;score&quot;: 1.2880917, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;osm_schools&quot;, &quot;source&quot;: &quot;OSM&quot;, &quot;source_id&quot;: [ &quot;1a5b981b-bb0e-44dd-b9e2-424b92f2de49&quot; ] } ], &quot;names&quot;: { &quot;en&quot;: [ &quot;White Point Elementary School&quot; ], &quot;fr&quot;: [ &quot;Escuela Primaria White Point&quot; ], &quot;default&quot;: [ &quot;White Point Elementary School&quot; ], &quot;display&quot;: &quot;White Point Elementary School&quot; }, &quot;placetype&quot;: &quot;education&quot;, &quot;sub_placetype&quot;: &quot;school&quot;, &quot;regions&quot;: [ { &quot;region&quot;: &quot;USA&quot;, &quot;sub_region_names&quot;: [ &quot;Los Angeles&quot; ] } ] } } ] }   Query example (port search) only from &quot;google&quot; as the data source​  Query Search Request curl --location '&lt;geocoding_url&gt;/search/location/query?query=port&amp;source=google' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;'   Response 👇 { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;query&quot;: { &quot;query&quot;: &quot;port&quot;, &quot;source&quot;: [ &quot;google&quot; ], &quot;disable_fuzziness&quot;: false, &quot;limit&quot;: 5 }, &quot;response&quot;: { &quot;results_count&quot;: 1, &quot;max_score&quot;: 1.2880917, &quot;match_latency_ms&quot;: 4, &quot;name&quot;: &quot;&quot;, &quot;place_types&quot;: [ &quot;transportation&quot; ], &quot;sub_place_types&quot;: [ &quot;port&quot; ], &quot;hierarchies&quot;: [] } }, &quot;bbox&quot;: [-118.27503083555426, 33.720881194108856, -118.2431463824787, 33.76075151051916], &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ -118.2505781304088, 33.7502674389752 ], [ -118.25604403409116, 33.76075151051916 ], [ -118.27057180697577, 33.748593059782564 ], [ -118.27503083555426, 33.741097783576635 ], [ -118.2747911028351, 33.734798055529765 ], [ -118.27215404292296, 33.73136889520775 ], [ -118.26807858669537, 33.720881194108856 ], [ -118.26424286318695, 33.721997816398385 ], [ -118.26640045650717, 33.72901625632974 ], [ -118.2431463824787, 33.735794882347946 ], [ -118.24492040460113, 33.739303607948656 ], [ -118.25072193640723, 33.73794798097781 ], [ -118.25220827926702, 33.74193505797223 ], [ -118.24937943317966, 33.74508471776615 ], [ -118.24798898340768, 33.74783559181691 ], [ -118.24909175391655, 33.74803492708783 ], [ -118.25096166912684, 33.74600168558719 ], [ -118.25326310323155, 33.745363795966625 ], [ -118.25278363779321, 33.74687877606813 ], [ -118.2505781304088, 33.7502674389752 ] ] ] }, &quot;properties&quot;: { &quot;score&quot;: 1.2880917, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;google_ports&quot;, &quot;source&quot;: &quot;GOOGLE&quot;, &quot;source_id&quot;: [ &quot;1bb11f54-939e-457b-bf68-a3920ccf629c&quot; ] } ], &quot;names&quot;: { &quot;en&quot;: [ &quot;Port of Los Angeles&quot; ], &quot;fr&quot;: [ &quot;Puerto de Los Ángeles&quot; ], &quot;default&quot;: [ &quot;Port of Los Angeles&quot; ], &quot;display&quot;: &quot;Port of Los Angeles&quot; }, &quot;placetype&quot;: &quot;transportation&quot;, &quot;sub_placetype&quot;: &quot;port&quot;, &quot;regions&quot;: [ { &quot;region&quot;: &quot;USA&quot;, &quot;sub_region_names&quot;: [ &quot;Los Angeles&quot; ] } ] } } ] }   tip You may see the available sources by sending this request: curl --location '&lt;geocoding_url&gt;/search/location/sources' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;'   Query example (school search) only in &quot;france&quot; region​  Query Search Request curl --location '&lt;geocoding_url&gt;/search/location/query?query=school&amp;region=france' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;'   Response 👇 { &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;query&quot;: { &quot;query&quot;: &quot;school&quot;, &quot;region&quot;: [&quot;france&quot;], &quot;disable_fuzziness&quot;: false, &quot;limit&quot;: 5 }, &quot;response&quot;: { &quot;results_count&quot;: 1, &quot;max_score&quot;: 1.2880917, &quot;match_latency_ms&quot;: 7, &quot;name&quot;: &quot;&quot;, &quot;place_types&quot;: [ &quot;education&quot; ], &quot;sub_place_types&quot;: [ &quot;school&quot; ], &quot;hierarchies&quot;: [] } }, &quot;bbox&quot;: [2.3462780852304945, 48.87999951892243, 2.347737155284733, 48.88088750665477], &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ [ -118.30812263653988, 33.71684417247593 ], [ -118.30861990876181, 33.71674433152869 ], [ -118.30879709771484, 33.71635922964194 ], [ -118.30619642115158, 33.71550819588987 ], [ -118.30586490633668, 33.715921827872904 ], [ -118.30587062210924, 33.716183318328746 ], [ -118.30812263653988, 33.71684417247593 ] ] ], &quot;type&quot;: &quot;Polygon&quot; }, &quot;properties&quot;: { &quot;score&quot;: 1.2880917, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;osm_schools&quot;, &quot;source&quot;: &quot;OSM&quot;, &quot;source_id&quot;: [ &quot;1a5b981b-bb0e-44dd-b9e2-424b92f2de49&quot; ] } ], &quot;names&quot;: { &quot;en&quot;: [ &quot;White Point Elementary School&quot; ], &quot;fr&quot;: [ &quot;Escuela Primaria White Point&quot; ], &quot;default&quot;: [ &quot;White Point Elementary School&quot; ], &quot;display&quot;: &quot;White Point Elementary School&quot; }, &quot;placetype&quot;: &quot;education&quot;, &quot;sub_placetype&quot;: &quot;school&quot;, &quot;regions&quot;: [ { &quot;region&quot;: &quot;USA&quot;, &quot;sub_region_names&quot;: [ &quot;Los Angeles&quot; ] } ] } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;geometry&quot;: { &quot;coordinates&quot;: [ [ [ 2.346441270696971, 48.88088750665477 ], [ 2.3462780852304945, 48.88018258877358 ], [ 2.347503576087604, 48.87999951892243 ], [ 2.347737155284733, 48.88070864783427 ], [ 2.346441270696971, 48.88088750665477 ] ] ], &quot;type&quot;: &quot;Polygon&quot; }, &quot;properties&quot;: { &quot;score&quot;: 1.2880917, &quot;matches&quot;: [ { &quot;layer&quot;: &quot;osm_schools&quot;, &quot;source&quot;: &quot;OSM&quot;, &quot;source_id&quot;: [ &quot;dc02a3f9-156a-4f61-85bd-fd040cd322a3&quot; ] } ], &quot;names&quot;: { &quot;en&quot;: [ &quot;Wi School Paris 9&quot; ], &quot;fr&quot;: [ &quot;Ecole Wi Paris 9&quot; ], &quot;default&quot;: [ &quot;Wi School Paris 9&quot; ], &quot;display&quot;: &quot;Wi School Paris 9&quot; }, &quot;placetype&quot;: &quot;education&quot;, &quot;sub_placetype&quot;: &quot;school&quot;, &quot;regions&quot;: [ { &quot;region&quot;: &quot;FRANCE&quot;, &quot;sub_region_names&quot;: [ &quot;Paris&quot; ] } ] } } ] }   tip You may see the available regions by sending this request: curl --location '&lt;geocoding_url&gt;/search/location/regions' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;'   ","version":"Next","tagName":"h3"},{"title":"Conversion examples​","type":1,"pageTitle":"Geocoding 📍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/info#conversion-examples","content":" WGS84 to MapColonies Control Grid Tile example​  Request curl --location '&lt;geocoding_url&gt;/lookup/coordinates?lat=52.57326537485767&amp;lon=12.948781146422107&amp;target_grid=control' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;'   Response 👇 { &quot;type&quot;: &quot;Feature&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.1.0&quot;, &quot;query&quot;: { &quot;lat&quot;: 52.57326537485767, &quot;lon&quot;: 12.948781146422107, &quot;target_grid&quot;: &quot;control&quot; }, &quot;response&quot;: { &quot;max_score&quot;: 1, &quot;results_count&quot;: 1, &quot;match_latency_ms&quot;: 0 } }, &quot;bbox&quot;: [12.93694771534361, 52.51211561266182, 13.080296161196031, 52.60444267653175], &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 12.93694771534361, 52.51211561266182 ], [ 12.93694771534361, 52.60444267653175 ], [ 13.080296161196031, 52.60444267653175 ], [ 13.080296161196031, 52.51211561266182 ], [ 12.93694771534361, 52.51211561266182 ] ] ] }, &quot;properties&quot;: { &quot;matches&quot;: [ { &quot;layer&quot;: &quot;convertionTable&quot;, &quot;source&quot;: &quot;mapcolonies&quot;, &quot;source_id&quot;: [] } ], &quot;names&quot;: { &quot;default&quot;: [&quot;BRN&quot;], &quot;display&quot;: &quot;BRN&quot; }, &quot;tileName&quot;: &quot;BRN&quot;, &quot;subTileNumber&quot;: [&quot;06&quot;, &quot;97&quot;, &quot;97&quot;] } }   WGS84 to US Army MGRS example​  Request curl --location '&lt;geocoding_url&gt;/lookup/coordinates?lat=52.57326537485767&amp;lon=12.948781146422107&amp;target_grid=MGRS' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;'   Response 👇 { &quot;type&quot;: &quot;Feature&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.1.0&quot;, &quot;query&quot;: { &quot;lat&quot;: 52.57326537485767, &quot;lon&quot;: 12.948781146422107, &quot;target_grid&quot;: &quot;MGRS&quot; }, &quot;response&quot;: { &quot;max_score&quot;: 1, &quot;results_count&quot;: 1, &quot;match_latency_ms&quot;: 0 } }, &quot;bbox&quot;: [12.948777289238832, 52.57325754975297, 12.948791616108007, 52.57326678960368], &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [ 12.948781146422107, 52.57326537485767 ] }, &quot;properties&quot;: { &quot;matches&quot;: [ { &quot;layer&quot;: &quot;MGRS&quot;, &quot;source&quot;: &quot;npm/MGRS&quot;, &quot;source_id&quot;: [] } ], &quot;names&quot;: { &quot;default&quot;: [&quot;33UUU6099626777&quot;], &quot;display&quot;: &quot;33UUU6099626777&quot; }, &quot;accuracy&quot;: &quot;1m&quot;, &quot;mgrs&quot;: &quot;33UUU6099626777&quot;, &quot;score&quot;: 1 } }   ","version":"Next","tagName":"h3"},{"title":"MGRS shape conversion​","type":1,"pageTitle":"Geocoding 📍","url":"/developer-portal/pr-preview/pr-158/docs/MapColonies/vector/Services/geocoding/info#mgrs-shape-conversion","content":" Convert a MGRS string to its geometry in GeoJSON.  Request curl --location '&lt;geocoding_url&gt;/search/MGRS/tiles?tile=33UUU6099626777' \\ --header 'x-api-key: &lt;x-api-key&gt;' \\ --header 'x-user-id: &lt;x-user-id&gt;'   Response 👇 { &quot;type&quot;: &quot;Feature&quot;, &quot;geocoding&quot;: { &quot;version&quot;: &quot;0.1.0&quot;, &quot;query&quot;: { &quot;tile&quot;: &quot;33UUU6099626777&quot; }, &quot;response&quot;: { &quot;max_score&quot;: 1, &quot;results_count&quot;: 1, &quot;match_latency_ms&quot;: 0 } }, &quot;bbox&quot;: [12.948777289238832, 52.57325754975297, 12.948791616108007, 52.57326678960368], &quot;geometry&quot;: { &quot;type&quot;: &quot;Polygon&quot;, &quot;coordinates&quot;: [ [ [ 12.948777289238832, 52.57325754975297 ], [ 12.948777289238832, 52.57326678960368 ], [ 12.948791616108007, 52.57326678960368 ], [ 12.948791616108007, 52.57325754975297 ], [ 12.948777289238832, 52.57325754975297 ] ] ] }, &quot;properties&quot;: { &quot;matches&quot;: [ { &quot;layer&quot;: &quot;MGRS&quot;, &quot;source&quot;: &quot;npm/mgrs&quot;, &quot;source_id&quot;: [] } ], &quot;names&quot;: { &quot;default&quot;: [ &quot;33UUU6099626777&quot; ], &quot;display&quot;: &quot;33UUU6099626777&quot; }, &quot;score&quot;: 1 } }  ","version":"Next","tagName":"h3"},{"title":"WCS - Web Coverage Service","type":0,"sectionRef":"#","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-wcs","content":"","keywords":"","version":"Next"},{"title":"GetCapabilities​","type":1,"pageTitle":"WCS - Web Coverage Service","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-wcs#getcapabilities","content":" A WCS server responding to a GetCapabilities request returns metadata about the service, including supported operations and parameters, and a list of the available layers.  &lt;DEM-DEM-SERVING-SERVICE_URL&gt;/geoserver/ows? service=WCS&amp; version=2.0.1&amp; request=GetCapabilities   Response example Response Example &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;wcs:Capabilities xmlns:wcs=&quot;http://www.opengis.net/wcs/2.0&quot; xmlns:crs=&quot;http://www.opengis.net/wcs/crs/1.0&quot; xmlns:gml=&quot;http://www.opengis.net/gml/3.2&quot; xmlns:gmlcov=&quot;http://www.opengis.net/gmlcov/1.0&quot; xmlns:inspire_common=&quot;https://inspire.ec.europa.eu/schemas/common/1.0&quot; xmlns:inspire_dls=&quot;https://inspire.ec.europa.eu/schemas/inspire_dls/1.0&quot; xmlns:int=&quot;http://www.opengis.net/WCS_service-extension_interpolation/1.0&quot; xmlns:ows=&quot;http://www.opengis.net/ows/2.0&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; version=&quot;2.0.1&quot; updateSequence=&quot;142&quot; xsi:schemaLocation=&quot; http://www.opengis.net/wcs/2.0 http://schemas.opengis.net/wcs/2.0/wcsGetCapabilities.xsd https://inspire.ec.europa.eu/schemas/inspire_dls/1.0 https://inspire.ec.europa.eu/schemas/inspire_dls/1.0/inspire_dls.xsd&quot;&gt; &lt;ows:ServiceIdentification&gt; &lt;ows:Title /&gt; &lt;ows:Abstract /&gt; &lt;ows:ServiceType&gt;urn:ogc:service:wcs&lt;/ows:ServiceType&gt; &lt;ows:ServiceTypeVersion&gt;2.0.1&lt;/ows:ServiceTypeVersion&gt; &lt;ows:ServiceTypeVersion&gt;1.1.1&lt;/ows:ServiceTypeVersion&gt; &lt;ows:ServiceTypeVersion&gt;1.1.0&lt;/ows:ServiceTypeVersion&gt; &lt;ows:Profile&gt;http://www.opengis.net/spec/WCS/2.0/conf/core&lt;/ows:Profile&gt; &lt;ows:Profile&gt;http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0.1&lt;/ows:Profile&gt; &lt;ows:Profile&gt;http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0&lt;/ows:Profile&gt; &lt;ows:Profile&gt;http://www.opengis.net/spec/WCS_service-extension_crs/1.0/conf/crs-gridded-coverage&lt;/ows:Profile&gt; &lt;ows:Profile&gt;http://www.opengis.net/spec/WCS_geotiff-coverages/1.0/conf/geotiff-coverage&lt;/ows:Profile&gt; &lt;ows:Profile&gt;http://www.opengis.net/spec/GMLCOV/1.0/conf/gml-coverage&lt;/ows:Profile&gt; &lt;ows:Profile&gt;http://www.opengis.net/spec/GMLCOV/1.0/conf/special-format&lt;/ows:Profile&gt; &lt;ows:Profile&gt;http://www.opengis.net/spec/GMLCOV/1.0/conf/multipart&lt;/ows:Profile&gt; &lt;ows:Profile&gt;http://www.opengis.net/spec/WCS_service-extension_scaling/1.0/conf/scaling&lt;/ows:Profile&gt; &lt;ows:Profile&gt;http://www.opengis.net/spec/WCS_service-extension_crs/1.0/conf/crs&lt;/ows:Profile&gt; &lt;ows:Profile&gt;http://www.opengis.net/spec/WCS_service-extension_interpolation/1.0/conf/interpolation&lt;/ows:Profile&gt; &lt;ows:Profile&gt;http://www.opengis.net/spec/WCS_service-extension_interpolation/1.0/conf/interpolation-per-axis&lt;/ows:Profile&gt; &lt;ows:Profile&gt;http://www.opengis.net/spec/WCS_service-extension_interpolation/1.0/conf/nearest-neighbor&lt;/ows:Profile&gt; &lt;ows:Profile&gt;http://www.opengis.net/spec/WCS_service-extension_interpolation/1.0/conf/linear&lt;/ows:Profile&gt; &lt;ows:Profile&gt;http://www.opengis.net/spec/WCS_service-extension_interpolation/1.0/conf/cubic&lt;/ows:Profile&gt; &lt;ows:Profile&gt;http://www.opengis.net/spec/WCS_service-extension_range-subsetting/1.0/conf/record-subsetting&lt;/ows:Profile&gt; &lt;ows:Fees&gt;NONE&lt;/ows:Fees&gt; &lt;ows:AccessConstraints&gt;NONE&lt;/ows:AccessConstraints&gt; &lt;/ows:ServiceIdentification&gt; &lt;ows:ServiceProvider&gt; &lt;ows:ProviderName /&gt; &lt;ows:ProviderSite xlink:href=&quot;&quot; /&gt; &lt;ows:ServiceContact&gt; &lt;ows:ContactInfo&gt; &lt;ows:Phone /&gt; &lt;ows:Address /&gt; &lt;/ows:ContactInfo&gt; &lt;/ows:ServiceContact&gt; &lt;/ows:ServiceProvider&gt; &lt;ows:OperationsMetadata&gt; &lt;ows:Operation name=&quot;GetCapabilities&quot;&gt; &lt;ows:DCP&gt; &lt;ows:HTTP&gt; &lt;ows:Get xlink:href=&quot;&lt;DEM-DEM-SERVING-SERVICE_URL&gt;/geoserver/wcs?&quot; /&gt; &lt;/ows:HTTP&gt; &lt;/ows:DCP&gt; &lt;ows:DCP&gt; &lt;ows:HTTP&gt; &lt;ows:Post xlink:href=&quot;&lt;DEM-DEM-SERVING-SERVICE_URL&gt;/geoserver/wcs?&quot; /&gt; &lt;/ows:HTTP&gt; &lt;/ows:DCP&gt; &lt;/ows:Operation&gt; &lt;ows:Operation name=&quot;DescribeCoverage&quot;&gt; &lt;ows:DCP&gt; &lt;ows:HTTP&gt; &lt;ows:Get xlink:href=&quot;&lt;DEM-DEM-SERVING-SERVICE_URL&gt;/geoserver/wcs?&quot; /&gt; &lt;/ows:HTTP&gt; &lt;/ows:DCP&gt; &lt;ows:DCP&gt; &lt;ows:HTTP&gt; &lt;ows:Post xlink:href=&quot;&lt;DEM-DEM-SERVING-SERVICE_URL&gt;/geoserver/wcs?&quot; /&gt; &lt;/ows:HTTP&gt; &lt;/ows:DCP&gt; &lt;/ows:Operation&gt; &lt;ows:Operation name=&quot;GetCoverage&quot;&gt; &lt;ows:DCP&gt; &lt;ows:HTTP&gt; &lt;ows:Get xlink:href=&quot;&lt;DEM-DEM-SERVING-SERVICE_URL&gt;/geoserver/wcs?&quot; /&gt; &lt;/ows:HTTP&gt; &lt;/ows:DCP&gt; &lt;ows:DCP&gt; &lt;ows:HTTP&gt; &lt;ows:Post xlink:href=&quot;&lt;DEM-DEM-SERVING-SERVICE_URL&gt;/geoserver/wcs?&quot; /&gt; &lt;/ows:HTTP&gt; &lt;/ows:DCP&gt; &lt;/ows:Operation&gt; &lt;ows:Constraint name=&quot;PostEncoding&quot;&gt; &lt;ows:AllowedValues&gt; &lt;ows:Value&gt;XML&lt;/ows:Value&gt; &lt;/ows:AllowedValues&gt; &lt;/ows:Constraint&gt; &lt;/ows:OperationsMetadata&gt; &lt;wcs:ServiceMetadata&gt; &lt;wcs:formatSupported&gt;application/gml+xml&lt;/wcs:formatSupported&gt; &lt;wcs:formatSupported&gt;application/x-gzip&lt;/wcs:formatSupported&gt; &lt;wcs:formatSupported&gt;image/jpeg&lt;/wcs:formatSupported&gt; &lt;wcs:formatSupported&gt;image/png&lt;/wcs:formatSupported&gt; &lt;wcs:formatSupported&gt;image/tiff&lt;/wcs:formatSupported&gt; &lt;wcs:formatSupported&gt;text/plain&lt;/wcs:formatSupported&gt; &lt;wcs:Extension&gt; &lt;crs:CrsMetadata&gt; &lt;crs:crsSupported&gt;http://www.opengis.net/def/crs/EPSG/0/2000&lt;/crs:crsSupported&gt; &lt;crs:crsSupported&gt;http://www.opengis.net/def/crs/EPSG/0/100001&lt;/crs:crsSupported&gt; &lt;crs:crsSupported&gt;http://www.opengis.net/def/crs/EPSG/0/100002&lt;/crs:crsSupported&gt; &lt;crs:crsSupported&gt;http://www.opengis.net/def/crs/EPSG/0/100003&lt;/crs:crsSupported&gt; &lt;crs:crsSupported&gt;http://www.opengis.net/def/crs/EPSG/0/900913&lt;/crs:crsSupported&gt; &lt;/crs:CrsMetadata&gt; &lt;int:interpolationSupported&gt;http://www.opengis.net/def/interpolation/OGC/1/nearest-neighbor&lt;/int:interpolationSupported&gt; &lt;int:interpolationSupported&gt;http://www.opengis.net/def/interpolation/OGC/1/linear&lt;/int:interpolationSupported&gt; &lt;int:interpolationSupported&gt;http://www.opengis.net/def/interpolation/OGC/1/cubic&lt;/int:interpolationSupported&gt; &lt;/wcs:Extension&gt; &lt;/wcs:ServiceMetadata&gt; &lt;wcs:Contents&gt; &lt;wcs:CoverageSummary&gt; &lt;ows:Title&gt;30n030e_20101117_gmted_min075&lt;/ows:Title&gt; &lt;ows:Abstract&gt;Generated from GeoTIFF&lt;/ows:Abstract&gt; &lt;ows:Keywords&gt; &lt;ows:Keyword&gt;30n030e_20101117_gmted_min075&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;WCS&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;GeoTIFF&lt;/ows:Keyword&gt; &lt;/ows:Keywords&gt; &lt;wcs:CoverageId&gt;dem__30n030e_20101117_gmted_min075&lt;/wcs:CoverageId&gt; &lt;wcs:CoverageSubtype&gt;RectifiedGridCoverage&lt;/wcs:CoverageSubtype&gt; &lt;ows:WGS84BoundingBox&gt; &lt;ows:LowerCorner&gt;29.999861111111112 29.99986111111111&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;59.999861111111116 49.99986111111111&lt;/ows:UpperCorner&gt; &lt;/ows:WGS84BoundingBox&gt; &lt;ows:BoundingBox crs=&quot;http://www.opengis.net/def/crs/EPSG/0/EPSG:4326&quot;&gt; &lt;ows:LowerCorner&gt;29.999861111111112 29.99986111111111&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;59.999861111111116 49.99986111111111&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/wcs:CoverageSummary&gt; &lt;wcs:CoverageSummary&gt; &lt;ows:Title&gt;gt30e020n40&lt;/ows:Title&gt; &lt;ows:Abstract&gt;Generated from GeoTIFF&lt;/ows:Abstract&gt; &lt;ows:Keywords&gt; &lt;ows:Keyword&gt;gt30e020n40&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;WCS&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;GeoTIFF&lt;/ows:Keyword&gt; &lt;/ows:Keywords&gt; &lt;wcs:CoverageId&gt;dem__gt30e020n40&lt;/wcs:CoverageId&gt; &lt;wcs:CoverageSubtype&gt;RectifiedGridCoverage&lt;/wcs:CoverageSubtype&gt; &lt;ows:WGS84BoundingBox&gt; &lt;ows:LowerCorner&gt;20.000000000000004 -9.999999999980012&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;59.99999999998401 39.99999999999999&lt;/ows:UpperCorner&gt; &lt;/ows:WGS84BoundingBox&gt; &lt;ows:BoundingBox crs=&quot;http://www.opengis.net/def/crs/EPSG/0/EPSG:4326&quot;&gt; &lt;ows:LowerCorner&gt;20.000000000000004 -9.999999999980012&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;59.99999999998401 39.99999999999999&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/wcs:CoverageSummary&gt; &lt;wcs:CoverageSummary&gt; &lt;ows:Title&gt;n30_e034_1arc_v3&lt;/ows:Title&gt; &lt;ows:Abstract&gt;Generated from GeoTIFF&lt;/ows:Abstract&gt; &lt;ows:Keywords&gt; &lt;ows:Keyword&gt;n30_e034_1arc_v3&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;WCS&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;GeoTIFF&lt;/ows:Keyword&gt; &lt;/ows:Keywords&gt; &lt;wcs:CoverageId&gt;dem__n30_e034_1arc_v3&lt;/wcs:CoverageId&gt; &lt;wcs:CoverageSubtype&gt;RectifiedGridCoverage&lt;/wcs:CoverageSubtype&gt; &lt;ows:WGS84BoundingBox&gt; &lt;ows:LowerCorner&gt;33.99986111111111 29.999861111111112&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;35.000138888888884 31.00013888888889&lt;/ows:UpperCorner&gt; &lt;/ows:WGS84BoundingBox&gt; &lt;ows:BoundingBox crs=&quot;http://www.opengis.net/def/crs/EPSG/0/EPSG:4326&quot;&gt; &lt;ows:LowerCorner&gt;33.99986111111111 29.999861111111112&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;35.000138888888884 31.00013888888889&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/wcs:CoverageSummary&gt; &lt;wcs:CoverageSummary&gt; &lt;ows:Title&gt;n30_e035_1arc_v3&lt;/ows:Title&gt; &lt;ows:Abstract&gt;Generated from GeoTIFF&lt;/ows:Abstract&gt; &lt;ows:Keywords&gt; &lt;ows:Keyword&gt;n30_e035_1arc_v3&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;WCS&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;GeoTIFF&lt;/ows:Keyword&gt; &lt;/ows:Keywords&gt; &lt;wcs:CoverageId&gt;dem__n30_e035_1arc_v3&lt;/wcs:CoverageId&gt; &lt;wcs:CoverageSubtype&gt;RectifiedGridCoverage&lt;/wcs:CoverageSubtype&gt; &lt;ows:WGS84BoundingBox&gt; &lt;ows:LowerCorner&gt;34.99986111111111 29.999861111111112&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;36.000138888888884 31.00013888888889&lt;/ows:UpperCorner&gt; &lt;/ows:WGS84BoundingBox&gt; &lt;ows:BoundingBox crs=&quot;http://www.opengis.net/def/crs/EPSG/0/EPSG:4326&quot;&gt; &lt;ows:LowerCorner&gt;34.99986111111111 29.999861111111112&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;36.000138888888884 31.00013888888889&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;ows:Metadata about=&quot;metadata&quot; xlink:type=&quot;simple&quot; xlink:href=&quot;https://www.google.com&quot; /&gt; &lt;/wcs:CoverageSummary&gt; &lt;wcs:CoverageSummary&gt; &lt;ows:Title&gt;n31_e034_1arc_v3&lt;/ows:Title&gt; &lt;ows:Abstract&gt;Generated from GeoTIFF&lt;/ows:Abstract&gt; &lt;ows:Keywords&gt; &lt;ows:Keyword&gt;n31_e034_1arc_v3&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;WCS&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;GeoTIFF&lt;/ows:Keyword&gt; &lt;/ows:Keywords&gt; &lt;wcs:CoverageId&gt;dem__n31_e034_1arc_v3&lt;/wcs:CoverageId&gt; &lt;wcs:CoverageSubtype&gt;RectifiedGridCoverage&lt;/wcs:CoverageSubtype&gt; &lt;ows:WGS84BoundingBox&gt; &lt;ows:LowerCorner&gt;33.99986111111111 30.999861111111112&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;35.000138888888884 32.00013888888889&lt;/ows:UpperCorner&gt; &lt;/ows:WGS84BoundingBox&gt; &lt;ows:BoundingBox crs=&quot;http://www.opengis.net/def/crs/EPSG/0/EPSG:4326&quot;&gt; &lt;ows:LowerCorner&gt;33.99986111111111 30.999861111111112&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;35.000138888888884 32.00013888888889&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/wcs:CoverageSummary&gt; &lt;wcs:CoverageSummary&gt; &lt;ows:Title&gt;n31_e035_1arc_v3&lt;/ows:Title&gt; &lt;ows:Abstract&gt;Generated from GeoTIFF&lt;/ows:Abstract&gt; &lt;ows:Keywords&gt; &lt;ows:Keyword&gt;n31_e035_1arc_v3&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;WCS&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;GeoTIFF&lt;/ows:Keyword&gt; &lt;/ows:Keywords&gt; &lt;wcs:CoverageId&gt;dem__n31_e035_1arc_v3&lt;/wcs:CoverageId&gt; &lt;wcs:CoverageSubtype&gt;RectifiedGridCoverage&lt;/wcs:CoverageSubtype&gt; &lt;ows:WGS84BoundingBox&gt; &lt;ows:LowerCorner&gt;34.99986111111111 30.999861111111112&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;36.000138888888884 32.00013888888889&lt;/ows:UpperCorner&gt; &lt;/ows:WGS84BoundingBox&gt; &lt;ows:BoundingBox crs=&quot;http://www.opengis.net/def/crs/EPSG/0/EPSG:4326&quot;&gt; &lt;ows:LowerCorner&gt;34.99986111111111 30.999861111111112&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;36.000138888888884 32.00013888888889&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/wcs:CoverageSummary&gt; &lt;wcs:CoverageSummary&gt; &lt;ows:Title&gt;n31_e036_1arc_v3&lt;/ows:Title&gt; &lt;ows:Abstract&gt;Generated from GeoTIFF&lt;/ows:Abstract&gt; &lt;ows:Keywords&gt; &lt;ows:Keyword&gt;n31_e036_1arc_v3&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;WCS&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;GeoTIFF&lt;/ows:Keyword&gt; &lt;/ows:Keywords&gt; &lt;wcs:CoverageId&gt;dem__n31_e036_1arc_v3&lt;/wcs:CoverageId&gt; &lt;wcs:CoverageSubtype&gt;RectifiedGridCoverage&lt;/wcs:CoverageSubtype&gt; &lt;ows:WGS84BoundingBox&gt; &lt;ows:LowerCorner&gt;35.99986111111111 30.999861111111112&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;37.000138888888884 32.00013888888889&lt;/ows:UpperCorner&gt; &lt;/ows:WGS84BoundingBox&gt; &lt;ows:BoundingBox crs=&quot;http://www.opengis.net/def/crs/EPSG/0/EPSG:4326&quot;&gt; &lt;ows:LowerCorner&gt;35.99986111111111 30.999861111111112&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;37.000138888888884 32.00013888888889&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/wcs:CoverageSummary&gt; &lt;wcs:CoverageSummary&gt; &lt;ows:Title&gt;n32_e034_1arc_v3&lt;/ows:Title&gt; &lt;ows:Abstract&gt;Generated from GeoTIFF&lt;/ows:Abstract&gt; &lt;ows:Keywords&gt; &lt;ows:Keyword&gt;n32_e034_1arc_v3&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;WCS&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;GeoTIFF&lt;/ows:Keyword&gt; &lt;/ows:Keywords&gt; &lt;wcs:CoverageId&gt;dem__n32_e034_1arc_v3&lt;/wcs:CoverageId&gt; &lt;wcs:CoverageSubtype&gt;RectifiedGridCoverage&lt;/wcs:CoverageSubtype&gt; &lt;ows:WGS84BoundingBox&gt; &lt;ows:LowerCorner&gt;33.99986111111111 31.999861111111112&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;35.000138888888884 33.00013888888889&lt;/ows:UpperCorner&gt; &lt;/ows:WGS84BoundingBox&gt; &lt;ows:BoundingBox crs=&quot;http://www.opengis.net/def/crs/EPSG/0/EPSG:4326&quot;&gt; &lt;ows:LowerCorner&gt;33.99986111111111 31.999861111111112&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;35.000138888888884 33.00013888888889&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/wcs:CoverageSummary&gt; &lt;wcs:CoverageSummary&gt; &lt;ows:Title&gt;n32_e035_1arc_v3&lt;/ows:Title&gt; &lt;ows:Abstract&gt;Generated from GeoTIFF&lt;/ows:Abstract&gt; &lt;ows:Keywords&gt; &lt;ows:Keyword&gt;n32_e035_1arc_v3&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;WCS&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;GeoTIFF&lt;/ows:Keyword&gt; &lt;/ows:Keywords&gt; &lt;wcs:CoverageId&gt;dem__n32_e035_1arc_v3&lt;/wcs:CoverageId&gt; &lt;wcs:CoverageSubtype&gt;RectifiedGridCoverage&lt;/wcs:CoverageSubtype&gt; &lt;ows:WGS84BoundingBox&gt; &lt;ows:LowerCorner&gt;34.99986111111111 31.999861111111112&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;36.000138888888884 33.00013888888889&lt;/ows:UpperCorner&gt; &lt;/ows:WGS84BoundingBox&gt; &lt;ows:BoundingBox crs=&quot;http://www.opengis.net/def/crs/EPSG/0/EPSG:4326&quot;&gt; &lt;ows:LowerCorner&gt;34.99986111111111 31.999861111111112&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;36.000138888888884 33.00013888888889&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/wcs:CoverageSummary&gt; &lt;wcs:CoverageSummary&gt; &lt;ows:Title&gt;n32_e036_1arc_v3&lt;/ows:Title&gt; &lt;ows:Abstract&gt;Generated from GeoTIFF&lt;/ows:Abstract&gt; &lt;ows:Keywords&gt; &lt;ows:Keyword&gt;n32_e036_1arc_v3&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;WCS&lt;/ows:Keyword&gt; &lt;ows:Keyword&gt;GeoTIFF&lt;/ows:Keyword&gt; &lt;/ows:Keywords&gt; &lt;wcs:CoverageId&gt;dem__n32_e036_1arc_v3&lt;/wcs:CoverageId&gt; &lt;wcs:CoverageSubtype&gt;RectifiedGridCoverage&lt;/wcs:CoverageSubtype&gt; &lt;ows:WGS84BoundingBox&gt; &lt;ows:LowerCorner&gt;35.99986111111111 31.999861111111112&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;37.000138888888884 33.00013888888889&lt;/ows:UpperCorner&gt; &lt;/ows:WGS84BoundingBox&gt; &lt;ows:BoundingBox crs=&quot;http://www.opengis.net/def/crs/EPSG/0/EPSG:4326&quot;&gt; &lt;ows:LowerCorner&gt;35.99986111111111 31.999861111111112&lt;/ows:LowerCorner&gt; &lt;ows:UpperCorner&gt;37.000138888888884 33.00013888888889&lt;/ows:UpperCorner&gt; &lt;/ows:BoundingBox&gt; &lt;/wcs:CoverageSummary&gt; &lt;wcs:Extension /&gt; &lt;/wcs:Contents&gt; &lt;/wcs:Capabilities&gt;   This request shows an XML file containing the WCS 2.0.1 GetCapabilities response (the following pictures contains the dem__gt30e020n40 layer related sub-section).    ","version":"Next","tagName":"h2"},{"title":"DescribeCoverage​","type":1,"pageTitle":"WCS - Web Coverage Service","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-wcs#describecoverage","content":" The purpose of the DescribeCoverage request is to additional information about a Coverage a client wants to query. It returns information about the crs, the metadata, the domain, the range and the formats it is available in. A client generally will need to issue a DescribeCoverage request before being sure it can make the proper GetCoverage request  &lt;DEM-DEM-SERVING-SERVICE_URL&gt;/geoserver/ows? SERVICE=WCS&amp; VERSION=1.0.0&amp; REQUEST=DescribeCoverage&amp; COVERAGE=n30_e034_1arc_v3   Response example &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;wcs:CoverageDescription xmlns:wcs=&quot;http://www.opengis.net/wcs&quot; xmlns:gml=&quot;http://www.opengis.net/gml&quot; xmlns:ogc=&quot;http://www.opengis.net/ogc&quot; xmlns:ows=&quot;http://www.opengis.net/ows/1.1&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.opengis.net/wcs http://dem-dev-geoserver-development-dem-dev.apps.v0h0bdx6.eastus.aroapp.io/geoserver/schemas/wcs/1.0.0/describeCoverage.xsd&quot; version=&quot;1.0.0&quot;&gt; &lt;wcs:CoverageOffering&gt; &lt;wcs:description&gt;Generated from GeoTIFF&lt;/wcs:description&gt; &lt;wcs:name&gt;dem:n30_e034_1arc_v3&lt;/wcs:name&gt; &lt;wcs:label&gt;n30_e034_1arc_v3&lt;/wcs:label&gt; &lt;wcs:lonLatEnvelope srsName=&quot;urn:ogc:def:crs:OGC:1.3:CRS84&quot;&gt; &lt;gml:pos&gt;33.99986111111111 29.999861111111112&lt;/gml:pos&gt; &lt;gml:pos&gt;35.000138888888884 31.00013888888889&lt;/gml:pos&gt; &lt;/wcs:lonLatEnvelope&gt; &lt;wcs:keywords&gt; &lt;wcs:keyword&gt;n30_e034_1arc_v3&lt;/wcs:keyword&gt; &lt;wcs:keyword&gt;WCS&lt;/wcs:keyword&gt; &lt;wcs:keyword&gt;GeoTIFF&lt;/wcs:keyword&gt; &lt;/wcs:keywords&gt; &lt;wcs:domainSet&gt; &lt;wcs:spatialDomain&gt; &lt;gml:Envelope srsName=&quot;EPSG:4326&quot;&gt; &lt;gml:pos&gt;33.99986111111111 29.999861111111112&lt;/gml:pos&gt; &lt;gml:pos&gt;35.000138888888884 31.00013888888889&lt;/gml:pos&gt; &lt;/gml:Envelope&gt; &lt;gml:RectifiedGrid dimension=&quot;2&quot; srsName=&quot;EPSG:4326&quot;&gt; &lt;gml:limits&gt; &lt;gml:GridEnvelope&gt; &lt;gml:low&gt;0 0&lt;/gml:low&gt; &lt;gml:high&gt;3600 3600&lt;/gml:high&gt; &lt;/gml:GridEnvelope&gt; &lt;/gml:limits&gt; &lt;gml:axisName&gt;x&lt;/gml:axisName&gt; &lt;gml:axisName&gt;y&lt;/gml:axisName&gt; &lt;gml:origin&gt; &lt;gml:pos&gt;34.0 31.000000000000004&lt;/gml:pos&gt; &lt;/gml:origin&gt; &lt;gml:offsetVector&gt;2.777777777777778E-4 0.0&lt;/gml:offsetVector&gt; &lt;gml:offsetVector&gt;0.0 -2.777777777777778E-4&lt;/gml:offsetVector&gt; &lt;/gml:RectifiedGrid&gt; &lt;/wcs:spatialDomain&gt; &lt;/wcs:domainSet&gt; &lt;wcs:rangeSet&gt; &lt;wcs:RangeSet&gt; &lt;wcs:name&gt;n30_e034_1arc_v3&lt;/wcs:name&gt; &lt;wcs:label&gt;n30_e034_1arc_v3&lt;/wcs:label&gt; &lt;wcs:axisDescription&gt; &lt;wcs:AxisDescription&gt; &lt;wcs:name&gt;Band&lt;/wcs:name&gt; &lt;wcs:label&gt;Band&lt;/wcs:label&gt; &lt;wcs:values&gt; &lt;wcs:singleValue&gt;1&lt;/wcs:singleValue&gt; &lt;/wcs:values&gt; &lt;/wcs:AxisDescription&gt; &lt;/wcs:axisDescription&gt; &lt;/wcs:RangeSet&gt; &lt;/wcs:rangeSet&gt; &lt;wcs:supportedCRSs&gt; &lt;wcs:requestResponseCRSs&gt;EPSG:4326&lt;/wcs:requestResponseCRSs&gt; &lt;/wcs:supportedCRSs&gt; &lt;wcs:supportedFormats nativeFormat=&quot;GeoTIFF&quot;&gt; &lt;wcs:formats&gt;AIG&lt;/wcs:formats&gt; &lt;wcs:formats&gt;ArcGrid&lt;/wcs:formats&gt; &lt;wcs:formats&gt;DTED&lt;/wcs:formats&gt; &lt;wcs:formats&gt;EHdr&lt;/wcs:formats&gt; &lt;wcs:formats&gt;ENVIHdr&lt;/wcs:formats&gt; &lt;wcs:formats&gt;ERDASImg&lt;/wcs:formats&gt; &lt;wcs:formats&gt;GeoTIFF&lt;/wcs:formats&gt; &lt;wcs:formats&gt;GIF&lt;/wcs:formats&gt; &lt;wcs:formats&gt;GeoPackage (mosaic)&lt;/wcs:formats&gt; &lt;wcs:formats&gt;ImageMosaic&lt;/wcs:formats&gt; &lt;wcs:formats&gt;ImagePyramid&lt;/wcs:formats&gt; &lt;wcs:formats&gt;JPEG&lt;/wcs:formats&gt; &lt;wcs:formats&gt;NITF&lt;/wcs:formats&gt; &lt;wcs:formats&gt;PNG&lt;/wcs:formats&gt; &lt;wcs:formats&gt;RPFTOC&lt;/wcs:formats&gt; &lt;wcs:formats&gt;RST&lt;/wcs:formats&gt; &lt;wcs:formats&gt;SRP&lt;/wcs:formats&gt; &lt;wcs:formats&gt;TIFF&lt;/wcs:formats&gt; &lt;wcs:formats&gt;VRT&lt;/wcs:formats&gt; &lt;/wcs:supportedFormats&gt; &lt;wcs:supportedInterpolations default=&quot;nearest neighbor&quot;&gt; &lt;wcs:interpolationMethod&gt;nearest neighbor&lt;/wcs:interpolationMethod&gt; &lt;wcs:interpolationMethod&gt;bilinear&lt;/wcs:interpolationMethod&gt; &lt;wcs:interpolationMethod&gt;bicubic&lt;/wcs:interpolationMethod&gt; &lt;/wcs:supportedInterpolations&gt; &lt;/wcs:CoverageOffering&gt; &lt;/wcs:CoverageDescription&gt;   This request shows an XML file containing the DescribeCoverage response of n30_e034_1arc_v3 layer.  ","version":"Next","tagName":"h2"},{"title":"GetCoverage​","type":1,"pageTitle":"WCS - Web Coverage Service","url":"/developer-portal/pr-preview/pr-158/docs/ogc/protocols/ogc-wcs#getcoverage","content":" The GetCoverage operation requests the actual spatial data. It can retrieve subsets of coverages, and the result can be either the coverage itself or a reference to it. The most powerful thing about a GetCoverage request is its ability to subset domains (height and time) and ranges. It can also do resampling, encode in different data formats, and return the resulting file in different ways.  Detailed explanation about params might be found here 🌐  &lt;DEM-DEM-SERVING-SERVICE_URL&gt;/geoserver/ows? SERVICE=WCS&amp; VERSION=1.0.0&amp; REQUEST=GetCoverage&amp; coverage=n30_e034_1arc_v3&amp; CRS=EPSG:4326&amp; BBOX=33.99986111111111,29.999861111111112,35.000138888888884,31.00013888888889&amp; WIDTH=3199&amp; HEIGHT=2833&amp; FORMAT=PNG   Downloaded data/image for n30_e034_1arc_v3 layer for EPSG:4326 projection and for defined BBOX ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}