"use strict";(self.webpackChunk_map_colonies_developer_portal=self.webpackChunk_map_colonies_developer_portal||[]).push([[4278],{13356:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>n});var o=a(74848),r=a(28453);const s={id:"dem-catalog-service",slug:"dem-catalog",title:"Catalog \ud83d\uddc3\ufe0f",tags:["DEM","DTM","DSM","catalog","csw","API"]},l="Catalog Service \ud83d\uddc3\ufe0f",c={id:"MapColonies/DEM/Services/catalog/dem-catalog-service",title:"Catalog \ud83d\uddc3\ufe0f",description:"Catalogue Service for the Web (CSW) is a standard for exposing a catalogue of geospatial records in XML on the Internet (over HTTP). The catalogue is made up of records that describe geospatial data, geospatial services (e.g. WMTS), and related resources.",source:"@site/docs/MapColonies/DEM/Services/catalog/README.md",sourceDirName:"MapColonies/DEM/Services/catalog",slug:"/MapColonies/DEM/Services/catalog/dem-catalog",permalink:"/developer-portal/docs/MapColonies/DEM/Services/catalog/dem-catalog",draft:!1,unlisted:!1,editUrl:"https://github.com/MapColonies/developer-portal/tree/main/packages/create-docusaurus/templates/shared/docs/MapColonies/DEM/Services/catalog/README.md",tags:[{inline:!0,label:"DEM",permalink:"/developer-portal/docs/tags/dem"},{inline:!0,label:"DTM",permalink:"/developer-portal/docs/tags/dtm"},{inline:!0,label:"DSM",permalink:"/developer-portal/docs/tags/dsm"},{inline:!0,label:"catalog",permalink:"/developer-portal/docs/tags/catalog"},{inline:!0,label:"csw",permalink:"/developer-portal/docs/tags/csw"},{inline:!0,label:"API",permalink:"/developer-portal/docs/tags/api"}],version:"current",frontMatter:{id:"dem-catalog-service",slug:"dem-catalog",title:"Catalog \ud83d\uddc3\ufe0f",tags:["DEM","DTM","DSM","catalog","csw","API"]},sidebar:"docSidebar",previous:{title:"Terrain Provider",permalink:"/developer-portal/docs/MapColonies/DEM/Services/CesiumTerrainProvider/info"},next:{title:"Profile v1",permalink:"/developer-portal/docs/MapColonies/DEM/Services/catalog/catalog-profile-v1"}},i={},n=[];function d(e){const t={a:"a",h1:"h1",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"catalog-service-\ufe0f",children:"Catalog Service \ud83d\uddc3\ufe0f"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"/docs/ogc/protocols/ogc-csw/ogc-csw",children:"Catalogue Service for the Web (CSW)"})," is a standard for exposing a catalogue of geospatial records in XML on the Internet (over HTTP). The catalogue is made up of records that describe geospatial data, geospatial services (e.g. ",(0,o.jsx)(t.a,{href:"/docs/ogc/protocols/ogc-wmts",children:"WMTS"}),"), and related resources."]}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:(0,o.jsx)(t.strong,{children:"Request"})}),(0,o.jsx)(t.th,{children:(0,o.jsx)(t.strong,{children:"HTTP method binding(s)"})})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"GetCapabilities"}),(0,o.jsx)(t.td,{children:"GET (KVP) / POST (XML) / SOAP"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"DescribeRecord"}),(0,o.jsx)(t.td,{children:"GET (KVP) / POST (XML) / SOAP"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"GetRecords"}),(0,o.jsx)(t.td,{children:"GET (KVP) / POST (XML) / SOAP"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"GetRecordById"}),(0,o.jsx)(t.td,{children:"GET (KVP) / POST (XML) / SOAP"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"GetRepositoryItem"}),(0,o.jsx)(t.td,{children:"GET (KVP)"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"GetDomain"}),(0,o.jsx)(t.td,{children:"GET (KVP) / POST (XML) / SOAP"})]})]})]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>l,x:()=>c});var o=a(96540);const r={},s=o.createContext(r);function l(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);